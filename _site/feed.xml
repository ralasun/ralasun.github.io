<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.9.0">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2021-06-30T17:45:56+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Ralasun Resarch Blog</title><subtitle></subtitle><author><name>Seonhwa Lee</name></author><entry><title type="html">Short-time Fourier Transform(STFT) 과 Discrete Wavelet Transform(DWT)</title><link href="http://localhost:4000/signal%20analysis/2021/06/21/stft-dwt/" rel="alternate" type="text/html" title="Short-time Fourier Transform(STFT) 과 Discrete Wavelet Transform(DWT)" /><published>2021-06-21T00:00:00+09:00</published><updated>2021-06-21T00:00:00+09:00</updated><id>http://localhost:4000/signal%20analysis/2021/06/21/stft-dwt</id><content type="html" xml:base="http://localhost:4000/signal%20analysis/2021/06/21/stft-dwt/">&lt;p&gt;Fourier Transform의 단점은 무한히 흘러가는 파동에 대한 주파수 분석만 가능하기 때문에 국소적인 시간 부분 단위로는 주파수 분석을 할 수가 없습니다. 따라서 시간-주파수 영역 모두 분석할 수 있는 방법으로 Short-term Fourier Transform과 Discrete Wavelet Transform이 있습니다.&lt;/p&gt;

&lt;h1&gt;Limitation of Fourier Transform&lt;/h1&gt;

&lt;p align=&quot;center&quot;&gt;&lt;img width=&quot;500&quot; src=&quot;https://imgur.com/2Xr5hU4.png&quot; /&gt;&lt;/p&gt;
&lt;figcaption align=&quot;center&quot;&gt;그림 1. Fourier Transform&lt;/figcaption&gt;

&lt;p&gt;&amp;lt;그림 1.&amp;gt;을 보면, 시간에 따라 주파수가 변화는 신호에 대해서 푸리에 변환은 시간에 따른 변화 정보를 담지 못합니다. 일정한 속도로 진동하는 정현파(sine함수와 cosine함수)가 아니라 갑자기 sharp한 포인트를 가지는 파동같은 경우에도 이러한 변화를 푸리에 변환을 통해선 확인할 수가 없습니다.&lt;/p&gt;

&lt;p&gt;따라서, 일정한 시간 블럭(window)로 나눠서 각각 블럭에 대해 푸리에 변환을 적용한다면 이러한 푸리에 변환의 단점을 어느정도 완화시킬 수 있습니다. 이 방법이 바로 국소 푸리에 변환(Short-Time Fourier Transform, STFT)입니다.&lt;/p&gt;

&lt;h1&gt;Short-Time Fourier Transform(STFT)&lt;/h1&gt;

\[\hat f(t, u) = \int_{-\infty}^{\infty}f(t')w(t'-t)e^{-i2\pi t'u}dt' \tag{1}\]

&lt;p&gt;국소 푸리에 변환은 신호를 슬라이딩 윈도우 기법처럼 특정 길이를 가진 윈도우를 시그널 위에 움직이면서, 각각 윈도우에서 푸리에 변환을 하는 것입니다. 특정 시간 t에 대해서 푸리에 변환을 여러번 계산하게 되는데, 계산한 횟수만큼 평균을 구해서 특정 시간 t에서의 주파수 스펙트럼을 구합니다.&lt;/p&gt;

&lt;p&gt;그렇다면 &lt;span style=&quot;text-decoration: underline&quot;&gt;국소 푸리에 변환의 결과에 영향을 주는 변수&lt;/span&gt;는 어떤걸까요? 바로 &lt;span style=&quot;text-decoration: underline&quot;&gt;&lt;b&gt;슬라이딩 윈도우&lt;/b&gt;&lt;/span&gt;의 크기입니다.&lt;/p&gt;

&lt;h2&gt;Trade-offs between frequency resolution and time resolution&lt;/h2&gt;

&lt;p align=&quot;center&quot;&gt;&lt;img width=&quot;500&quot; src=&quot;https://imgur.com/7DE3e69.png&quot; /&gt;&lt;/p&gt;
&lt;figcaption align=&quot;center&quot;&gt;그림 2. Trade-Offs between Frequency and Time in STFT&lt;/figcaption&gt;

&lt;p&gt;윈도우 크기가 너무 작으면(narrow window), 주파수 영역의 해상도가 떨어집니다. 조금만 생각하면 이해하기 쉽습니다. 푸리에 변환하는 대상인 윈도우를 크기를 작게해서 변환하는 윈도우 갯수를 늘린다면, 비슷한 시각 근처의 윈도우들의 분석 결과가 대부분 유사할 것입니다. 따라서, 특정 시간 t 주변에 frequency 스펙트럼이 비슷하게 그려지기 때문에, &amp;lt;그림 2.&amp;gt; 처럼 frequency 축으로 ‘spread-out’ 되어 해상도가 떨어집니다. 반대로 윈도우 크기가 너무 크면(broad window), 반대로 주파수 영역 해상도는 올라가지만 time 영역 해상도가 떨어집니다. &amp;lt;그림 2.&amp;gt;를 보시면, 왼쪽그림으로 갈수록 시간 영역에 흐릿한 영역이 넓어지는 것을 확인할 수 있습니다.&lt;/p&gt;

&lt;p&gt;그렇다면, 어떻게 해야 시간 영역과 주파수 영역 모두 해상도를 높게 가져갈 수 있을까요 ? &lt;span style=&quot;text-decoration: underline&quot;&gt;&amp;lt;그림 1.&amp;gt;의 신호에서 진동이 빠른 부분(높은 주파수)은 윈도우 크기를 작게 가져가고, 진동이 느린 부분(낮은 주파수)은 윈도우 크기를 넓게 가져가는 것입니다.&lt;/span&gt; 그러나, STFT는 고정된 윈도우 사이즈에 대해서만 계산이 가능합니다. 이의 단점을 해결한 것이 바로 &lt;b&gt;웨이블릿 변환(Wavelet Transform)&lt;/b&gt;입니다.&lt;/p&gt;

&lt;h1&gt;Wavelet Transform&lt;/h1&gt;

&lt;p&gt;푸리에 변환은 cosine과 sine으로 구성된 기저함수로의 분해입니다. 여기서 cosine과 sine은 정현파로, 시간에 따라 변하지 않고 일정한 속도와 크기로 움직입니다. 반면에 웨이블릿 변환은 ‘웨이블릿(wavelet)’이라는 기저함수로 분해됩니다. Wave는 파동, let은 ‘작다’ 라는 의미로, 작은 파동을 뜻합니다. &lt;span style=&quot;text-decoration: underline&quot;&gt;웨이블릿 변환은 사전에 정의된 웨이블릿 기저함수들로 분해&lt;/span&gt;하는 것입니다. 그렇다면 웨이블릿 변환은 왜 시간과 주파수 영역 둘 다에서 높은 해상도를 가지는 걸까요 ? 웨이블릿의 특징을 살펴보면 알 수 있습니다.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;https://miro.medium.com/max/1400/1*Ioee_j_s29XVULQVUN_OmA.png&quot; /&gt;&lt;/p&gt;
&lt;figcaption align=&quot;center&quot;&gt;그림 3. Example Wavelets&lt;/figcaption&gt;

&lt;p&gt;&amp;lt;그림 1.&amp;gt;은 웨이블릿 함수의 예입니다. 웨이블릿은 국소 시간 부분에만 파동이 존재하고, 대부분은 0의 값을 가지는 파동입니다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;A Wavelet is wave-like oscillation that is localized in time&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;웨이블릿은 2가지 파라미터가 있습니다. scale과 location입니다. Scale은   웨이블릿 파동을 늘이거나 줄이는데 관여합니다.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;https://miro.medium.com/max/1400/1*F4yPDvEePSWVLb7C9rRuag.png&quot; /&gt;&lt;/p&gt;
&lt;figcaption align=&quot;center&quot;&gt;그림 4. 웨이블릿의 scale변수&lt;/figcaption&gt;

&lt;p&gt;scale값이 크면, 웨이블릿은 늘어난 형태로 즉 작은 주파수를 가지게 되고, 국소 시간 부분의 크기가 증가합니다. 반대로 scale이 작아지면 웨이블릿은 큰 주파수를 가지게 되고 국소 시간 부분의 크기가 감소합니다.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;https://miro.medium.com/max/1400/1*QUAYlxYNrdRX0f4gRjTLtA.png&quot; /&gt;&lt;/p&gt;
&lt;figcaption align=&quot;center&quot;&gt;그림 5. 웨이블릿의 location변수&lt;/figcaption&gt;

&lt;p&gt;location변수는 wavelet의 이동과 관련됩니다. 주어진 location 변수만큼 웨이블릿은 주어진 신호를 슬라이딩하면서 변환을 계산하는 것입니다. 이러한 특징 때문에 웨이블릿 변환은 &lt;b&gt;합성곱(convolution)&lt;/b&gt;으로 볼 수 있습니다.&lt;/p&gt;

&lt;p algin=&quot;center&quot;&gt;&lt;img src=&quot;https://miro.medium.com/max/1200/1*4fXf0Yy8TMLSk7LXoZDDWw.gif&quot; /&gt;&lt;/p&gt;
&lt;figcaption align=&quot;center&quot;&gt;그림 6. 웨이블릿 변환 애니메이션&lt;/figcaption&gt;

&lt;p&gt;따라서, &lt;span style=&quot;text-decoration: underline&quot;&gt;웨이블릿 변환은 작은 주파수에 대해선 넓은 윈도우 크기를 가지고, 큰 주파수에 대해선 좁은 윈도우 크기를 가지기 때문에 시간과 주파수 두 영역 모두에서 높은 해상도를 가질 수 있게 되는 것&lt;/span&gt;입니다.&lt;/p&gt;

&lt;h2&gt;Differences among FT, STFT, and WT&lt;/h2&gt;

&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;https://imgur.com/ueD0HKr.png&quot; /&gt;&lt;figcaption align=&quot;center&quot;&gt;그림 5. FT, STFT 와 WT 비교&lt;/figcaption&gt;&lt;/p&gt;

&lt;p&gt;&amp;lt;그림 5.&amp;gt;는 푸리에 변환, 국소 푸리에 변환과 웨이블릿 변환을 비교한 그림입니다. FT는 time domain영역에 대한 주파수 변화는 볼 수 없고, STFT는 모두 동일한 윈도우 크기에 대해서만 주파수 영역을 분석할 수 있습니다. 반면에 WT는 주파수 크기에 따른 유연한 윈도우 크기를 설정하여 시간과 주파수 영역에 대한 해상도를 높일 수 있습니다.&lt;/p&gt;

&lt;h2&gt;Various kinds of Wavelets&lt;/h2&gt;

&lt;p&gt;아래는 다양한 웨이블릿 함수입니다.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;https://miro.medium.com/max/1400/1*mkdL9Wjoj2MjbPtkrpoZjA.png&quot; /&gt;&lt;/p&gt;
&lt;figcaption align=&quot;center&quot;&gt;그림 6. 웨이블릿 종류들&lt;/figcaption&gt;

&lt;p&gt;그림에서 다양한 웨이블릿인 것처럼, 어떤 웨이블릿을 선택하느냐에 따라 다른 변환 결과를 갖게 될 것입니다. 따라서, 주어진 신호에서 어떠한 특징을 뽑고 싶은지를 판단해야 하므로, 각 웨이블릿의 특징들을 살펴봐야 합니다. 여기서는 생략하도록 하겠습니다.&lt;/p&gt;

&lt;h2&gt;Discrete Wavelet Transform&lt;/h2&gt;

&lt;p&gt;좀 더 들어가서, 이산 웨이블릿 변환의 계산과정에 대해 살펴보겠습니다. 웨이블릿 변환은 해당 신호가 주어진 scale과 location 변수를 가진 wavelet과 얼마만큼 닮았는지에 대한 양에 해당되는 계수를 구하는 과정입니다. 따라서 이 계수들은 filter-bank를 반복적으로 적용하는 형태로 순차적으로 계산됩니다.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;https://imgur.com/7KNw6xP.png&quot; /&gt;&lt;/p&gt;
&lt;figcaption align=&quot;center&quot;&gt;그림 7. Filter bank view of wavelet decomposition&lt;/figcaption&gt;

&lt;p&gt;이산 웨이블릿 변환에서는 두 변수 scale(a)과 location(b)은 2의 배수씩 증가시켜서 다양한 웨이블릿 형태를 얻습니다.&lt;/p&gt;

\[a^j = 2^j , \,\,\,\, b_{j,k} = 2^jk \triangle t, \\where \,\, j = 1, 2, \dots, \infty, \\k=-\infty, \dots, -2, -1, 0, 1, 2, \dots, \infty\]

&lt;p&gt;직관적으로 이해하면, scale이 커질수록 주파수가 작아지기 때문에 국소 시간 부분의 크기가 증가합니다. 따라서, 여기에 맞춰서 scale이 커질수록 shift되는 정도도 큼직해야하고, 반면에 샘플링 정도는 작아져야 합니다. 그렇게 되어야 시간-주파수 영역에서의 해상도를 유지할 수 있습니다(그림 8.).&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;https://imgur.com/eCoFXbq.png&quot; /&gt;&lt;figcaption align=&quot;center&quot;&gt;그림 8. dyadic sampling&lt;/figcaption&gt;&lt;/p&gt;

&lt;p&gt;따라서 처음에 적용하는 웨이블릿은 scale이 가장 작기 때문에, 높은 주파수 영역대의 웨이블릿과의 신호와의 합성곱의 결과로 해당 웨이블릿과 유산한 양이 계산됩니다. 그렇다면 나머지 주파수 영역대에 대해서도 그 다음 scale인 2배된 scale을 통과해야 하는데 이는 마치 high-pass filter를 통과하고 난 나머지 부분에 대해서 처음 적용했던 필터보단 낮지만 높은 주파수 영역대를 살펴보는 또다른 high-pass filter를 통과시키는 것과 같은 과정을 거치게 됩니다. 따라서 결국엔 recursive한 형태를 보이게 되는 겁니다.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;https://imgur.com/WN4GtSe.png&quot; /&gt;&lt;figcaption align=&quot;center&quot;&gt;그림 9. filter bank view of wavelet decomposition(2)&lt;/figcaption&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;이상으로 포스팅을 마치겠습니다.&lt;/p&gt;

&lt;hr /&gt;

&lt;ol&gt;
  &lt;li&gt;The Wavelet Transform, &lt;a href=&quot;https://towardsdatascience.com/the-wavelet-transform-e9cfa85d7b34&quot;&gt;https://towardsdatascience.com/the-wavelet-transform-e9cfa85d7b34&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Lecture 16 : Limitations of the Fourier Transform: STFT, &lt;a href=&quot;https://qiml.radiology.wisc.edu/wp-content/uploads/sites/760/2020/10/notes_016_stft.pdf&quot;&gt;https://qiml.radiology.wisc.edu/wp-content/uploads/sites/760/2020/10/notes_016_stft.pdf&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Lecture 17 : Wavelets: Motivation and Description, &lt;a href=&quot;https://qiml.radiology.wisc.edu/wp-content/uploads/sites/760/2020/10/notes_017_wavelets_intro.pdf&quot;&gt;https://qiml.radiology.wisc.edu/wp-content/uploads/sites/760/2020/10/notes_017_wavelets_intro.pdf&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</content><author><name>Seonhwa Lee</name></author><category term="Signal Analysis" /><category term="signal-analysis" /><summary type="html">Fourier Transform의 단점은 무한히 흘러가는 파동에 대한 주파수 분석만 가능하기 때문에 국소적인 시간 부분 단위로는 주파수 분석을 할 수가 없습니다. 따라서 시간-주파수 영역 모두 분석할 수 있는 방법으로 Short-term Fourier Transform과 Discrete Wavelet Transform이 있습니다. Limitation of Fourier Transform 그림 1. Fourier Transform &amp;lt;그림 1.&amp;gt;을 보면, 시간에 따라 주파수가 변화는 신호에 대해서 푸리에 변환은 시간에 따른 변화 정보를 담지 못합니다. 일정한 속도로 진동하는 정현파(sine함수와 cosine함수)가 아니라 갑자기 sharp한 포인트를 가지는 파동같은 경우에도 이러한 변화를 푸리에 변환을 통해선 확인할 수가 없습니다. 따라서, 일정한 시간 블럭(window)로 나눠서 각각 블럭에 대해 푸리에 변환을 적용한다면 이러한 푸리에 변환의 단점을 어느정도 완화시킬 수 있습니다. 이 방법이 바로 국소 푸리에 변환(Short-Time Fourier Transform, STFT)입니다. Short-Time Fourier Transform(STFT) \[\hat f(t, u) = \int_{-\infty}^{\infty}f(t')w(t'-t)e^{-i2\pi t'u}dt' \tag{1}\] 국소 푸리에 변환은 신호를 슬라이딩 윈도우 기법처럼 특정 길이를 가진 윈도우를 시그널 위에 움직이면서, 각각 윈도우에서 푸리에 변환을 하는 것입니다. 특정 시간 t에 대해서 푸리에 변환을 여러번 계산하게 되는데, 계산한 횟수만큼 평균을 구해서 특정 시간 t에서의 주파수 스펙트럼을 구합니다. 그렇다면 국소 푸리에 변환의 결과에 영향을 주는 변수는 어떤걸까요? 바로 슬라이딩 윈도우의 크기입니다. Trade-offs between frequency resolution and time resolution 그림 2. Trade-Offs between Frequency and Time in STFT 윈도우 크기가 너무 작으면(narrow window), 주파수 영역의 해상도가 떨어집니다. 조금만 생각하면 이해하기 쉽습니다. 푸리에 변환하는 대상인 윈도우를 크기를 작게해서 변환하는 윈도우 갯수를 늘린다면, 비슷한 시각 근처의 윈도우들의 분석 결과가 대부분 유사할 것입니다. 따라서, 특정 시간 t 주변에 frequency 스펙트럼이 비슷하게 그려지기 때문에, &amp;lt;그림 2.&amp;gt; 처럼 frequency 축으로 ‘spread-out’ 되어 해상도가 떨어집니다. 반대로 윈도우 크기가 너무 크면(broad window), 반대로 주파수 영역 해상도는 올라가지만 time 영역 해상도가 떨어집니다. &amp;lt;그림 2.&amp;gt;를 보시면, 왼쪽그림으로 갈수록 시간 영역에 흐릿한 영역이 넓어지는 것을 확인할 수 있습니다. 그렇다면, 어떻게 해야 시간 영역과 주파수 영역 모두 해상도를 높게 가져갈 수 있을까요 ? &amp;lt;그림 1.&amp;gt;의 신호에서 진동이 빠른 부분(높은 주파수)은 윈도우 크기를 작게 가져가고, 진동이 느린 부분(낮은 주파수)은 윈도우 크기를 넓게 가져가는 것입니다. 그러나, STFT는 고정된 윈도우 사이즈에 대해서만 계산이 가능합니다. 이의 단점을 해결한 것이 바로 웨이블릿 변환(Wavelet Transform)입니다. Wavelet Transform 푸리에 변환은 cosine과 sine으로 구성된 기저함수로의 분해입니다. 여기서 cosine과 sine은 정현파로, 시간에 따라 변하지 않고 일정한 속도와 크기로 움직입니다. 반면에 웨이블릿 변환은 ‘웨이블릿(wavelet)’이라는 기저함수로 분해됩니다. Wave는 파동, let은 ‘작다’ 라는 의미로, 작은 파동을 뜻합니다. 웨이블릿 변환은 사전에 정의된 웨이블릿 기저함수들로 분해하는 것입니다. 그렇다면 웨이블릿 변환은 왜 시간과 주파수 영역 둘 다에서 높은 해상도를 가지는 걸까요 ? 웨이블릿의 특징을 살펴보면 알 수 있습니다. 그림 3. Example Wavelets &amp;lt;그림 1.&amp;gt;은 웨이블릿 함수의 예입니다. 웨이블릿은 국소 시간 부분에만 파동이 존재하고, 대부분은 0의 값을 가지는 파동입니다. A Wavelet is wave-like oscillation that is localized in time 웨이블릿은 2가지 파라미터가 있습니다. scale과 location입니다. Scale은 웨이블릿 파동을 늘이거나 줄이는데 관여합니다. 그림 4. 웨이블릿의 scale변수 scale값이 크면, 웨이블릿은 늘어난 형태로 즉 작은 주파수를 가지게 되고, 국소 시간 부분의 크기가 증가합니다. 반대로 scale이 작아지면 웨이블릿은 큰 주파수를 가지게 되고 국소 시간 부분의 크기가 감소합니다. 그림 5. 웨이블릿의 location변수 location변수는 wavelet의 이동과 관련됩니다. 주어진 location 변수만큼 웨이블릿은 주어진 신호를 슬라이딩하면서 변환을 계산하는 것입니다. 이러한 특징 때문에 웨이블릿 변환은 합성곱(convolution)으로 볼 수 있습니다. 그림 6. 웨이블릿 변환 애니메이션 따라서, 웨이블릿 변환은 작은 주파수에 대해선 넓은 윈도우 크기를 가지고, 큰 주파수에 대해선 좁은 윈도우 크기를 가지기 때문에 시간과 주파수 두 영역 모두에서 높은 해상도를 가질 수 있게 되는 것입니다. Differences among FT, STFT, and WT 그림 5. FT, STFT 와 WT 비교 &amp;lt;그림 5.&amp;gt;는 푸리에 변환, 국소 푸리에 변환과 웨이블릿 변환을 비교한 그림입니다. FT는 time domain영역에 대한 주파수 변화는 볼 수 없고, STFT는 모두 동일한 윈도우 크기에 대해서만 주파수 영역을 분석할 수 있습니다. 반면에 WT는 주파수 크기에 따른 유연한 윈도우 크기를 설정하여 시간과 주파수 영역에 대한 해상도를 높일 수 있습니다. Various kinds of Wavelets 아래는 다양한 웨이블릿 함수입니다. 그림 6. 웨이블릿 종류들 그림에서 다양한 웨이블릿인 것처럼, 어떤 웨이블릿을 선택하느냐에 따라 다른 변환 결과를 갖게 될 것입니다. 따라서, 주어진 신호에서 어떠한 특징을 뽑고 싶은지를 판단해야 하므로, 각 웨이블릿의 특징들을 살펴봐야 합니다. 여기서는 생략하도록 하겠습니다. Discrete Wavelet Transform 좀 더 들어가서, 이산 웨이블릿 변환의 계산과정에 대해 살펴보겠습니다. 웨이블릿 변환은 해당 신호가 주어진 scale과 location 변수를 가진 wavelet과 얼마만큼 닮았는지에 대한 양에 해당되는 계수를 구하는 과정입니다. 따라서 이 계수들은 filter-bank를 반복적으로 적용하는 형태로 순차적으로 계산됩니다. 그림 7. Filter bank view of wavelet decomposition 이산 웨이블릿 변환에서는 두 변수 scale(a)과 location(b)은 2의 배수씩 증가시켜서 다양한 웨이블릿 형태를 얻습니다. \[a^j = 2^j , \,\,\,\, b_{j,k} = 2^jk \triangle t, \\where \,\, j = 1, 2, \dots, \infty, \\k=-\infty, \dots, -2, -1, 0, 1, 2, \dots, \infty\] 직관적으로 이해하면, scale이 커질수록 주파수가 작아지기 때문에 국소 시간 부분의 크기가 증가합니다. 따라서, 여기에 맞춰서 scale이 커질수록 shift되는 정도도 큼직해야하고, 반면에 샘플링 정도는 작아져야 합니다. 그렇게 되어야 시간-주파수 영역에서의 해상도를 유지할 수 있습니다(그림 8.). 그림 8. dyadic sampling 따라서 처음에 적용하는 웨이블릿은 scale이 가장 작기 때문에, 높은 주파수 영역대의 웨이블릿과의 신호와의 합성곱의 결과로 해당 웨이블릿과 유산한 양이 계산됩니다. 그렇다면 나머지 주파수 영역대에 대해서도 그 다음 scale인 2배된 scale을 통과해야 하는데 이는 마치 high-pass filter를 통과하고 난 나머지 부분에 대해서 처음 적용했던 필터보단 낮지만 높은 주파수 영역대를 살펴보는 또다른 high-pass filter를 통과시키는 것과 같은 과정을 거치게 됩니다. 따라서 결국엔 recursive한 형태를 보이게 되는 겁니다. 그림 9. filter bank view of wavelet decomposition(2) 이상으로 포스팅을 마치겠습니다. The Wavelet Transform, https://towardsdatascience.com/the-wavelet-transform-e9cfa85d7b34 Lecture 16 : Limitations of the Fourier Transform: STFT, https://qiml.radiology.wisc.edu/wp-content/uploads/sites/760/2020/10/notes_016_stft.pdf Lecture 17 : Wavelets: Motivation and Description, https://qiml.radiology.wisc.edu/wp-content/uploads/sites/760/2020/10/notes_017_wavelets_intro.pdf</summary></entry><entry><title type="html">Discrete Fourier Transform에 대하여</title><link href="http://localhost:4000/signal%20analysis/2021/06/18/ft-vs-wt/" rel="alternate" type="text/html" title="Discrete Fourier Transform에 대하여" /><published>2021-06-18T00:00:00+09:00</published><updated>2021-06-18T00:00:00+09:00</updated><id>http://localhost:4000/signal%20analysis/2021/06/18/ft-vs-wt</id><content type="html" xml:base="http://localhost:4000/signal%20analysis/2021/06/18/ft-vs-wt/">&lt;p&gt;이산 푸리에 변환에 대해 알아보도록 하겠습니다.&lt;/p&gt;

&lt;h1&gt; Fourier transform &lt;/h1&gt;

&lt;p&gt;푸리에 변환이란 &lt;span style=&quot;text-decoration: underline&quot;&gt;&lt;b&gt;임의의 입력 신호를 다양한 주파수를 갖는 주기함수들의 합으로 분해하여 표현&lt;/b&gt;&lt;/span&gt;한 것입니다. 여러 주기함수가 혼합되어 있는 신호를 봤을 땐 신호의 특성을 살피기 어려우나, 푸리에 변환은 아래 그림처럼 혼합된 신호(빨간색)을 여러 종류의 주파수를 갖는 주기함수들(파란색)로 분해할 수 있기 때문에, 신호의 특징을 살펴볼 수 있습니다.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;https://t1.daumcdn.net/cfile/tistory/9967FA3359B63D8122&quot; /&gt;&lt;figcaption align=&quot;center&quot;&gt; 그림 1. 푸리에 변환 &lt;/figcaption&gt;&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;&lt;img width=&quot;500&quot; src=&quot;https://i.imgur.com/GrX9rSd.png&quot; /&gt;&lt;figcaption align=&quot;center&quot;&gt; 그림 2. 푸리에 변환(2) &lt;/figcaption&gt;&lt;/p&gt;

&lt;p&gt;푸리에 변환의 수학적 의미는 Time Domain(x축 : 시간, y축 : 진폭)을 Frequency Domain으로 변환(x축 : Frequency, y축 : 푸리에 변환 결과에 해당되는 계수)하는 것입니다. 아래는 일반 신호를 푸리에 변환한 결과(Spectogram)를 나타냅니다. Input 신호는 두 개의 주파수가 메인인 신호의 합성파입니다. 이처럼 푸리에 변환을 통해서 raw 데이터에서 볼 수 없는 특징을 찾아낼 수 있습니다.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;&lt;img width=&quot;500&quot; src=&quot;https://imgur.com/gXJGsN2.png&quot; /&gt;&lt;figcaption align=&quot;center&quot;&gt; 그림 3. 푸리에 변환 결과 &lt;/figcaption&gt;&lt;/p&gt;

&lt;p&gt;일반적으로 Audio나 EEG 등 signal 데이터는 연속적일 수 없습니다. 왜냐하면, 기계를 통해 신호가 수집(sampling)이 되기 때문에 이산(Discrete)적인 특징을 띄고 있습니다. 예를 들어 256Hz로 샘플링 되는 신호라는 뜻은 1초에 256개 신호 sample을 수집한다는 뜻입니다.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;https://imgur.com/OQw4chB.png&quot; /&gt;&lt;figcaption align=&quot;center&quot;&gt;그림 4. 연속신호(continuous signal)와 디지털 신호(discretized signal)&lt;/figcaption&gt;&lt;/p&gt;

&lt;p&gt;따라서, 이산적인 특징을 다룰 수 있는 이산 푸리에 변환(Discrete Fourier Transform)을 사용합니다. 연속 푸리에 변환과 이산 푸리에 변환식은 아래와 같습니다.&lt;/p&gt;

\[\hat{f}(\xi) = \int_{\mathbf{R}^d} f(x)e^{2\pi ix\xi} \,dx \tag{1}\]

&lt;figcaption align=&quot;center&quot;&gt;수식 1. 연속 푸리에 변환&lt;/figcaption&gt;

\[\mathnormal{X}_k = \sum_{n=0}^{N-1}x_n\cdot e^{\frac{-2\pi i}{N}kn} \tag{2}\]

&lt;figcaption align=&quot;center&quot;&gt;수식 2. 이산 푸리에 변환&lt;/figcaption&gt;

&lt;h2&gt;Concept of Fourier Transform&lt;/h2&gt;

&lt;p&gt;푸리에 변환은 위에서 언급했듯이 여러 종류의 주파수를 갖는 함수로 분해하는 과정이라 하였습니다. 이 부분에 관한 의미를 2가지 측면으로 살펴보겠습니다. 푸리에 변환의 파동적인 측면에서의 개념(기본적 개념)과 선형대수적 개념입니다.&lt;/p&gt;

&lt;h3&gt;1. 푸리에 변환의 기본적 개념&lt;/h3&gt;

&lt;p&gt;푸리에 변환은 위에서 언급했듯이 여러 종류의 주파수를 갖는 함수로 분해하는 과정이라고 하였습니다. 어떤 방식으로 분해하는 걸까요 ? 이를 이해하기 위해선 오일러 공식을 알아야 합니다. 오일러 공식에 따르면, 복소지수함수 $e^{ix}$ 는 코사인과 사인의 합으로 구성됩니다. 오일러 공식을 좌표평면위에 나타나면 &amp;lt;그림 4.&amp;gt;와 같습니다. 이는 반지름이 1인 단위 원 위에 각 $x$ (그림에선 $\omega$) 성분을 가진 점으로 표현됩니다.&lt;/p&gt;

\[e^{ix} = cost + isinx \tag{3}\]

&lt;figcaption align=&quot;center&quot;&gt;수식 3. 오일러 공식&lt;/figcaption&gt;
&lt;p align=&quot;center&quot;&gt;
&lt;img width=&quot;300&quot; src=&quot;https://i.imgur.com/iVBkQVd.png&quot; /&gt;&lt;figcaption align=&quot;center&quot;&gt;그림 4. Euler's Formula&lt;/figcaption&gt;&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;https://imgur.com/dEe9227.gif&quot; /&gt;&lt;figcaption align=&quot;center&quot;&gt;그림 5. 푸리에 변환의 시각적 표현&lt;/figcaption&gt;&lt;/p&gt;

&lt;p&gt;&amp;lt;수식 1.&amp;gt;와 &amp;lt;수식 2.&amp;gt;를 보면 오일러 공식 부분을 대입해서 다시 쓰면 아래와 같습니다(이산 푸리에 변환에 대해서만 진행).&lt;/p&gt;

\[\mathnormal{X_k} = \sum_{n=0}^{N-1}x_n \cdot [cos(\frac{2\pi}{N}kn) - isin(\frac{2\pi}{N}kn)] \tag{4}\]

&lt;figcaption align=&quot;center&quot;&gt;수식 4. 푸리에 변환&lt;/figcaption&gt;

&lt;p&gt;&amp;lt;그림 4.&amp;gt;에서 단위 원 위에 있는 점이 일정한 속도로 움직이고, 이를 time domain 위에 그림을 그리면 &amp;lt;그림 5.&amp;gt;의 1번째 그림이 됩니다(1번째 그림이 단위 원이라고 가정한 것입니다). 여기서 속도를 결정하는 것이 바로 주파수에 해당됩니다. 즉 $\frac{2 \pi k}{N}$ 가 크면 클수록 원 위의 점이 빨리 움직이게 됩니다. &amp;lt;그림 5.&amp;gt;에서의 2번째그림에서 4번째 그림으로 갈수록 점의 움직임이 빨라지는 것을 볼 수 있는데, 이는 아래로 갈수록 큰 주파수를 가지는 것을 뜻합니다.&lt;/p&gt;

&lt;p&gt;마지막으로 &amp;lt;수식 4.&amp;gt;에서 $x_n$ 은 원의 반지름을 결정하는 요소입니다. 즉, $x_n$ 이 작을수록 작은 크기의 원 위의 점의 움직임에 해당되는 것입니다. &amp;lt;그림 5&amp;gt;에서 4번째 그림에 해당되는 것입니다.&lt;/p&gt;

&lt;p&gt;즉 푸리에 변환이란 &amp;lt;그림 5.&amp;gt;의 마지막 그림처럼 여러 크기와 주파수를 가진 복소수 함수의 분해를 뜻하는 것입니다. 마지막 그림에서 그려지는 신호는 결국 1~4번째 단일 신호들의 합으로 표현되는 것과 마찬가지입니다.&lt;/p&gt;

&lt;p&gt;푸리에 변환의 결과인 $\mathnormal{X_k}$ 가 뜻하는 건 이산화된 신호 $x_1, \cdots, x_n$ 인 각 지점에서 $\frac{2\pi k}{N}$ 주파수를 가진 주기함수를 얼마만큼 가지고 있느냐를 계산한 후 합한 것입니다. 즉, 전체적으로 해당 주파수를 가진 부분을 신호가 얼마만큼 가지고 있는지에 대한 정도를 하나의 계수로 표현한 것입니다. 따라서 &amp;lt;그림 3.&amp;gt; 에서 y축은 해당 주파수를 가진 주기함수가 이 신호에 얼마만큼 들어있는지에 대한 양을 나타내는 것입니다.&lt;/p&gt;

&lt;h2&gt;2. 푸리에 변환의 선형대수적 개념&lt;/h2&gt;

&lt;p&gt;다음으론 푸리에 변환의 선형대수적 개념에 대해 살펴보도록 하겠습니다. 이를 살펴보기 위해선 선형대수 지식이 필요합니다. 선형대수에서 N차원에서 N개의 직교기저가 있다면 이들 기저의 선형결합으로 N차원 위의 모든 점을 표현할 수 있습니다. 예를 들어 3차원 공간에서, 3개의 직교기저 (1,0,0), (0,1,0), (0,0,1)의 선형결합으로 3차원 위의 모든 점을 표현할 수 있습니다.&lt;/p&gt;

\[(x, y, z) = x(1, 0, 0) + y(0,1,0) + z(0,0,1) \tag{5}\]

&lt;p&gt;이산 푸리에 변환의 행렬 표현을 보면, 선형대수적인 개념을 확인할 수 있습니다.  &amp;lt;수식 2.&amp;gt;와 &amp;lt;수식 4.&amp;gt;에서 k=4까지의 이산 푸리에 변환 행렬은 아래와 같습니다.&lt;/p&gt;

&lt;p&gt;마찬가지로, 푸리에변환도 cosine과 sine로 구성된 직교 주기 함수의 선형결합으로, 신호가 N개로 이뤄진 벡터라면, cosine과 sine로 구성된 N차원의 선형결합으로 분석하고자 하는 신호를 표현한 것입니다. 이산 푸리에 변환을 행렬로 표현하는 과정을 보면 쉽게 이해하실 수 있습니다.&lt;/p&gt;

&lt;p&gt;전체 신호의 길이가 N인 이산 신호 $x_n$ 와 길이가 N인 주파수 성분 $\mathnormal X_k$ 에 대하여, &amp;lt;수식 2.&amp;gt;를 전개해보면 아래와 같습니다.&lt;/p&gt;

\[\mathnormal X_0 = x_0e^{-i\frac{2 \pi 0}{N}0} + x_1e^{-i\frac{2 \pi 0}{N}1} + x_2e^{-i\frac{2 \pi 0}{N}2} + \cdots + x_{N-1}e^{-i\frac{2 \pi 0}{N}(N-1)} \tag{6}\]

\[\mathnormal X_1 = x_0e^{-i\frac{2 \pi 1}{N}0} + x_1e^{-i\frac{2 \pi 1}{N}1} + x_2e^{-i\frac{2 \pi 1}{N}2} + \cdots + x_{N-1}e^{-i\frac{2 \pi 1}{N}(N-1)} \tag{7}\]

&lt;p&gt;$w = e^{-i\frac{2 \pi}{N}}$ 이라 한다면, 아래와 같이 선형 결합의 행렬 형태로 표현할 수 있습니다.&lt;/p&gt;

\[\begin{bmatrix}
   \ X_0 \\ X_1 \\ \vdots \\ X_{N-1}\end{bmatrix} =
   \begin{bmatrix}
    \ 1 &amp;amp; 1 &amp;amp; 1 &amp;amp; \cdots &amp;amp; 1 \\
    \ 1 &amp;amp; w^1 &amp;amp; w^2 &amp;amp;\cdots &amp;amp; w^{N-1} \\
    \ \vdots &amp;amp; \vdots &amp;amp; \vdots &amp;amp; \ddots &amp;amp; \vdots \\
    \ 1 &amp;amp; w^{N-1} &amp;amp; w^{(N-1)2} &amp;amp; \cdots &amp;amp; w^{(N-1)(N-1)}\end{bmatrix} \begin{bmatrix} 
    \ x_0 \\ x_1 \\ \vdots \\ x_{N-1} \\\end{bmatrix} \tag{8}\]

&lt;p&gt;행렬의 선형 결합은 행렬 곱으로서 생각한다면, ‘내적’의 의미로도 해석할 수 있습니다. 내적의 의미는 곱해지는 벡터가 행렬의 열벡터와 얼마만큼 닮았는가를 의미하는데, 특정 주파수의 함량이 높다라는 건 해당 주파수와 이산 신호가 유사함을 높다라는 것을 뜻합니다.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/angeloyeo/angeloyeo.github.io/master/pics/2019-07-14-Freq_Sampling/pic1.png&quot; /&gt;&lt;figcaption align=&quot;center&quot;&gt;그림 6. 주파수 계수의 의미&lt;/figcaption&gt;
&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;이상으로 포스팅을 마치겠습니다.&lt;/p&gt;

&lt;hr /&gt;

&lt;ol&gt;
  &lt;li&gt;푸리에 변환 참고, &lt;a href=&quot;https://ralasun.github.io/deep%20learning/2021/02/15/gcn/&quot;&gt;https://ralasun.github.io/deep%20learning/2021/02/15/gcn/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;선형대수와 푸리에 변환 - 공돌이의 수학노트, &lt;a href=&quot;https://angeloyeo.github.io/2020/11/08/linear_algebra_and_Fourier_transform.html&quot;&gt;https://angeloyeo.github.io/2020/11/08/linear_algebra_and_Fourier_transform.html&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Fourier Transform, &lt;a href=&quot;https://ratsgo.github.io/speechbook/docs/fe/ft&quot;&gt;https://ratsgo.github.io/speechbook/docs/fe/ft&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Discrete Fourier Transform, &lt;a href=&quot;https://en.wikipedia.org/wiki/Discrete_Fourier_transform&quot;&gt;https://en.wikipedia.org/wiki/Discrete_Fourier_transform&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</content><author><name>Seonhwa Lee</name></author><category term="Signal Analysis" /><category term="signal-analysis" /><summary type="html">이산 푸리에 변환에 대해 알아보도록 하겠습니다. Fourier transform 푸리에 변환이란 임의의 입력 신호를 다양한 주파수를 갖는 주기함수들의 합으로 분해하여 표현한 것입니다. 여러 주기함수가 혼합되어 있는 신호를 봤을 땐 신호의 특성을 살피기 어려우나, 푸리에 변환은 아래 그림처럼 혼합된 신호(빨간색)을 여러 종류의 주파수를 갖는 주기함수들(파란색)로 분해할 수 있기 때문에, 신호의 특징을 살펴볼 수 있습니다. 그림 1. 푸리에 변환 그림 2. 푸리에 변환(2) 푸리에 변환의 수학적 의미는 Time Domain(x축 : 시간, y축 : 진폭)을 Frequency Domain으로 변환(x축 : Frequency, y축 : 푸리에 변환 결과에 해당되는 계수)하는 것입니다. 아래는 일반 신호를 푸리에 변환한 결과(Spectogram)를 나타냅니다. Input 신호는 두 개의 주파수가 메인인 신호의 합성파입니다. 이처럼 푸리에 변환을 통해서 raw 데이터에서 볼 수 없는 특징을 찾아낼 수 있습니다. 그림 3. 푸리에 변환 결과 일반적으로 Audio나 EEG 등 signal 데이터는 연속적일 수 없습니다. 왜냐하면, 기계를 통해 신호가 수집(sampling)이 되기 때문에 이산(Discrete)적인 특징을 띄고 있습니다. 예를 들어 256Hz로 샘플링 되는 신호라는 뜻은 1초에 256개 신호 sample을 수집한다는 뜻입니다. 그림 4. 연속신호(continuous signal)와 디지털 신호(discretized signal) 따라서, 이산적인 특징을 다룰 수 있는 이산 푸리에 변환(Discrete Fourier Transform)을 사용합니다. 연속 푸리에 변환과 이산 푸리에 변환식은 아래와 같습니다. \[\hat{f}(\xi) = \int_{\mathbf{R}^d} f(x)e^{2\pi ix\xi} \,dx \tag{1}\] 수식 1. 연속 푸리에 변환 \[\mathnormal{X}_k = \sum_{n=0}^{N-1}x_n\cdot e^{\frac{-2\pi i}{N}kn} \tag{2}\] 수식 2. 이산 푸리에 변환 Concept of Fourier Transform 푸리에 변환은 위에서 언급했듯이 여러 종류의 주파수를 갖는 함수로 분해하는 과정이라 하였습니다. 이 부분에 관한 의미를 2가지 측면으로 살펴보겠습니다. 푸리에 변환의 파동적인 측면에서의 개념(기본적 개념)과 선형대수적 개념입니다. 1. 푸리에 변환의 기본적 개념 푸리에 변환은 위에서 언급했듯이 여러 종류의 주파수를 갖는 함수로 분해하는 과정이라고 하였습니다. 어떤 방식으로 분해하는 걸까요 ? 이를 이해하기 위해선 오일러 공식을 알아야 합니다. 오일러 공식에 따르면, 복소지수함수 $e^{ix}$ 는 코사인과 사인의 합으로 구성됩니다. 오일러 공식을 좌표평면위에 나타나면 &amp;lt;그림 4.&amp;gt;와 같습니다. 이는 반지름이 1인 단위 원 위에 각 $x$ (그림에선 $\omega$) 성분을 가진 점으로 표현됩니다. \[e^{ix} = cost + isinx \tag{3}\] 수식 3. 오일러 공식 그림 4. Euler's Formula 그림 5. 푸리에 변환의 시각적 표현 &amp;lt;수식 1.&amp;gt;와 &amp;lt;수식 2.&amp;gt;를 보면 오일러 공식 부분을 대입해서 다시 쓰면 아래와 같습니다(이산 푸리에 변환에 대해서만 진행). \[\mathnormal{X_k} = \sum_{n=0}^{N-1}x_n \cdot [cos(\frac{2\pi}{N}kn) - isin(\frac{2\pi}{N}kn)] \tag{4}\] 수식 4. 푸리에 변환 &amp;lt;그림 4.&amp;gt;에서 단위 원 위에 있는 점이 일정한 속도로 움직이고, 이를 time domain 위에 그림을 그리면 &amp;lt;그림 5.&amp;gt;의 1번째 그림이 됩니다(1번째 그림이 단위 원이라고 가정한 것입니다). 여기서 속도를 결정하는 것이 바로 주파수에 해당됩니다. 즉 $\frac{2 \pi k}{N}$ 가 크면 클수록 원 위의 점이 빨리 움직이게 됩니다. &amp;lt;그림 5.&amp;gt;에서의 2번째그림에서 4번째 그림으로 갈수록 점의 움직임이 빨라지는 것을 볼 수 있는데, 이는 아래로 갈수록 큰 주파수를 가지는 것을 뜻합니다. 마지막으로 &amp;lt;수식 4.&amp;gt;에서 $x_n$ 은 원의 반지름을 결정하는 요소입니다. 즉, $x_n$ 이 작을수록 작은 크기의 원 위의 점의 움직임에 해당되는 것입니다. &amp;lt;그림 5&amp;gt;에서 4번째 그림에 해당되는 것입니다. 즉 푸리에 변환이란 &amp;lt;그림 5.&amp;gt;의 마지막 그림처럼 여러 크기와 주파수를 가진 복소수 함수의 분해를 뜻하는 것입니다. 마지막 그림에서 그려지는 신호는 결국 1~4번째 단일 신호들의 합으로 표현되는 것과 마찬가지입니다. 푸리에 변환의 결과인 $\mathnormal{X_k}$ 가 뜻하는 건 이산화된 신호 $x_1, \cdots, x_n$ 인 각 지점에서 $\frac{2\pi k}{N}$ 주파수를 가진 주기함수를 얼마만큼 가지고 있느냐를 계산한 후 합한 것입니다. 즉, 전체적으로 해당 주파수를 가진 부분을 신호가 얼마만큼 가지고 있는지에 대한 정도를 하나의 계수로 표현한 것입니다. 따라서 &amp;lt;그림 3.&amp;gt; 에서 y축은 해당 주파수를 가진 주기함수가 이 신호에 얼마만큼 들어있는지에 대한 양을 나타내는 것입니다. 2. 푸리에 변환의 선형대수적 개념 다음으론 푸리에 변환의 선형대수적 개념에 대해 살펴보도록 하겠습니다. 이를 살펴보기 위해선 선형대수 지식이 필요합니다. 선형대수에서 N차원에서 N개의 직교기저가 있다면 이들 기저의 선형결합으로 N차원 위의 모든 점을 표현할 수 있습니다. 예를 들어 3차원 공간에서, 3개의 직교기저 (1,0,0), (0,1,0), (0,0,1)의 선형결합으로 3차원 위의 모든 점을 표현할 수 있습니다. \[(x, y, z) = x(1, 0, 0) + y(0,1,0) + z(0,0,1) \tag{5}\] 이산 푸리에 변환의 행렬 표현을 보면, 선형대수적인 개념을 확인할 수 있습니다. &amp;lt;수식 2.&amp;gt;와 &amp;lt;수식 4.&amp;gt;에서 k=4까지의 이산 푸리에 변환 행렬은 아래와 같습니다. 마찬가지로, 푸리에변환도 cosine과 sine로 구성된 직교 주기 함수의 선형결합으로, 신호가 N개로 이뤄진 벡터라면, cosine과 sine로 구성된 N차원의 선형결합으로 분석하고자 하는 신호를 표현한 것입니다. 이산 푸리에 변환을 행렬로 표현하는 과정을 보면 쉽게 이해하실 수 있습니다. 전체 신호의 길이가 N인 이산 신호 $x_n$ 와 길이가 N인 주파수 성분 $\mathnormal X_k$ 에 대하여, &amp;lt;수식 2.&amp;gt;를 전개해보면 아래와 같습니다. \[\mathnormal X_0 = x_0e^{-i\frac{2 \pi 0}{N}0} + x_1e^{-i\frac{2 \pi 0}{N}1} + x_2e^{-i\frac{2 \pi 0}{N}2} + \cdots + x_{N-1}e^{-i\frac{2 \pi 0}{N}(N-1)} \tag{6}\] \[\mathnormal X_1 = x_0e^{-i\frac{2 \pi 1}{N}0} + x_1e^{-i\frac{2 \pi 1}{N}1} + x_2e^{-i\frac{2 \pi 1}{N}2} + \cdots + x_{N-1}e^{-i\frac{2 \pi 1}{N}(N-1)} \tag{7}\] $w = e^{-i\frac{2 \pi}{N}}$ 이라 한다면, 아래와 같이 선형 결합의 행렬 형태로 표현할 수 있습니다. \[\begin{bmatrix} \ X_0 \\ X_1 \\ \vdots \\ X_{N-1}\end{bmatrix} = \begin{bmatrix} \ 1 &amp;amp; 1 &amp;amp; 1 &amp;amp; \cdots &amp;amp; 1 \\ \ 1 &amp;amp; w^1 &amp;amp; w^2 &amp;amp;\cdots &amp;amp; w^{N-1} \\ \ \vdots &amp;amp; \vdots &amp;amp; \vdots &amp;amp; \ddots &amp;amp; \vdots \\ \ 1 &amp;amp; w^{N-1} &amp;amp; w^{(N-1)2} &amp;amp; \cdots &amp;amp; w^{(N-1)(N-1)}\end{bmatrix} \begin{bmatrix} \ x_0 \\ x_1 \\ \vdots \\ x_{N-1} \\\end{bmatrix} \tag{8}\] 행렬의 선형 결합은 행렬 곱으로서 생각한다면, ‘내적’의 의미로도 해석할 수 있습니다. 내적의 의미는 곱해지는 벡터가 행렬의 열벡터와 얼마만큼 닮았는가를 의미하는데, 특정 주파수의 함량이 높다라는 건 해당 주파수와 이산 신호가 유사함을 높다라는 것을 뜻합니다. 그림 6. 주파수 계수의 의미 이상으로 포스팅을 마치겠습니다. 푸리에 변환 참고, https://ralasun.github.io/deep%20learning/2021/02/15/gcn/ 선형대수와 푸리에 변환 - 공돌이의 수학노트, https://angeloyeo.github.io/2020/11/08/linear_algebra_and_Fourier_transform.html Fourier Transform, https://ratsgo.github.io/speechbook/docs/fe/ft Discrete Fourier Transform, https://en.wikipedia.org/wiki/Discrete_Fourier_transform</summary></entry><entry><title type="html">Graph Convolutional Network에 대하여 - Spectral Graph Convolution(2)(작성 중)</title><link href="http://localhost:4000/deep%20learning/2021/03/06/gcn(2)/" rel="alternate" type="text/html" title="Graph Convolutional Network에 대하여 - Spectral Graph Convolution(2)(작성 중)" /><published>2021-03-06T00:00:00+09:00</published><updated>2021-03-06T00:00:00+09:00</updated><id>http://localhost:4000/deep%20learning/2021/03/06/gcn(2)</id><content type="html" xml:base="http://localhost:4000/deep%20learning/2021/03/06/gcn(2)/">&lt;blockquote&gt;
  &lt;p&gt;아직 작성 중에 있는 포스팅입니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;지난 포스팅 &lt;a href=&quot;https://ralasun.github.io/deep%20learning/2021/02/15/gcn/&quot;&gt;&amp;lt;Graph Convolutional Network에 대하여 - Spectral Graph Convolution&amp;gt;&lt;/a&gt; 에 이어서, Kipf et. al의 Graph convolutional Network에 대해서 살펴보도록 하겠습니다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h1&gt;Spectral Graph Convolutional Network&lt;/h1&gt;

&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;https://imgur.com/hnw3IeK.png&quot; /&gt;&lt;figcaption align=&quot;center&quot;&gt;그림 1. convolution theorem&lt;/figcaption&gt;&lt;/p&gt;

&lt;p&gt;지난 포스팅에서 마지막에 언급한 spectral graph convolution 수식을 다시 살펴보도록 하겠습니다.&lt;/p&gt;

\[\mathbf {x} * G \mathbf {g} = \mathcal F^{-1}(\mathcal {F}(\mathbf {x}) \odot \mathcal {F}(\mathbf {g})) = \mathbf {U}(\mathbf {U^{\intercal}x} \odot \mathbf {U^{\intercal}g}) \tag1\]

\[\mathbf {x} * \mathbf {g}_\theta = \mathbf {U} \mathbf {g}_{\theta} \mathbf {U^{\intercal}x} \tag2\]

&lt;p&gt;수식 (1)에서 어떻게 수식(2)로 표현이 가능할까요 ? graph fourier transform은 Laplacian 행렬의 eigenvector의 선형결합이라고 하였습니다. 이 때, 학습해야 할 filte $\mathbf g$ 가 그림 1에서 time domain에서의 filter가 아니라, &lt;span style=&quot;text-decoration:underline&quot;&gt;(1)이미 frequency 영역에서의 filter $\mathbf g$ 라고 둔다면,&lt;/span&gt; 푸리에 변환된 signal과 단순 곱으로 계산할 수 있기 때문에 학습이 용이해집니다.&lt;/p&gt;

&lt;p&gt;지난 포스팅에서, convolution 연산의 특징 중 하나가 특정 signal이 시스템의 특성이 반영되어 필터링된 signal이 되는 것이라고 하였습니다. 그렇다면 GCN에서 이 filter를 어떻게 구축해야 signal의 특징을 잘 추출하고, filter의 특성도 잘 학습할 수 있을까요 ?&lt;/p&gt;

&lt;p&gt;푸리에 변환된 graph signal은 eigenvector들의 요소로 분해가 된 것입니다.&lt;/p&gt;

&lt;hr /&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;https://arxiv.org/pdf/1312.6203.pdf%20http://arxiv.org/abs/1312.6203&quot;&gt;Bruna, Joan, et al. “Spectral networks and locally connected networks on graphs.” arXiv preprint arXiv:1312.6203 (2013).&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</content><author><name>Seonhwa Lee</name></author><category term="Deep Learning" /><category term="graph-neural-network" /><summary type="html">아직 작성 중에 있는 포스팅입니다. 지난 포스팅 &amp;lt;Graph Convolutional Network에 대하여 - Spectral Graph Convolution&amp;gt; 에 이어서, Kipf et. al의 Graph convolutional Network에 대해서 살펴보도록 하겠습니다. Spectral Graph Convolutional Network 그림 1. convolution theorem 지난 포스팅에서 마지막에 언급한 spectral graph convolution 수식을 다시 살펴보도록 하겠습니다. \[\mathbf {x} * G \mathbf {g} = \mathcal F^{-1}(\mathcal {F}(\mathbf {x}) \odot \mathcal {F}(\mathbf {g})) = \mathbf {U}(\mathbf {U^{\intercal}x} \odot \mathbf {U^{\intercal}g}) \tag1\] \[\mathbf {x} * \mathbf {g}_\theta = \mathbf {U} \mathbf {g}_{\theta} \mathbf {U^{\intercal}x} \tag2\] 수식 (1)에서 어떻게 수식(2)로 표현이 가능할까요 ? graph fourier transform은 Laplacian 행렬의 eigenvector의 선형결합이라고 하였습니다. 이 때, 학습해야 할 filte $\mathbf g$ 가 그림 1에서 time domain에서의 filter가 아니라, (1)이미 frequency 영역에서의 filter $\mathbf g$ 라고 둔다면, 푸리에 변환된 signal과 단순 곱으로 계산할 수 있기 때문에 학습이 용이해집니다. 지난 포스팅에서, convolution 연산의 특징 중 하나가 특정 signal이 시스템의 특성이 반영되어 필터링된 signal이 되는 것이라고 하였습니다. 그렇다면 GCN에서 이 filter를 어떻게 구축해야 signal의 특징을 잘 추출하고, filter의 특성도 잘 학습할 수 있을까요 ? 푸리에 변환된 graph signal은 eigenvector들의 요소로 분해가 된 것입니다. Bruna, Joan, et al. “Spectral networks and locally connected networks on graphs.” arXiv preprint arXiv:1312.6203 (2013).</summary></entry><entry><title type="html">Graph Convolutional Network에 대하여 - Spectral Graph Convolution</title><link href="http://localhost:4000/deep%20learning/2021/02/15/gcn/" rel="alternate" type="text/html" title="Graph Convolutional Network에 대하여 - Spectral Graph Convolution" /><published>2021-02-15T00:00:00+09:00</published><updated>2021-02-15T00:00:00+09:00</updated><id>http://localhost:4000/deep%20learning/2021/02/15/gcn</id><content type="html" xml:base="http://localhost:4000/deep%20learning/2021/02/15/gcn/">&lt;p&gt;지난 GNN 포스팅&amp;lt;&lt;a href=&quot;https://ralasun.github.io/deep%20learning/2021/02/11/gcn/&quot;&gt;Introduction to Graph Neural Network - GNN 소개 및 개념&lt;/a&gt;&amp;gt;에서 graph neural network의 전반적인 개념에 대해 소개하였습니다. 이번 포스팅은 graph neural network가 더욱 유명해진 계기가 된 &lt;a href=&quot;https://arxiv.org/abs/1609.02907&quot;&gt;Kipf. et, al.의 Graph Convolutional Neural Network&lt;/a&gt;에 대해 다루도록 하겠습니다.&lt;/p&gt;

&lt;p&gt;Kipf. et al.의 GCN을 이해하기 위해서는 먼저, spectral graph convolution에서부터 시작해야 합니다. 그러나 :spectral” 이라는 부분이 생소하신 분들이 많을 거라 생각됩니다. 반면에 일반적인 CNN 동작 방식은 많이 알려져 있습니다. 일반적인 CNN 동작은 spatial convolution입니다. 따라서 이를 유사하게 graph에 적용하는 방식을 spatial graph convolution입니다. 따라서, 이번 포스팅에서는 spectral 방식과 spatial 방식을 비교하고, spectral graph convolution에 대해 자세히 설명한 뒤에 Kipf. et al의 Graph Convolutional Network에 대해 다루도록 하겠습니다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h1&gt;Spatial Graph Convolution vs. &lt;br /&gt;Spectral Graph Convolution&lt;/h1&gt;

&lt;p&gt;Graph convolution은 크게 2가지 방법이 있습니다. Spatial graph convolution과 Spectral graph convolution입니다. Spatial graph convolution은 convolution 연산을 graph위에서 직접 수행하는 방식으로, 각 노드와 가깝게 연결된 이웃 노드들에 한해서 convolution 연산을 수행합니다. 즉, 노드와 이웃노드들을 특정 grid form으로 재배열하여 convolution 연산을 수행하는 것입니다. 그러나, 우리가 일반적으로 아는 CNN의 filter는 고정된 사이즈를 가집니다(그림 1.).&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/S5B1k.png&quot; /&gt;&lt;figcaption align=&quot;center&quot;&gt;그림 1. CNN operation with fixed-size filter(3x3)&lt;/figcaption&gt;&lt;/p&gt;

&lt;p&gt;따라서, &lt;b&gt;&lt;i&gt;spatial graph convolution 방식의 관건은 고정된 크기의 이웃 노드를 선택하는 것입니다.&lt;/i&gt;&lt;/b&gt; 뿐만 아니라, CNN의 특징 중 하나는 “local invariance” 입니다. 입력의 위치가 바뀌어도 출력은 동일함을 의미합니다. 즉, 이미지 내의 강아지 위치가 달라도 CNN은 강아지라는 아웃풋을 출력함을 의미합니다.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;https://miro.medium.com/max/1400/1*HUJ3-xs3nUv-wY_GTBVUMg.png&quot; /&gt;&lt;figcaption align=&quot;center&quot;&gt;그림 2. Local invariance&lt;/figcaption&gt;&lt;/p&gt;

&lt;p&gt;따라서, &lt;b&gt;&lt;i&gt;Spatial graph convolution의 또다른 관건은 바로 “local invariance”를 유지를 해야한다는 것입니다.&lt;/i&gt;&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;앞에서 언급한 spatial graph convolution이 다뤄야 할 문제점과 별개로 또다른 문제점이 존재합니다. &lt;b&gt;Spatial graph convolution은 고정된 이웃 노드에서만 정보는 받아서 노드의 정보를 업데이트를 한다는 점입니다.&lt;/b&gt;&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;img width=&quot;300&quot; src=&quot;https://imgur.com/KWmqbgk.png&quot; /&gt;&lt;figcaption align=&quot;center&quot;&gt;그림 3. Select neighborhood of red node&lt;/figcaption&gt;&lt;/p&gt;

&lt;p&gt;그러나, 그래프에서의 한 노드의 정보는 시간에 따라 여러 노드들의 정보의 혼합으로 표현될 수 있습니다. &amp;lt;그림 4.&amp;gt;를 살펴보도록 하겠습니다. 1번노드의 t=0일 때 정보는 [1,-1] 이지만 시간에 따라 여러 노드들의 정보(노드들의 signal)들이 밀려 들어오게 됩니다. 즉, 고정된 이웃노드 말고도 멀리 연결되어 있는 노드의 정보도 시간이 흐르면서 밀려 들어올 수 있는 것입니다. 이를 노드 간 message passing이라 합니다.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;https://imgur.com/Fv2FJbC.png&quot; /&gt;&lt;figcaption align=&quot;center&quot;&gt;그림 4. Message Passing in graph&lt;/figcaption&gt;
&lt;/p&gt;

&lt;p&gt;즉, 한 노드의 정보는 여러 노드의 signal이 혼재해 있는 것으로, 이를 time domain이 아닌 frequency 도메인으로 분석한다면, 한 노드 내에 혼재된 signal들을 여러 signal의 요소로 나눠서 node의 특징을 더 잘 추출할 수 있습니다. 이것에 관한 것이 바로 “Spectral Graph Convolution”입니다. Spectral graph convolution은 spectral 영역에서 convolution을 수행하는 것입니다. 이에 대해 자세히 살펴보도록 하겠습니다.&lt;/p&gt;

&lt;h1&gt;Dive into Spectral Graph Convolution&lt;/h1&gt;

&lt;p&gt;Signal Processing 분야에서 “spectral analysis”라는 것은 이미지/음성/그래프 신호(signal)을 time/spatial domain이 아니라 frequency domain으로 바꿔서 분석을 진행하는 것입니다. 즉, &lt;em&gt;어떤 특정 신호를 단순한 요소의 합으로 분해하는 것&lt;/em&gt;을 의미합니다. 대표적으로 이를 수행할 수 있는 방법이 푸리에 변환(Fourier Transform)입니다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;spectral analysis에서 입력 신호가 전파/음성신호면 time domain을 frequency domain으로 변환하는 것이고, 컴퓨터 비전/그래프/영상처리 분야이면 spatial domain을 frequency domain으로 변환하는 것입니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;푸리에 변환이란, &lt;span style=&quot;text-decoration: underline&quot;&gt;&lt;b&gt;임의의 입력 신호를 다양한 주파수를 갖는 주기함수들의 합으로 분해하여 표현&lt;/b&gt;&lt;/span&gt;하는 것입니다. 아래 그림처럼 빨간색 신호를 파란색의 주기함수들의 성분으로 나누는 작업이 바로 푸리에 변환입니다. 즉, 파란색 주기함수들을 합하면 결국 빨간색 신호가 되는 것입니다.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;https://t1.daumcdn.net/cfile/tistory/9967FA3359B63D8122&quot; /&gt;&lt;figcaption align=&quot;center&quot;&gt;그림 5. 푸리에 변환&lt;/figcaption&gt;&lt;/p&gt;

&lt;p&gt;그렇다면 graph signal에서의 푸리에 변환은 어떤 걸까요 ?&lt;/p&gt;

&lt;p&gt;결론부터 얘기하면, &lt;span style=&quot;text-decoration: underline&quot;&gt;&lt;b&gt;graph signal의 푸리에 변환은 graph의 Laplacian matrix를 eigen-decomposition하는 것&lt;/b&gt;&lt;/span&gt;입니다. 아래에서 수식과 함께 자세히 살펴보도록 하겠습니다.&lt;/p&gt;

&lt;h3&gt;Fourier transform&lt;/h3&gt;

&lt;p&gt;먼저, 푸리에 변환 식에 대해서 살펴봅시다. &lt;span style=&quot;color:gray&quot;&gt;&lt;del&gt;저도 푸리에 변환에 대한 이해가 아직 한없이 부족합니다. 최대한 공부하고 이해한 내용을 풀어볼려고 노력하였습니다.&lt;/del&gt;&lt;/span&gt;&lt;/p&gt;

\[\hat{f}(\xi) = \int_{\mathbf{R}^d} f(x)e^{2\pi ix\xi} \,dx \tag{1}\]

\[f(x) = \int_{\mathbf{R}^d} \hat{f}(\xi) e^{-2\pi ix\xi} \,d\xi \tag{2}\]

&lt;p&gt;(1)은 f의 푸리에 변환이고, (2)는 푸리에 역변환입니다. 푸리에 변환은 위에서 설명드린 것처럼, time domain을 frequency domain으로 변환한 것으로, 다양한 주파수를 갖는 주기함수의 합입니다. 그렇다면, 푸리에 역변환은 frequency domain의 함수를 다시 time domain으로 변환하는 것입니다. 푸리에 변환을 바라보는 관점은 여러가지가 존재하지만 그 중 하나는 ‘내적’입니다.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;&quot;임의의 주파수 $f(x)$ 에 대하여, $\hat{f}(\xi)$ 는 $f(x)$ 와 $e^{-2\pi ix\xi}$ 의 내적&quot;&lt;/p&gt;

&lt;p&gt;‘내적’이 내포하고 있는 의미는 유사도입니다. 즉, “a와 b의 내적은 a와 b가 얼마나 닮았는가”를 뜻합니다. 결국 푸리에 변환은 다시 풀어쓰면 아래와 같은 의미를 가지고 있습니다.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;&quot;임의의 주파수 $f(x)$ 에 대하여, $\hat{f}(\xi)$ 는 $f(x)$ 와 $e^{-2\pi ix\xi}$ 가 얼마나 닮았는가&quot;&lt;/p&gt;

&lt;p&gt;그렇다면, $e^{-2\pi ix\xi}$ 의 의미는 무엇일까요 ? 이를 이해하기 위해선 ‘오일러 공식’이 필요합니다. 오일러 공식은 복소지수함수(complext exponential function)를 삼각함수(trigonometric function)로 표현하는 유명한 식입니다.&lt;/p&gt;

\[e^{ix} = cost + isinx \tag{3}\]

&lt;p&gt;따라서, 오일러 공식에 의해 (1)식의 $e^{2\pi ix\xi}$ 부분을 cos요소와 sin요소의 합으로 표현할 수 있습니다.&lt;/p&gt;

\[e^{2\pi ix\xi} = cos(2\pi x\xi) + i sin(2\pi x\xi) \tag{4}\]

&lt;p&gt;즉, 주어진 주파수 f(x)에 대해 cosine에서 유사한 정도와 sine과 유사한 정도의 합이 푸리에 변환이라고 생각할 수 있습니다.&lt;/p&gt;

&lt;p&gt;이번엔 푸리에 변환의 선형대수(linear algebra)적인 의미를 살펴보도록 하겠습니다. 선형 대수에서, 벡터 $a \in R^d$ 를 d차원의 orthonormal basis를 찾을 수 있다면, 벡터 $a$ 를 orhonormal basis의 선형결합으로 표현할 수 있습니다. 이 orthonormal basis를 찾는 방법 중 하나가 바로 Eigen-value decomposition 입니다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;orthonormal이란 서로 직교하면서 길이가 1인 벡터들을 의미합니다. 또한, 모든 matrix에 대해서 eigen-value decomposition 결과로 찾은 basis가 orthonormal은 아닙니다. 하지만 real-symmetric matrix에 대하여 구한 eigenvector들은 orthgonal한 관계입니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;다시 돌아와서, 푸리에 변환에서 주기함수 요소인 sine과 cosine에 대해 살펴봅시다. 아래와 같이 sine과 sine, sine과 cosine, cosine과 cosine을 내적하면 모두 다 0이 나옵니다. 이는 즉 삼각함수는 직교함을 알 수 있습니다(삼각함수의 직교성).&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;https://imgur.com/Bdo17jG.png&quot; /&gt;&lt;figcaption align=&quot;center&quot;&gt;그림 6. 삼각함수의 직교성&lt;/figcaption&gt;&lt;/p&gt;

&lt;p&gt;그렇다면, 선형대수 관점에서, &lt;span style=&quot;text-decoration: underline&quot;&gt;sine과 cosine 기저들의 선형결합이 즉 푸리에 변환이 되는 것&lt;/span&gt;입니다. 즉, &lt;span style=&quot;text-decoration:underline; color:red&quot;&gt;어떤 특정 graph signal에 관한 행렬이 존재하고 이 행렬이 real-symmetric matrix이며 이들의 eigenvectors를 구할 수 있다면, eigenvector의 선형결합이 graph signal의 푸리에 변환&lt;/span&gt;임을 의미하는 것입니다.&lt;/p&gt;

&lt;h3&gt;Laplacian(Laplace Operator)&lt;/h3&gt;

&lt;p&gt;Graph laplacian을 보기 전에 Laplace Operator에 대해 살펴보도록 하겠습니다. Laplace operator는 differential operator로, 벡터 기울기의 발산(Divergence)을 의미합니다.&lt;/p&gt;

\[\triangle f= \triangledown \cdot \triangledown f = \triangledown^2 f \tag{5}\]

&lt;p&gt;$\triangledown f$ 는 $f$ 의 기울기를 의미하는 것으로 1차함수의 기울기처럼, 한 점에서의 변화하는 정도를 의미합니다. 이를 그림으로 나타나면 아래와 같습니다.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/angeloyeo/angeloyeo.github.io/master/pics/2019-08-28_laplacian/noname01.png&quot; /&gt;&lt;figcaption align=&quot;center&quot;&gt;그림 7. Scalar 함수&lt;/figcaption&gt;&lt;/p&gt;

&lt;p&gt;&amp;lt;그림 7.&amp;gt;의 scalar 함수의 gradient는 아래와 같습니다.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/angeloyeo/angeloyeo.github.io/master/pics/2019-08-28_laplacian/noname03.png&quot; /&gt;&lt;figcaption align=&quot;center&quot;&gt;그림 8. Scalar 함수의 gradient&lt;/figcaption&gt;&lt;/p&gt;

&lt;p&gt;&amp;lt;그림 7.&amp;gt;과 &amp;lt;그림 8.&amp;gt;을 보시면, (x,y)=(0,2) 부근에는 수렴하는 형태의 gradient가 형성되어 있고, (x,y)=(0,-2) 부근에는 발산하는 형태의 gradient가 형성되어 있습니다. Laplace 연산자를 이용해서 이 기울기의 발산 $\triangle f$ 을 구해주면, 아래와 같습니다.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/angeloyeo/angeloyeo.github.io/master/pics/2019-08-28_laplacian/noname04.png&quot; /&gt;&lt;figcaption align=&quot;center&quot;&gt;그림 9. Divergence&lt;/figcaption&gt;&lt;/p&gt;

&lt;p&gt;divergence가 나타내는 의미, 즉, Laplace operator가 나타내는 의미는 무엇일까요 ? 이 함수의 높고 낮음을 표시하는 것입니다. 고등학교 때, 배운 2차 편미분과 비슷합니다. 이차 편미분 값이 양수면 아래로 볼록이고, 이차 편미분 값이 음수면 위로 볼록인 것과 유사합니다. 즉, 노란 부분일수록 양수 이기때문에 위로볼록인 모양이고, 파란부분일수록 음수값이기 때문에 아래로 볼록입니다.&lt;/p&gt;

&lt;p&gt;그렇다면, graph signal 영역에서 Laplace operator가 갖는 의미가 무엇일까요 ? graph signal 영역에서 Laplace operator를 적용한다는 건, 한 노드에서의 signal의 흩어짐 정도, 즉, 흐르는 정도를 알 수 있습니다. &lt;span styple=&quot;text-decoration:underline; color:red&quot;&gt;특정 노드에서 signal이 들어왔을 때 그 signal이 특정 노드와 연결된 노드들로 각각 얼마만큼 빠르게 흩어지는지를 알 수 있고 이는 즉 그 노드의 특징이 될 수 있는 것입니다.&lt;/span&gt; 위의 그림을 예를 들어서 설명한다면, 만약에 한 signal이 그림 7.의 가장 높은 부분(노란색 부분)에서 시작된다면 가장 낮은 부분(파란색 부분)까지 빠른 속도로 흘러갈 것입니다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;빨간색으로 강조한 부분이 왜 laplacian matrix의 eigen-value decomposition이 fourier transform과 연결되는지에 관한 부분입니다. 포스팅을 쭉 끝까지 읽어보시면 아하! 하면서 이해가 되실겁니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;아래는 이와 관련된 gif이미지입니다. Grid 격자를 어떤 graph라고 생각한다면, 어떤 노드에서 signal이 들어왔을 때 흩어지는 양상을 보실 수 있습니다. 이 흩어지는 양상을 자세히 알기 위해서는 laplcian operator를 이용하여 계산하면 됩니다.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;https://miro.medium.com/max/1120/1*gz2hyrcSSJG9MtDzmQLe3w.gif&quot; /&gt;&lt;figcaption align=&quot;center&quot;&gt;그림 9. Diffusion of some signal in a regular grid graph based on the graph Laplacian&lt;/figcaption&gt;&lt;/p&gt;

&lt;h3&gt;Graph Laplacian&lt;/h3&gt;

&lt;p&gt;그러나, 이제까지 설명한 laplacian operator는 지난 포스팅에서 언급한 Laplacian matrix랑 무슨 관련이 있는 걸까요? 이름이 비슷한 걸 보니, laplacian matrix도 어떤 differential operator, 즉 ‘변화’에 관한 행렬임을 짐작할 수 있습니다.&lt;/p&gt;

\[\triangle f = \triangledown^2 f =\sum_{i=1}^{n}\frac{\partial^2 f}{\partial {x_i}^2} \tag{6}\]

&lt;p&gt;1차원에서의 laplacian operator는 &lt;a href=&quot;https://en.wikipedia.org/wiki/Second_derivative&quot;&gt;이차도함수 극한 정의&lt;/a&gt;와 동일합니다.&lt;/p&gt;

\[\triangledown^2 f = \lim_{h \rightarrow 0} \frac{f(x+h) - 2f(x) - f(x-h)}{h^2} \tag{7}\]

&lt;p&gt;그렇다면 위 laplacian operator가 graph 상에서 적용되면 어떻게 될까요 ? 위 식 (7)은 아래 그림과 같이 표현될 수 있습니다. 즉, x노드의 signal f(x)와 x노드와 h사이 만큼 떨어진 이웃노드의 signal f(x+h), f(x-h) 와의 변화량을 통해 x노드의 signal 특징을 구한 것입니다.이것이 바로 x노드 signal에 laplacian operator를 적용한 거라고 생각될 수 있습니다. 따라서, 한 노드 의 특징은 해당 노드와 연결된 이웃노드와의 관계라는 관점에서 표현될 수 있고, 즉 이 표현을 위해 이웃 노드와의 차이(즉, 변화)를 이용한 것이 laplacian operator가 됩니다.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;&lt;img width=&quot;400&quot; src=&quot;https://imgur.com/BYvjBKt.png&quot; /&gt;&lt;figcaption align=&quot;center&quot;&gt;그림 10. discretized laplacian operator&lt;/figcaption&gt;&lt;/p&gt;

&lt;p&gt;또한 graph laplacian은 연속적인 성질(continuous)이 아닌 이산적인 성질(discrete)을 띕니다. 이제까지 언급한 특징을 정리되면 아래의 graph laplacian 식이 이해가 되실 것입니다. 아래는 $v_i$ 노드에서 graph laplacian operator를 적용한 것입니다.&lt;/p&gt;

\[\triangle f(v_i) = Lf|_{v_i} = \sum_{v_j ~ v_i}[f(v_i) - f(v_j)] \tag{8}\]

&lt;p&gt;weighted undirected graph인 경우, weighted undirected graph는 노드간 엣지에 가중치가 있는 경우입니다. graph laplacian operator는 아래와 같습니다.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;&lt;img width=&quot;400&quot; src=&quot;https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcSRUOW9mJ2mNgmHDw7_q7uiK2m1slCZgiah1Q&amp;amp;usqp=CAU.png&quot; /&gt;&lt;figcaption align=&quot;center&quot;&gt;그림 11. weighted undirected graph&lt;/figcaption&gt;&lt;/p&gt;

\[\triangle f(v_i) = \sum_{j \in N_i}W_{ij}[f(v_i) - f(v_j)] \tag{9}\]

&lt;p&gt;여기서 $v_i$ 는 특정노드를 가르키는 인덱스이고, $f(v_i)$ 는 각 노드의 signal 입니다. 즉, 함수 $f \in R^N$ 는 각 노드의 특성을 signal로 맵핑해주는 함수라고 생각하시면 됩니다.&lt;/p&gt;

&lt;p&gt;Graph laplacian 예를 들어봅시다. 아래와 같은 간단한 graph가 있을 때, 각 노드에 대한 laplacian operator는 아래와 같습니다.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;&lt;img width=&quot;400&quot; src=&quot;https://imgur.com/DYfJGS9.png&quot; /&gt;&lt;figcaption align=&quot;center&quot;&gt;그림 12. Graph laplacian example&lt;/figcaption&gt;&lt;/p&gt;

\[\triangle f(v_1) = 2f(v_1) - f(v_2) - f(v_3)\]

\[\triangle f(v_2) = 3f(v_2) - f(v_1) - f(v_3) - f(v_4)\]

\[\triangle f(v_3) = 2f(v_3) - f(v_1) - f(v_2)\]

\[\triangle f(v_4) = f(v_4) - f(v_2)\]

&lt;p&gt;이를 행렬로 표현하면 아래와 같습니다.&lt;/p&gt;

\[M = \begin{bmatrix}
       2 &amp;amp; -1 &amp;amp; -1 &amp;amp; 0 \\
       -1 &amp;amp; 3 &amp;amp; -1 &amp;amp; -1 \\
       0 &amp;amp; -1 &amp;amp; 0 &amp;amp; 1\end{bmatrix} 
       \begin{bmatrix} f(v_1) \\ f(v_2) \\ f(v_3) \\ f(v_4)\end{bmatrix} \tag{10}\]

&lt;p&gt;위 식 (10) 의 앞부분 행렬은 지난 GNN 포스팅&amp;lt;&lt;a href=&quot;https://ralasun.github.io/deep%20learning/2021/02/11/gcn/&quot;&gt;Introduction to Graph Neural Network - GNN 소개 및 개념&lt;/a&gt;&amp;gt; 에서 소개한 Laplacian matrix 입니다. 즉, &lt;span style=&quot;text-decoration:underline&quot;&gt;laplacian matrix란 graph representation 중에서 이웃 노드와의 변화 흐름을 통해 노드의 특징을 나타내는 그래프 표현이라고 생각할 수 있습니다.&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;이웃 노드와의 차이(변화, variation)는 결국 노드 간의 매끄러움 정도(smoothness)를 의미합니다. 한 노드가 이웃 노드와의 차이가 작다는 건 그 노드는 이웃 노드와 특성이 비슷한 경우이고, 이를 ‘매끄럽다’라고 생각할 수 있습니다. 반면에, 이웃 노드와의 차이가 크다는 건 그 노드는 이웃 노드와 특성이 상이하다는 것이고 이는 ‘매끄럽지 않다’라고 생각할 수 있습니다. 따라서 Laplacian Matrix는 graph의 smoothness와 관련이 있습니다.&lt;/p&gt;

&lt;p&gt;이를 ‘신호’라는 관점에서 다시 생각해봅시다. 어떤 한 노드 내에서 흐르는 신호는 크게 2가지로 나눈다면, 나와 비슷한 특성을 가진 이웃노드에서 들어오는 신호와 나와 상이한 특성을 가진 이웃노드에서 들어오는 신호로 나눌 수 있습니다. 즉, &lt;span style=&quot;text-decoration:underline; color:red&quot;&gt;한 노드 내에 혼잡해 있는 신호는 나와 유사한 특성을 가진 노드에서 오는 신호와 나와 상이한 특성을 가진 노드에서 오는 신호의 결합으로 생각할 수 있습니다.&lt;/span&gt; 이는 결국 푸리에 변환과 관련된 개념입니다. 그리고 나와 유사한 속성의 노드와 상이한 속성의 노드를 나눌 수 있는 것에 관한 정보가 바로 Laplacian matrix에 담겨져 있는 것입니다. 따라서, &lt;span style=&quot;text-decoration:underline; color:red&quot;&gt;lapalcian matrix를 이용한 푸리에 변환이 바로 “Graph Fourier Transform” 이며, 이는 위에서 언급한 “eigen-value decomposition”과 관련이 있는 것입니다.&lt;/span&gt;&lt;/p&gt;

&lt;h3&gt;Graph Fourier Transform&lt;/h3&gt;

&lt;p&gt;그렇다면, graph fourier transform이 왜 Laplacian matrix를 eigen-decomposition을 하는지에 대한 궁금증이 여기서 생깁니다. 이 부분을 이제 짚고 넘어가겠습니다. 이 부분까지 이해가 되신다면, 이 이후에 진행할 spectral graph convolution을 제대로 이해하실 수 있으실 것입니다.&lt;/p&gt;

&lt;p&gt;위에서 특정 노드와 유사한 노드 집단과 상이한 노드집단을 나눌 수 있다면 특정 노드에 혼잡해 있는 신호를 여러 특성의 신호로 분해할 수 있다고 하였습니다. 그렇다면 먼저 이 집단을 구별할까요 ? 아래 식을 살펴봅시다. 아래 식은 결국, 노드 간의 차이의 합입니다.&lt;/p&gt;

\[S = \sum_{(i,j) \in \epsilon}W_{ij}[f(i) - f(j)]^2 = \mathbf {f^{\intercal}Lf} \tag{11}\]

&lt;p&gt;이는 결국 graph의 smoothness와 관련된 것이며, Laplacian quadratic form으로 표현가능합니다. 위의 식을 최소화하게 하는 $\mathbf f$ 를 찾는다면, 특정 노드와 특성이 유사한 노드 집단과 상이한 노드 집단을 구분할 수 있습니다.&lt;/p&gt;

\[min_{f \in R^N, \,||f||_2 = 1} \mathbf {f^{\intercal}Lf} \tag{12}\]

&lt;p&gt;Lagrange 방정식에 의해 최적화 방정식으로 바꿀 수 있습니다.&lt;/p&gt;

\[L = \mathbf {f^{\intercal}Lf} - \lambda(\mathbf {f^{\intercal}f} - 1) \tag{13}\]

&lt;p&gt;위 식을 최소가 되게 하기 위한 $\mathbf f$ 를 찾기 위해 $\mathbf f$ 로 미분하면 아래와 같습니다.&lt;/p&gt;

\[\frac{\partial L}{\partial f} = 2\mathbf {Lf} - 2\lambda \mathbf f = 0 \tag{14}\]

&lt;p&gt;따라서, 최소가 되는 $\mathbf f$ 는 아래 식을 만족해야 합니다.&lt;/p&gt;

\[\mathbf {Lf} = \lambda \mathbf f \tag{15}\]

&lt;p&gt;위의 식은 laplacian 행렬의 eigen-value decomposition입니다. laplacian matrix의 eigenvector eigen vector들이 특정 노드와 유사한 노드집단과 상이한 노드집단을 구분하는 기준이 되고, 특히 작은 값의 eigenvalue의 대응하는 eigenvector일수록 graph를 더욱 smooth하게 나누는 기준이 됩니다.&lt;/p&gt;

&lt;p&gt;laplacian matrix의 eigenvector의 예를 들어봅시다. 아래 그림은 사람의 behavior를 graph으로 표현했을 때, 해당 graph의 laplacian 행렬의 eigenvector $u_2, u_3, u_4, u_8, \,\,, (0 &amp;lt; \lambda_2 \leq \lambda_3 \leq \lambda_4 \leq \lambda_8)$ 에 graph 노드를 임베딩한 것입니다. 즉, 그래프 노드 $f(v_i)$ 라면, $u^{\intercal}f(v_i)$ 를 계산한 겁니다.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;&lt;img width=&quot;400&quot; src=&quot;https://imgur.com/JWVlsGQ.png&quot; /&gt;&lt;figcaption align=&quot;center&quot;&gt;그림 12. Projection on eigenvector of Laplacian Matrix with each graph node&lt;/figcaption&gt;&lt;/p&gt;

&lt;p&gt;사람의 행동을 graph로 표현했을 때, 위의 그림처럼 가까이에 있는 부분끼리 이웃노드에 해당될 가능성이 높습니다. 머리 쪽과 팔쪽은 가까우니깐 이웃노드일 가능성이 높고, 머리와 다리 쪽은 상이한 노드일 가능성이 높습니다. 따라서, eigenvalue가 가장 작은 eigenvector $u_2$ 에 임베딩했을 때, 해당 graph의 노드들을 이웃노드 집단과 상이한 노드 집단으로 잘 분리되는 것을 보실 수 있습니다.&lt;/p&gt;

&lt;p&gt;이를 다시 돌아와서 fourier transform 관점에서 해석해봅시다. &lt;span style=&quot;text-decoration:underline; color:red&quot;&gt;graph의 특정 노드 signal을 $f(v_i)$ 를 작은 값의 eigenvalue에 대응되는 eigenvector에 사영시키면, 혼재되어 있는 signal 중 가까운 이웃노드에서 들어오는 signal의 성분을 추출한 것으로 볼 수 있고, 큰 값의 eigenvalue에 대응되는 eigenvector에 사영시키면, 혼재되어 있는 signal 중 멀리 있는 상이한 노드에서 들어오는 signal의 성분을 추출한 것입니다.&lt;/span&gt; 따라서, 혼재되어 있는 graph signal을 eigenvector의 선형결합으로 표현하여, 여러 집단(가장 유사한 집단 &amp;lt; … &amp;lt; 매우 상이한 집단)에서 들어오는 signal의 합으로 표현할 수 있습니다.&lt;/p&gt;

&lt;p&gt;또한 위에서, fourier transform은  혼합 signal을 sine과 cosine의 주파수의 성분으로 쪼개어 이 성분들의 선형결합이라고 하였습니다. 그리고, 이 때 주파수의 성분은 삼각함수의 직교성으로 인해, 직교기저를 이룬다고 하였습니다. 마찬가지로, laplacian matrix은 real-symmetric 행렬이어서 eigenvector들이 직교기저를 이룹니다. 즉, graph signal을 laplacian eigenvector 행렬에 사영시키면, graph signal을 laplacian의 직교 기저들의 성분으로 분해하여 이를 합한 선형결합에 해당됩니다.&lt;/p&gt;

&lt;p&gt;이제까지 설명한 것을 토대로 Graph Fourier Transform은 바로 Laplacian 행렬의 Eigen-value decomposition과 관련이 있게 되는 것입니다. 수식으로도 왜 그렇게 되는지 알 수 있는데, 이는 다음과 같습니다.&lt;/p&gt;

&lt;p&gt;Fourier transform의 식을 다시 쓰면 아래와 같습니다.&lt;/p&gt;

\[\hat{f}(\xi) = &amp;lt;f, e^{2\pi ix\xi}&amp;gt;\int_{\mathbf{R}^d} f(x)e^{2\pi ix\xi} \,dx \tag{16}\]

&lt;p&gt;주파수 성분은 $e^{2\pi ix\xi}$ 이며, 여기에 laplace operator를 적용하면 아래와 같습니다.&lt;/p&gt;

\[Lf = -\triangle(e^{2\pi ix\xi}) = -\frac{\partial^2}{\partial x^2}e^{2\pi ix\xi} = (2\pi \xi)^2 e^{2\pi ix\xi} = \lambda f \tag{17}\]

&lt;p&gt;즉, 주파수 성분 $e^{2\pi ix\xi}$ 도 laplace operator의 eigen-function라고 볼 수 있습니다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;1차원 같은 경우, eigen-function이라 한 이유는 eigen-vector는 2차원 이상일 때의 eigen-function이라고 볼 수 있기 때문입니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;이제까지는 왜 Graph Fourier Transform이 Laplacian 행렬이 eigen-value decomposition과 관련 있는지 개념적인 이유와 수식적인 이유에 대해서 살펴봤습니다. 그러면 마지막으로, Graph Fourier Transform의 수식을 정리해보도록 하겠습니다.&lt;/p&gt;

&lt;p&gt;Laplacian 행렬의 eigen-value decomposition은 아래와 같습니다.&lt;/p&gt;

\[\mathbf {L} = \mathbf {U^{\intercal}\Lambda U} \tag{18}\]

&lt;p&gt;이를 이용한 graph fourier transform과 inverse graph fourier transform은 아래와 같습니다.&lt;/p&gt;

\[\mathcal {F}(\mathbf x) = \mathbf {U^{\intercal}x} \tag{19}\]

\[\mathcal {F^{-1}}(\hat {\mathbf {x}}) = \mathbf {U} \hat {\mathbf {x}} \tag{20}\]

&lt;blockquote&gt;
  &lt;p&gt;inverse fourier transform은 frequency domain으로 변환된 signal을 다시 time domain으로 변환하는 것입니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;Spectral Graph Convolution&lt;/h3&gt;

&lt;p&gt;드디어 Spectral Graph Convolution 입니다. 꽤 많이 돌아왔으나, Spectral Graph Convolution을 이해하기 위해서 필요한 Fourier Transform, Graph Laplacian, Graph Fourier Transform을 살펴봤습니다. 그렇다면 이제까지 배운 개념을 가지고 Spectral Graph Convolution이 어떻게 작동하는지 알아보겠습니다.&lt;/p&gt;

&lt;h5&gt;convolution theorem&lt;/h5&gt;

&lt;p&gt;입력과 출력이 있는 시스템에서, 출력 값은 현재의 입력에만 영향을 받는 것이 아니라 이전의 입력값에도 영향을 받습니다. &lt;span style=&quot;text-decoration:underline&quot;&gt;따라서 이전의 값까지의 영향을 고려하여 시스템의 출력을 계산하기 위한 연산이 convolution입니다.&lt;/span&gt; 어떤 시스템에 입력신호가 들어가서 출력신호가 있다고 했을 때, 출력신호는 입력신호와 시스템함수의 convolution 연산을 통해서 나오는 것입니다.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;&lt;img width=&quot;400&quot; src=&quot;https://imgur.com/dk7otIh.png&quot; /&gt;&lt;figcaption align=&quot;center&quot;&gt;그림 13. convolution&lt;/figcaption&gt;&lt;/p&gt;

\[(f*g)(t) = \int_{-\infty}^{\infty}f(\tau)g(t-\tau)d\tau \tag{21}\]

&lt;p&gt;convolution의 특징은 &lt;span style=&quot;text-decoration:underline&quot;&gt;시스템의 출력으로 ‘시스템의 특성’을 알 수 있다는 점입니다.&lt;/span&gt; &amp;lt;그림 13.&amp;gt;에서 시스템의 특성이 담긴 시스템 함수가 위와 같은 모양이라면, 출력도 시스템 함수와 유사한 모양으로 나옵니다.&lt;/p&gt;

&lt;p&gt;&amp;lt;그림 14&amp;gt;와 같은 모양을 가진 시스템 함수라면, 출력도 시스템 함수와 유사한 모양이 나옵니다.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;&lt;img width=&quot;400&quot; src=&quot;https://t1.daumcdn.net/cfile/tistory/11297E0F4CFB6C3721&quot; /&gt;&lt;figcaption align=&quot;center&quot;&gt;그림 14. convolution(2)&lt;/figcaption&gt;&lt;/p&gt;

&lt;p&gt;이 개념을 적용한 것이 CNN에서의 filter에 해당되는 것입니다. 이미지 영역내에서의 convolution은 filter라는 시스템에 이미지라는 신호를 입력하여 filter에 해당되는 특징을 출력해 내는 것입니다.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;&lt;img width=&quot;400&quot; src=&quot;https://imgur.com/wvuTh7M.png&quot; /&gt;&lt;figcaption align=&quot;center&quot;&gt;그림 15. 이미지와 특정 filter의 convolution 연산 수행 후&lt;/figcaption&gt;&lt;/p&gt;

&lt;p&gt;convolution의 기본 개념에 대해서 대략적으로 살펴봤습니다. graph convolution은 그렇다면 우리는 어떤 graph의 특징을 추출해 낼 수 있는 filter를 학습으로 얻고 싶은 것입니다.&lt;/p&gt;

&lt;p&gt;convolution theorem은 그럼 어떤 것일까요 ? ‘time 영역에서의 signal과 시스템 함수와의 convolution 연산은 각각 frequency 영역으로 변환한 뒤의 곱과 같다’가 바로 convolution theorem 입니다. ‘time 영역에서의 signal과 시스템 함수와의 convolution 연산은 각각 frequency 영역으로 변환한 뒤의 곱과 같다’가 바로 convolution theorem 입니다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;convolution in spatial/time domain is equivalent to multiplication in Fourier domain&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;https://imgur.com/hnw3IeK.png&quot; /&gt;&lt;figcaption align=&quot;center&quot;&gt;그림 16. convolution theorem&lt;/figcaption&gt;&lt;/p&gt;

&lt;p&gt;frequency 영역에서의 convolution은 단순 곱으로 계산될 수 있기 때문에 훨씬 편리합니다. 마찬가지로 graph 영역에서도 graph signal을 fourier transform으로 frequency 도메인으로 바꿔서 계산하면 마찬가지로 편리해집니다. 또한 노드와 가까이 있는 이웃노드에서부터 멀리 떨어져 있는 노드에서 오는 신호까지 모두 고려하여 graph signal의 특징을 추출할 수 있게 되는 것입니다. 이것이 바로 ‘spectral graph convolution’ 입니다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;멀리 떨어져 있는 노드에서 오는 신호까지 고려한다는 것이 사실 ‘convolution’ 입니다. convolution은 현재 출력 값은 현재 입력값 뿐만 아니라 이전 입력값에도 영향을 받는다는 것을 고려한 연산입니다. 즉, 멀리 떨어져 있는 노드에서 오는 신호는 비교적 최근에 온 신호가 될 것이고, 이웃노드에서 온 신호가 비교적 이전 시간에서 이미 영향을 준 신호입니다. 그러나 이를 모든 시간에 대해 분해에서 연산하기가 어렵기 때문에(시간 영역에서의 convolution 연산이 어렵기 때문에) frequency 영역으로 바꿔서 간편하게 계산을 하는 것입니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;따라서, spectral graph convolution 식은 아래와 같습니다. 이 식에서 학습할 filter는 $\mathbf g$ 입니다.&lt;/p&gt;

\[\mathbf {x} * G \mathbf {g} = \mathcal F^{-1}(\mathcal {F}(\mathbf {x}) \odot \mathcal {F}(\mathbf {g})) = \mathbf {U}(\mathbf {U^{\intercal}x} \odot \mathbf {U^{\intercal}g})\]

&lt;p&gt;$\mathbf {g}_\theta = diag(\mathbf {U^{\intercal}g})$ 라 가정한다면(학습할 filter가 대각요소만 있다고 가정한다면), 위의 식은 아래와 같이 됩니다.&lt;/p&gt;

\[\mathbf {x} * \mathbf {g}_\theta = \mathbf {U} \mathbf {g}_{\theta} \mathbf {U^{\intercal}x}\]

&lt;hr /&gt;

&lt;p&gt;이번 포스팅은 spectral graph convolution 연산을 이해하기 위해서 fourier transform, laplacian operator 와 graph fourier transform을 살펴보고, 마지막으로 spectral graph convolution을 설명하였습니다. &lt;a href=&quot;https://ralasun.github.io/deep%20learning/2021/03/06/gcn(2)/&quot;&gt;다음 포스팅&lt;/a&gt;에서 이어서 spectral-based CNN에 대해서 살펴보도록 하겠습니다.&lt;/p&gt;

&lt;p&gt;spectral-based CNN을 깊게 이해하기 위해 리서치를 하고 이해한 내용을 최대한 정리하였으나 전공 분야가 아니라 부족한 부분이 많을 거라고 예상됩니다. 혹시나 내용이 틀렸거나 문의가 있으시면 메일이나 댓글 달아주세요!&lt;/p&gt;

&lt;hr /&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;https://arxiv.org/abs/1609.02907&quot;&gt;Kipf, Thomas N., and Max Welling. “Semi-supervised classification with graph convolutional networks.” arXiv preprint arXiv:1609.02907 (2016).&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://arxiv.org/abs/1812.08434&quot;&gt;Zhou, Jie, et al. “Graph neural networks: A review of methods and applications.” arXiv preprint arXiv:1812.08434 (2018).&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://dsba.korea.ac.kr/seminar/?mod=document&amp;amp;pageid=1&amp;amp;keyword=spectral&amp;amp;uid=1330&quot;&gt;DSBA 연구실 세미나 자료, [Paper Review] MultiSAGE - Spatial GCN with Contextual Embedding&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;푸리에 변환 참고 페이지
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://darkpgmr.tistory.com/171&quot;&gt;https://darkpgmr.tistory.com/171&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://www.math.ucla.edu/~tao/preprints/fourier.pdf&quot;&gt;https://www.math.ucla.edu/~tao/preprints/fourier.pdf&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://angeloyeo.github.io/2019/10/11/Fourier_Phase.html&quot;&gt;https://angeloyeo.github.io/2019/10/11/Fourier_Phase.html&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Laplacian Operator
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://angeloyeo.github.io/2019/08/25/laplacian.html&quot;&gt;https://angeloyeo.github.io/2019/08/28/laplacian.html&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://towardsdatascience.com/spectral-graph-convolution-explained-and-implemented-step-by-step-2e495b57f801&quot;&gt;https://towardsdatascience.com/spectral-graph-convolution-explained-and-implemented-step-by-step-2e495b57f801&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Second_derivative&quot;&gt;https://en.wikipedia.org/wiki/Second_derivative&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Graph Fourier Transform
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://arxiv.org/pdf/1211.0053&quot;&gt;Shuman, David I., et al. “The emerging field of signal processing on graphs: Extending high-dimensional data analysis to networks and other irregular domains.” IEEE signal processing magazine 30.3 (2013): 83-98.&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;spectral graph convolution
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://trip2ee.tistory.com/101&quot;&gt;https://trip2ee.tistory.com/101&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://m.blog.naver.com/PostView.nhn?blogId=namunny&amp;amp;logNo=110183516999&amp;amp;proxyReferer=https:%2F%2Fwww.google.com%2F&quot;&gt;https://m.blog.naver.com/PostView.nhn?blogId=namunny&amp;amp;logNo=110183516999&amp;amp;proxyReferer=https:%2F%2Fwww.google.com%2F&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://arxiv.org/pdf/1312.6203.pdf%20http://arxiv.org/abs/1312.6203&quot;&gt;Bruna, Joan, et al. “Spectral networks and locally connected networks on graphs.” arXiv preprint arXiv:1312.6203 (2013).&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;</content><author><name>Seonhwa Lee</name></author><category term="Deep Learning" /><category term="graph-neural-network" /><summary type="html">지난 GNN 포스팅&amp;lt;Introduction to Graph Neural Network - GNN 소개 및 개념&amp;gt;에서 graph neural network의 전반적인 개념에 대해 소개하였습니다. 이번 포스팅은 graph neural network가 더욱 유명해진 계기가 된 Kipf. et, al.의 Graph Convolutional Neural Network에 대해 다루도록 하겠습니다. Kipf. et al.의 GCN을 이해하기 위해서는 먼저, spectral graph convolution에서부터 시작해야 합니다. 그러나 :spectral” 이라는 부분이 생소하신 분들이 많을 거라 생각됩니다. 반면에 일반적인 CNN 동작 방식은 많이 알려져 있습니다. 일반적인 CNN 동작은 spatial convolution입니다. 따라서 이를 유사하게 graph에 적용하는 방식을 spatial graph convolution입니다. 따라서, 이번 포스팅에서는 spectral 방식과 spatial 방식을 비교하고, spectral graph convolution에 대해 자세히 설명한 뒤에 Kipf. et al의 Graph Convolutional Network에 대해 다루도록 하겠습니다. Spatial Graph Convolution vs. Spectral Graph Convolution Graph convolution은 크게 2가지 방법이 있습니다. Spatial graph convolution과 Spectral graph convolution입니다. Spatial graph convolution은 convolution 연산을 graph위에서 직접 수행하는 방식으로, 각 노드와 가깝게 연결된 이웃 노드들에 한해서 convolution 연산을 수행합니다. 즉, 노드와 이웃노드들을 특정 grid form으로 재배열하여 convolution 연산을 수행하는 것입니다. 그러나, 우리가 일반적으로 아는 CNN의 filter는 고정된 사이즈를 가집니다(그림 1.). 그림 1. CNN operation with fixed-size filter(3x3) 따라서, spatial graph convolution 방식의 관건은 고정된 크기의 이웃 노드를 선택하는 것입니다. 뿐만 아니라, CNN의 특징 중 하나는 “local invariance” 입니다. 입력의 위치가 바뀌어도 출력은 동일함을 의미합니다. 즉, 이미지 내의 강아지 위치가 달라도 CNN은 강아지라는 아웃풋을 출력함을 의미합니다. 그림 2. Local invariance 따라서, Spatial graph convolution의 또다른 관건은 바로 “local invariance”를 유지를 해야한다는 것입니다. 앞에서 언급한 spatial graph convolution이 다뤄야 할 문제점과 별개로 또다른 문제점이 존재합니다. Spatial graph convolution은 고정된 이웃 노드에서만 정보는 받아서 노드의 정보를 업데이트를 한다는 점입니다. 그림 3. Select neighborhood of red node 그러나, 그래프에서의 한 노드의 정보는 시간에 따라 여러 노드들의 정보의 혼합으로 표현될 수 있습니다. &amp;lt;그림 4.&amp;gt;를 살펴보도록 하겠습니다. 1번노드의 t=0일 때 정보는 [1,-1] 이지만 시간에 따라 여러 노드들의 정보(노드들의 signal)들이 밀려 들어오게 됩니다. 즉, 고정된 이웃노드 말고도 멀리 연결되어 있는 노드의 정보도 시간이 흐르면서 밀려 들어올 수 있는 것입니다. 이를 노드 간 message passing이라 합니다. 그림 4. Message Passing in graph 즉, 한 노드의 정보는 여러 노드의 signal이 혼재해 있는 것으로, 이를 time domain이 아닌 frequency 도메인으로 분석한다면, 한 노드 내에 혼재된 signal들을 여러 signal의 요소로 나눠서 node의 특징을 더 잘 추출할 수 있습니다. 이것에 관한 것이 바로 “Spectral Graph Convolution”입니다. Spectral graph convolution은 spectral 영역에서 convolution을 수행하는 것입니다. 이에 대해 자세히 살펴보도록 하겠습니다. Dive into Spectral Graph Convolution Signal Processing 분야에서 “spectral analysis”라는 것은 이미지/음성/그래프 신호(signal)을 time/spatial domain이 아니라 frequency domain으로 바꿔서 분석을 진행하는 것입니다. 즉, 어떤 특정 신호를 단순한 요소의 합으로 분해하는 것을 의미합니다. 대표적으로 이를 수행할 수 있는 방법이 푸리에 변환(Fourier Transform)입니다. spectral analysis에서 입력 신호가 전파/음성신호면 time domain을 frequency domain으로 변환하는 것이고, 컴퓨터 비전/그래프/영상처리 분야이면 spatial domain을 frequency domain으로 변환하는 것입니다. 푸리에 변환이란, 임의의 입력 신호를 다양한 주파수를 갖는 주기함수들의 합으로 분해하여 표현하는 것입니다. 아래 그림처럼 빨간색 신호를 파란색의 주기함수들의 성분으로 나누는 작업이 바로 푸리에 변환입니다. 즉, 파란색 주기함수들을 합하면 결국 빨간색 신호가 되는 것입니다. 그림 5. 푸리에 변환 그렇다면 graph signal에서의 푸리에 변환은 어떤 걸까요 ? 결론부터 얘기하면, graph signal의 푸리에 변환은 graph의 Laplacian matrix를 eigen-decomposition하는 것입니다. 아래에서 수식과 함께 자세히 살펴보도록 하겠습니다. Fourier transform 먼저, 푸리에 변환 식에 대해서 살펴봅시다. 저도 푸리에 변환에 대한 이해가 아직 한없이 부족합니다. 최대한 공부하고 이해한 내용을 풀어볼려고 노력하였습니다. \[\hat{f}(\xi) = \int_{\mathbf{R}^d} f(x)e^{2\pi ix\xi} \,dx \tag{1}\] \[f(x) = \int_{\mathbf{R}^d} \hat{f}(\xi) e^{-2\pi ix\xi} \,d\xi \tag{2}\] (1)은 f의 푸리에 변환이고, (2)는 푸리에 역변환입니다. 푸리에 변환은 위에서 설명드린 것처럼, time domain을 frequency domain으로 변환한 것으로, 다양한 주파수를 갖는 주기함수의 합입니다. 그렇다면, 푸리에 역변환은 frequency domain의 함수를 다시 time domain으로 변환하는 것입니다. 푸리에 변환을 바라보는 관점은 여러가지가 존재하지만 그 중 하나는 ‘내적’입니다. &quot;임의의 주파수 $f(x)$ 에 대하여, $\hat{f}(\xi)$ 는 $f(x)$ 와 $e^{-2\pi ix\xi}$ 의 내적&quot; ‘내적’이 내포하고 있는 의미는 유사도입니다. 즉, “a와 b의 내적은 a와 b가 얼마나 닮았는가”를 뜻합니다. 결국 푸리에 변환은 다시 풀어쓰면 아래와 같은 의미를 가지고 있습니다. &quot;임의의 주파수 $f(x)$ 에 대하여, $\hat{f}(\xi)$ 는 $f(x)$ 와 $e^{-2\pi ix\xi}$ 가 얼마나 닮았는가&quot; 그렇다면, $e^{-2\pi ix\xi}$ 의 의미는 무엇일까요 ? 이를 이해하기 위해선 ‘오일러 공식’이 필요합니다. 오일러 공식은 복소지수함수(complext exponential function)를 삼각함수(trigonometric function)로 표현하는 유명한 식입니다. \[e^{ix} = cost + isinx \tag{3}\] 따라서, 오일러 공식에 의해 (1)식의 $e^{2\pi ix\xi}$ 부분을 cos요소와 sin요소의 합으로 표현할 수 있습니다. \[e^{2\pi ix\xi} = cos(2\pi x\xi) + i sin(2\pi x\xi) \tag{4}\] 즉, 주어진 주파수 f(x)에 대해 cosine에서 유사한 정도와 sine과 유사한 정도의 합이 푸리에 변환이라고 생각할 수 있습니다. 이번엔 푸리에 변환의 선형대수(linear algebra)적인 의미를 살펴보도록 하겠습니다. 선형 대수에서, 벡터 $a \in R^d$ 를 d차원의 orthonormal basis를 찾을 수 있다면, 벡터 $a$ 를 orhonormal basis의 선형결합으로 표현할 수 있습니다. 이 orthonormal basis를 찾는 방법 중 하나가 바로 Eigen-value decomposition 입니다. orthonormal이란 서로 직교하면서 길이가 1인 벡터들을 의미합니다. 또한, 모든 matrix에 대해서 eigen-value decomposition 결과로 찾은 basis가 orthonormal은 아닙니다. 하지만 real-symmetric matrix에 대하여 구한 eigenvector들은 orthgonal한 관계입니다. 다시 돌아와서, 푸리에 변환에서 주기함수 요소인 sine과 cosine에 대해 살펴봅시다. 아래와 같이 sine과 sine, sine과 cosine, cosine과 cosine을 내적하면 모두 다 0이 나옵니다. 이는 즉 삼각함수는 직교함을 알 수 있습니다(삼각함수의 직교성). 그림 6. 삼각함수의 직교성 그렇다면, 선형대수 관점에서, sine과 cosine 기저들의 선형결합이 즉 푸리에 변환이 되는 것입니다. 즉, 어떤 특정 graph signal에 관한 행렬이 존재하고 이 행렬이 real-symmetric matrix이며 이들의 eigenvectors를 구할 수 있다면, eigenvector의 선형결합이 graph signal의 푸리에 변환임을 의미하는 것입니다. Laplacian(Laplace Operator) Graph laplacian을 보기 전에 Laplace Operator에 대해 살펴보도록 하겠습니다. Laplace operator는 differential operator로, 벡터 기울기의 발산(Divergence)을 의미합니다. \[\triangle f= \triangledown \cdot \triangledown f = \triangledown^2 f \tag{5}\] $\triangledown f$ 는 $f$ 의 기울기를 의미하는 것으로 1차함수의 기울기처럼, 한 점에서의 변화하는 정도를 의미합니다. 이를 그림으로 나타나면 아래와 같습니다. 그림 7. Scalar 함수 &amp;lt;그림 7.&amp;gt;의 scalar 함수의 gradient는 아래와 같습니다. 그림 8. Scalar 함수의 gradient &amp;lt;그림 7.&amp;gt;과 &amp;lt;그림 8.&amp;gt;을 보시면, (x,y)=(0,2) 부근에는 수렴하는 형태의 gradient가 형성되어 있고, (x,y)=(0,-2) 부근에는 발산하는 형태의 gradient가 형성되어 있습니다. Laplace 연산자를 이용해서 이 기울기의 발산 $\triangle f$ 을 구해주면, 아래와 같습니다. 그림 9. Divergence divergence가 나타내는 의미, 즉, Laplace operator가 나타내는 의미는 무엇일까요 ? 이 함수의 높고 낮음을 표시하는 것입니다. 고등학교 때, 배운 2차 편미분과 비슷합니다. 이차 편미분 값이 양수면 아래로 볼록이고, 이차 편미분 값이 음수면 위로 볼록인 것과 유사합니다. 즉, 노란 부분일수록 양수 이기때문에 위로볼록인 모양이고, 파란부분일수록 음수값이기 때문에 아래로 볼록입니다. 그렇다면, graph signal 영역에서 Laplace operator가 갖는 의미가 무엇일까요 ? graph signal 영역에서 Laplace operator를 적용한다는 건, 한 노드에서의 signal의 흩어짐 정도, 즉, 흐르는 정도를 알 수 있습니다. 특정 노드에서 signal이 들어왔을 때 그 signal이 특정 노드와 연결된 노드들로 각각 얼마만큼 빠르게 흩어지는지를 알 수 있고 이는 즉 그 노드의 특징이 될 수 있는 것입니다. 위의 그림을 예를 들어서 설명한다면, 만약에 한 signal이 그림 7.의 가장 높은 부분(노란색 부분)에서 시작된다면 가장 낮은 부분(파란색 부분)까지 빠른 속도로 흘러갈 것입니다. 빨간색으로 강조한 부분이 왜 laplacian matrix의 eigen-value decomposition이 fourier transform과 연결되는지에 관한 부분입니다. 포스팅을 쭉 끝까지 읽어보시면 아하! 하면서 이해가 되실겁니다. 아래는 이와 관련된 gif이미지입니다. Grid 격자를 어떤 graph라고 생각한다면, 어떤 노드에서 signal이 들어왔을 때 흩어지는 양상을 보실 수 있습니다. 이 흩어지는 양상을 자세히 알기 위해서는 laplcian operator를 이용하여 계산하면 됩니다. 그림 9. Diffusion of some signal in a regular grid graph based on the graph Laplacian Graph Laplacian 그러나, 이제까지 설명한 laplacian operator는 지난 포스팅에서 언급한 Laplacian matrix랑 무슨 관련이 있는 걸까요? 이름이 비슷한 걸 보니, laplacian matrix도 어떤 differential operator, 즉 ‘변화’에 관한 행렬임을 짐작할 수 있습니다. \[\triangle f = \triangledown^2 f =\sum_{i=1}^{n}\frac{\partial^2 f}{\partial {x_i}^2} \tag{6}\] 1차원에서의 laplacian operator는 이차도함수 극한 정의와 동일합니다. \[\triangledown^2 f = \lim_{h \rightarrow 0} \frac{f(x+h) - 2f(x) - f(x-h)}{h^2} \tag{7}\] 그렇다면 위 laplacian operator가 graph 상에서 적용되면 어떻게 될까요 ? 위 식 (7)은 아래 그림과 같이 표현될 수 있습니다. 즉, x노드의 signal f(x)와 x노드와 h사이 만큼 떨어진 이웃노드의 signal f(x+h), f(x-h) 와의 변화량을 통해 x노드의 signal 특징을 구한 것입니다.이것이 바로 x노드 signal에 laplacian operator를 적용한 거라고 생각될 수 있습니다. 따라서, 한 노드 의 특징은 해당 노드와 연결된 이웃노드와의 관계라는 관점에서 표현될 수 있고, 즉 이 표현을 위해 이웃 노드와의 차이(즉, 변화)를 이용한 것이 laplacian operator가 됩니다. 그림 10. discretized laplacian operator 또한 graph laplacian은 연속적인 성질(continuous)이 아닌 이산적인 성질(discrete)을 띕니다. 이제까지 언급한 특징을 정리되면 아래의 graph laplacian 식이 이해가 되실 것입니다. 아래는 $v_i$ 노드에서 graph laplacian operator를 적용한 것입니다. \[\triangle f(v_i) = Lf|_{v_i} = \sum_{v_j ~ v_i}[f(v_i) - f(v_j)] \tag{8}\] weighted undirected graph인 경우, weighted undirected graph는 노드간 엣지에 가중치가 있는 경우입니다. graph laplacian operator는 아래와 같습니다. 그림 11. weighted undirected graph \[\triangle f(v_i) = \sum_{j \in N_i}W_{ij}[f(v_i) - f(v_j)] \tag{9}\] 여기서 $v_i$ 는 특정노드를 가르키는 인덱스이고, $f(v_i)$ 는 각 노드의 signal 입니다. 즉, 함수 $f \in R^N$ 는 각 노드의 특성을 signal로 맵핑해주는 함수라고 생각하시면 됩니다. Graph laplacian 예를 들어봅시다. 아래와 같은 간단한 graph가 있을 때, 각 노드에 대한 laplacian operator는 아래와 같습니다. 그림 12. Graph laplacian example \[\triangle f(v_1) = 2f(v_1) - f(v_2) - f(v_3)\] \[\triangle f(v_2) = 3f(v_2) - f(v_1) - f(v_3) - f(v_4)\] \[\triangle f(v_3) = 2f(v_3) - f(v_1) - f(v_2)\] \[\triangle f(v_4) = f(v_4) - f(v_2)\] 이를 행렬로 표현하면 아래와 같습니다. \[M = \begin{bmatrix} 2 &amp;amp; -1 &amp;amp; -1 &amp;amp; 0 \\ -1 &amp;amp; 3 &amp;amp; -1 &amp;amp; -1 \\ 0 &amp;amp; -1 &amp;amp; 0 &amp;amp; 1\end{bmatrix} \begin{bmatrix} f(v_1) \\ f(v_2) \\ f(v_3) \\ f(v_4)\end{bmatrix} \tag{10}\] 위 식 (10) 의 앞부분 행렬은 지난 GNN 포스팅&amp;lt;Introduction to Graph Neural Network - GNN 소개 및 개념&amp;gt; 에서 소개한 Laplacian matrix 입니다. 즉, laplacian matrix란 graph representation 중에서 이웃 노드와의 변화 흐름을 통해 노드의 특징을 나타내는 그래프 표현이라고 생각할 수 있습니다. 이웃 노드와의 차이(변화, variation)는 결국 노드 간의 매끄러움 정도(smoothness)를 의미합니다. 한 노드가 이웃 노드와의 차이가 작다는 건 그 노드는 이웃 노드와 특성이 비슷한 경우이고, 이를 ‘매끄럽다’라고 생각할 수 있습니다. 반면에, 이웃 노드와의 차이가 크다는 건 그 노드는 이웃 노드와 특성이 상이하다는 것이고 이는 ‘매끄럽지 않다’라고 생각할 수 있습니다. 따라서 Laplacian Matrix는 graph의 smoothness와 관련이 있습니다. 이를 ‘신호’라는 관점에서 다시 생각해봅시다. 어떤 한 노드 내에서 흐르는 신호는 크게 2가지로 나눈다면, 나와 비슷한 특성을 가진 이웃노드에서 들어오는 신호와 나와 상이한 특성을 가진 이웃노드에서 들어오는 신호로 나눌 수 있습니다. 즉, 한 노드 내에 혼잡해 있는 신호는 나와 유사한 특성을 가진 노드에서 오는 신호와 나와 상이한 특성을 가진 노드에서 오는 신호의 결합으로 생각할 수 있습니다. 이는 결국 푸리에 변환과 관련된 개념입니다. 그리고 나와 유사한 속성의 노드와 상이한 속성의 노드를 나눌 수 있는 것에 관한 정보가 바로 Laplacian matrix에 담겨져 있는 것입니다. 따라서, lapalcian matrix를 이용한 푸리에 변환이 바로 “Graph Fourier Transform” 이며, 이는 위에서 언급한 “eigen-value decomposition”과 관련이 있는 것입니다. Graph Fourier Transform 그렇다면, graph fourier transform이 왜 Laplacian matrix를 eigen-decomposition을 하는지에 대한 궁금증이 여기서 생깁니다. 이 부분을 이제 짚고 넘어가겠습니다. 이 부분까지 이해가 되신다면, 이 이후에 진행할 spectral graph convolution을 제대로 이해하실 수 있으실 것입니다. 위에서 특정 노드와 유사한 노드 집단과 상이한 노드집단을 나눌 수 있다면 특정 노드에 혼잡해 있는 신호를 여러 특성의 신호로 분해할 수 있다고 하였습니다. 그렇다면 먼저 이 집단을 구별할까요 ? 아래 식을 살펴봅시다. 아래 식은 결국, 노드 간의 차이의 합입니다. \[S = \sum_{(i,j) \in \epsilon}W_{ij}[f(i) - f(j)]^2 = \mathbf {f^{\intercal}Lf} \tag{11}\] 이는 결국 graph의 smoothness와 관련된 것이며, Laplacian quadratic form으로 표현가능합니다. 위의 식을 최소화하게 하는 $\mathbf f$ 를 찾는다면, 특정 노드와 특성이 유사한 노드 집단과 상이한 노드 집단을 구분할 수 있습니다. \[min_{f \in R^N, \,||f||_2 = 1} \mathbf {f^{\intercal}Lf} \tag{12}\] Lagrange 방정식에 의해 최적화 방정식으로 바꿀 수 있습니다. \[L = \mathbf {f^{\intercal}Lf} - \lambda(\mathbf {f^{\intercal}f} - 1) \tag{13}\] 위 식을 최소가 되게 하기 위한 $\mathbf f$ 를 찾기 위해 $\mathbf f$ 로 미분하면 아래와 같습니다. \[\frac{\partial L}{\partial f} = 2\mathbf {Lf} - 2\lambda \mathbf f = 0 \tag{14}\] 따라서, 최소가 되는 $\mathbf f$ 는 아래 식을 만족해야 합니다. \[\mathbf {Lf} = \lambda \mathbf f \tag{15}\] 위의 식은 laplacian 행렬의 eigen-value decomposition입니다. laplacian matrix의 eigenvector eigen vector들이 특정 노드와 유사한 노드집단과 상이한 노드집단을 구분하는 기준이 되고, 특히 작은 값의 eigenvalue의 대응하는 eigenvector일수록 graph를 더욱 smooth하게 나누는 기준이 됩니다. laplacian matrix의 eigenvector의 예를 들어봅시다. 아래 그림은 사람의 behavior를 graph으로 표현했을 때, 해당 graph의 laplacian 행렬의 eigenvector $u_2, u_3, u_4, u_8, \,\,, (0 &amp;lt; \lambda_2 \leq \lambda_3 \leq \lambda_4 \leq \lambda_8)$ 에 graph 노드를 임베딩한 것입니다. 즉, 그래프 노드 $f(v_i)$ 라면, $u^{\intercal}f(v_i)$ 를 계산한 겁니다. 그림 12. Projection on eigenvector of Laplacian Matrix with each graph node 사람의 행동을 graph로 표현했을 때, 위의 그림처럼 가까이에 있는 부분끼리 이웃노드에 해당될 가능성이 높습니다. 머리 쪽과 팔쪽은 가까우니깐 이웃노드일 가능성이 높고, 머리와 다리 쪽은 상이한 노드일 가능성이 높습니다. 따라서, eigenvalue가 가장 작은 eigenvector $u_2$ 에 임베딩했을 때, 해당 graph의 노드들을 이웃노드 집단과 상이한 노드 집단으로 잘 분리되는 것을 보실 수 있습니다. 이를 다시 돌아와서 fourier transform 관점에서 해석해봅시다. graph의 특정 노드 signal을 $f(v_i)$ 를 작은 값의 eigenvalue에 대응되는 eigenvector에 사영시키면, 혼재되어 있는 signal 중 가까운 이웃노드에서 들어오는 signal의 성분을 추출한 것으로 볼 수 있고, 큰 값의 eigenvalue에 대응되는 eigenvector에 사영시키면, 혼재되어 있는 signal 중 멀리 있는 상이한 노드에서 들어오는 signal의 성분을 추출한 것입니다. 따라서, 혼재되어 있는 graph signal을 eigenvector의 선형결합으로 표현하여, 여러 집단(가장 유사한 집단 &amp;lt; … &amp;lt; 매우 상이한 집단)에서 들어오는 signal의 합으로 표현할 수 있습니다. 또한 위에서, fourier transform은 혼합 signal을 sine과 cosine의 주파수의 성분으로 쪼개어 이 성분들의 선형결합이라고 하였습니다. 그리고, 이 때 주파수의 성분은 삼각함수의 직교성으로 인해, 직교기저를 이룬다고 하였습니다. 마찬가지로, laplacian matrix은 real-symmetric 행렬이어서 eigenvector들이 직교기저를 이룹니다. 즉, graph signal을 laplacian eigenvector 행렬에 사영시키면, graph signal을 laplacian의 직교 기저들의 성분으로 분해하여 이를 합한 선형결합에 해당됩니다. 이제까지 설명한 것을 토대로 Graph Fourier Transform은 바로 Laplacian 행렬의 Eigen-value decomposition과 관련이 있게 되는 것입니다. 수식으로도 왜 그렇게 되는지 알 수 있는데, 이는 다음과 같습니다. Fourier transform의 식을 다시 쓰면 아래와 같습니다. \[\hat{f}(\xi) = &amp;lt;f, e^{2\pi ix\xi}&amp;gt;\int_{\mathbf{R}^d} f(x)e^{2\pi ix\xi} \,dx \tag{16}\] 주파수 성분은 $e^{2\pi ix\xi}$ 이며, 여기에 laplace operator를 적용하면 아래와 같습니다. \[Lf = -\triangle(e^{2\pi ix\xi}) = -\frac{\partial^2}{\partial x^2}e^{2\pi ix\xi} = (2\pi \xi)^2 e^{2\pi ix\xi} = \lambda f \tag{17}\] 즉, 주파수 성분 $e^{2\pi ix\xi}$ 도 laplace operator의 eigen-function라고 볼 수 있습니다. 1차원 같은 경우, eigen-function이라 한 이유는 eigen-vector는 2차원 이상일 때의 eigen-function이라고 볼 수 있기 때문입니다. 이제까지는 왜 Graph Fourier Transform이 Laplacian 행렬이 eigen-value decomposition과 관련 있는지 개념적인 이유와 수식적인 이유에 대해서 살펴봤습니다. 그러면 마지막으로, Graph Fourier Transform의 수식을 정리해보도록 하겠습니다. Laplacian 행렬의 eigen-value decomposition은 아래와 같습니다. \[\mathbf {L} = \mathbf {U^{\intercal}\Lambda U} \tag{18}\] 이를 이용한 graph fourier transform과 inverse graph fourier transform은 아래와 같습니다. \[\mathcal {F}(\mathbf x) = \mathbf {U^{\intercal}x} \tag{19}\] \[\mathcal {F^{-1}}(\hat {\mathbf {x}}) = \mathbf {U} \hat {\mathbf {x}} \tag{20}\] inverse fourier transform은 frequency domain으로 변환된 signal을 다시 time domain으로 변환하는 것입니다. Spectral Graph Convolution 드디어 Spectral Graph Convolution 입니다. 꽤 많이 돌아왔으나, Spectral Graph Convolution을 이해하기 위해서 필요한 Fourier Transform, Graph Laplacian, Graph Fourier Transform을 살펴봤습니다. 그렇다면 이제까지 배운 개념을 가지고 Spectral Graph Convolution이 어떻게 작동하는지 알아보겠습니다. convolution theorem 입력과 출력이 있는 시스템에서, 출력 값은 현재의 입력에만 영향을 받는 것이 아니라 이전의 입력값에도 영향을 받습니다. 따라서 이전의 값까지의 영향을 고려하여 시스템의 출력을 계산하기 위한 연산이 convolution입니다. 어떤 시스템에 입력신호가 들어가서 출력신호가 있다고 했을 때, 출력신호는 입력신호와 시스템함수의 convolution 연산을 통해서 나오는 것입니다. 그림 13. convolution \[(f*g)(t) = \int_{-\infty}^{\infty}f(\tau)g(t-\tau)d\tau \tag{21}\] convolution의 특징은 시스템의 출력으로 ‘시스템의 특성’을 알 수 있다는 점입니다. &amp;lt;그림 13.&amp;gt;에서 시스템의 특성이 담긴 시스템 함수가 위와 같은 모양이라면, 출력도 시스템 함수와 유사한 모양으로 나옵니다. &amp;lt;그림 14&amp;gt;와 같은 모양을 가진 시스템 함수라면, 출력도 시스템 함수와 유사한 모양이 나옵니다. 그림 14. convolution(2) 이 개념을 적용한 것이 CNN에서의 filter에 해당되는 것입니다. 이미지 영역내에서의 convolution은 filter라는 시스템에 이미지라는 신호를 입력하여 filter에 해당되는 특징을 출력해 내는 것입니다. 그림 15. 이미지와 특정 filter의 convolution 연산 수행 후 convolution의 기본 개념에 대해서 대략적으로 살펴봤습니다. graph convolution은 그렇다면 우리는 어떤 graph의 특징을 추출해 낼 수 있는 filter를 학습으로 얻고 싶은 것입니다. convolution theorem은 그럼 어떤 것일까요 ? ‘time 영역에서의 signal과 시스템 함수와의 convolution 연산은 각각 frequency 영역으로 변환한 뒤의 곱과 같다’가 바로 convolution theorem 입니다. ‘time 영역에서의 signal과 시스템 함수와의 convolution 연산은 각각 frequency 영역으로 변환한 뒤의 곱과 같다’가 바로 convolution theorem 입니다. convolution in spatial/time domain is equivalent to multiplication in Fourier domain 그림 16. convolution theorem frequency 영역에서의 convolution은 단순 곱으로 계산될 수 있기 때문에 훨씬 편리합니다. 마찬가지로 graph 영역에서도 graph signal을 fourier transform으로 frequency 도메인으로 바꿔서 계산하면 마찬가지로 편리해집니다. 또한 노드와 가까이 있는 이웃노드에서부터 멀리 떨어져 있는 노드에서 오는 신호까지 모두 고려하여 graph signal의 특징을 추출할 수 있게 되는 것입니다. 이것이 바로 ‘spectral graph convolution’ 입니다. 멀리 떨어져 있는 노드에서 오는 신호까지 고려한다는 것이 사실 ‘convolution’ 입니다. convolution은 현재 출력 값은 현재 입력값 뿐만 아니라 이전 입력값에도 영향을 받는다는 것을 고려한 연산입니다. 즉, 멀리 떨어져 있는 노드에서 오는 신호는 비교적 최근에 온 신호가 될 것이고, 이웃노드에서 온 신호가 비교적 이전 시간에서 이미 영향을 준 신호입니다. 그러나 이를 모든 시간에 대해 분해에서 연산하기가 어렵기 때문에(시간 영역에서의 convolution 연산이 어렵기 때문에) frequency 영역으로 바꿔서 간편하게 계산을 하는 것입니다. 따라서, spectral graph convolution 식은 아래와 같습니다. 이 식에서 학습할 filter는 $\mathbf g$ 입니다. \[\mathbf {x} * G \mathbf {g} = \mathcal F^{-1}(\mathcal {F}(\mathbf {x}) \odot \mathcal {F}(\mathbf {g})) = \mathbf {U}(\mathbf {U^{\intercal}x} \odot \mathbf {U^{\intercal}g})\] $\mathbf {g}_\theta = diag(\mathbf {U^{\intercal}g})$ 라 가정한다면(학습할 filter가 대각요소만 있다고 가정한다면), 위의 식은 아래와 같이 됩니다. \[\mathbf {x} * \mathbf {g}_\theta = \mathbf {U} \mathbf {g}_{\theta} \mathbf {U^{\intercal}x}\] 이번 포스팅은 spectral graph convolution 연산을 이해하기 위해서 fourier transform, laplacian operator 와 graph fourier transform을 살펴보고, 마지막으로 spectral graph convolution을 설명하였습니다. 다음 포스팅에서 이어서 spectral-based CNN에 대해서 살펴보도록 하겠습니다. spectral-based CNN을 깊게 이해하기 위해 리서치를 하고 이해한 내용을 최대한 정리하였으나 전공 분야가 아니라 부족한 부분이 많을 거라고 예상됩니다. 혹시나 내용이 틀렸거나 문의가 있으시면 메일이나 댓글 달아주세요! Kipf, Thomas N., and Max Welling. “Semi-supervised classification with graph convolutional networks.” arXiv preprint arXiv:1609.02907 (2016). Zhou, Jie, et al. “Graph neural networks: A review of methods and applications.” arXiv preprint arXiv:1812.08434 (2018). DSBA 연구실 세미나 자료, [Paper Review] MultiSAGE - Spatial GCN with Contextual Embedding 푸리에 변환 참고 페이지 https://darkpgmr.tistory.com/171 https://www.math.ucla.edu/~tao/preprints/fourier.pdf https://angeloyeo.github.io/2019/10/11/Fourier_Phase.html Laplacian Operator https://angeloyeo.github.io/2019/08/28/laplacian.html https://towardsdatascience.com/spectral-graph-convolution-explained-and-implemented-step-by-step-2e495b57f801 https://en.wikipedia.org/wiki/Second_derivative Graph Fourier Transform Shuman, David I., et al. “The emerging field of signal processing on graphs: Extending high-dimensional data analysis to networks and other irregular domains.” IEEE signal processing magazine 30.3 (2013): 83-98. spectral graph convolution https://trip2ee.tistory.com/101 https://m.blog.naver.com/PostView.nhn?blogId=namunny&amp;amp;logNo=110183516999&amp;amp;proxyReferer=https:%2F%2Fwww.google.com%2F Bruna, Joan, et al. “Spectral networks and locally connected networks on graphs.” arXiv preprint arXiv:1312.6203 (2013).</summary></entry><entry><title type="html">Introduction to Graph Neural Network - GNN 소개 및 개념</title><link href="http://localhost:4000/deep%20learning/2021/02/11/gcn/" rel="alternate" type="text/html" title="Introduction to Graph Neural Network - GNN 소개 및 개념" /><published>2021-02-11T00:00:00+09:00</published><updated>2021-02-11T00:00:00+09:00</updated><id>http://localhost:4000/deep%20learning/2021/02/11/gcn</id><content type="html" xml:base="http://localhost:4000/deep%20learning/2021/02/11/gcn/">&lt;p&gt;이번 포스팅을 시작으로, Graph Neural Network(GNN)에 대해 본격적으로 다루도록 하겠습니다. 이번 포스팅은 Graph Neural Network가 나온 배경 및 기본적인 구조와 개념에 대해 다루도록 하겠습니다.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;우리가 흔히 많이 보는 데이터의 종류로는 이미지, 정형 데이터, 텍스트가 있습니다. 이미지는 2-D grid 형식인 격자 형식을 가지며, 정형 테이터는 테이블 형태를 띕니다. 또한 텍스트는 1-D sequence로 생각할 수 있습니다. 즉, 이들 데이터는 ‘격자’의 모양으로 표현할 수 있으며 이는 Euclidean space 상에 있는 것을 뜻합니다.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;https://imgur.com/0bBI5DP.png&quot; /&gt;&lt;figcaption align=&quot;center&quot;&gt;그림 1. Euclidean space vs. Non-Euclidean space&lt;/figcaption&gt;&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;&lt;img width=&quot;300&quot; src=&quot;https://imgur.com/wsEg0pl.png&quot; /&gt;&lt;figcaption align=&quot;center&quot;&gt;그림 2. 3D mesh 이미지&lt;/figcaption&gt;&lt;/p&gt;

&lt;p&gt;그러나, social network 데이터, molecular 데이터, 3D mesh 이미지 데이터(그림 2.)는 ‘비’ Eculidean space 데이터입니다. 그렇다면 기존 CNN과 RNN계열의 모델과 다르게 이런 형태의 데이터를 처리할 수 있는 새로운 모델이 필요합니다. 그것이 바로 Graph Neural Network 입니다.&lt;/p&gt;

&lt;h1&gt;What is graph?&lt;/h1&gt;

&lt;p&gt;GNN을 본격적으로 시작하기 전에 그래프에 대해서 알아보도록 하겠습니다. 그래프란 $G = (N, E)$ 로 구성된 일종의 자료 구조입니다. V는 노드들의 집합이고, E는 노드 사이를 연결하는 엣지들의 집합입니다. 노드에는 일반적으로 데이터의 정보가 담겨있고, 엣지는 데이터 간의 관계 정보가 포함되어 있습니다. 또한, 아래와 같은 그래프 형태를 ‘undirected graph’ 라고도 합니다.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;https://imgur.com/rRWSycm.png&quot; /&gt;&lt;figcaption align=&quot;center&quot;&gt;그림 3. graph&lt;/figcaption&gt;&lt;/p&gt;

&lt;p&gt;&lt;b&gt;directed graph&lt;/b&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;&lt;img width=&quot;300&quot; src=&quot;https://imgur.com/HO2ho4k.png&quot; /&gt;&lt;figcaption align=&quot;center&quot;&gt;그림 4. directed graph&lt;/figcaption&gt;&lt;/p&gt;

&lt;p&gt;방향 그래프란 엣지가 방향성을 가지는 그래프입니다. 아래 그림에서 $V_2$ 에서 $V_1$ 으로 향하는 엣지 $e_1$ 이 있다면, $V_2$ 를 predecessor, $V_1$ 을 sucessor 라고 부릅니다. 그리고 $e_1$ 을 $V_2$ 의 outgoing edge, $V_1$ 의 incoming edge 라고 합니다.&lt;/p&gt;

&lt;p&gt;그렇다면, 이러한 그래프를 네트워크의 인풋으로 넣기 위해선 행렬 형태로 표현해야 합니다. 따라서 그래프를 표현하기 위한 방법으로는 adjacency matrix, degree matrix, laplacian matrix가 있습니다.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;https://imgur.com/bYiaa4S.png&quot; /&gt;&lt;figcaption align=&quot;center&quot;&gt;그림 5. degree vs. adjacency vs. laplacian&lt;/figcaption&gt;&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Adjacency matrix&lt;/b&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;adjacency 행렬은 그래프 노드의 개수가 N개라면, NxN 정사각 행렬입니다. i노드와 j노드가 연결되어 있으면 $A_{ij} = 1$ 아니면 $A_{ij} = 0$ 의 성분을 가집니다.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Degree matrix&lt;/b&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Degree 행렬은 그래프 노드의 개수가 N개라면 NxN 크기를 가지는 대각행렬입니다. 각 꼭짓점의 차수에 대한 정보를 포함하고 있는 행렬로, 꼭짓점의 차수란 꼭짓점와 연결된 엣지의 갯수를 말합니다.&lt;/p&gt;

\[D_{i,j} = \begin{cases} deg(v_i) \quad if \,\, i=j \\
		                      0 \quad otherwise \end{cases}\]

&lt;p&gt;&lt;b&gt;Laplacian matrix&lt;/b&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;adjacency 행렬은 노드 자신에 대한 정보가 없습니다. 그에 반해 laplacian 행렬은 노드와 연결된 이웃노드와 자기 자신에 대한 정보가 모두 포함된 행렬입니다. laplacian 행렬은 degree 행렬에서 adjacency 행렬을 빼준 것입니다.&lt;/p&gt;

\[L = D - A\]

\[L_{i,j} = \begin{cases}
		deg(v_i) \quad if \,\, i=j \\
		 -1 \quad if \,\, i \neq j \\
		  0 \quad otherwise \end{cases}\]

&lt;h1&gt;Motivation : GNN $\approx$ CNN&lt;/h1&gt;

&lt;p&gt;다시 GNN으로 돌아오겠습니다. GNN의 아이디어는 Convolutional Neural Network(CNN)에서 시작되었습니다. CNN은 아래와 같은 특징을 가지고 있습니다.&lt;/p&gt;

&lt;ul&gt;&lt;li&gt;local connectivity&lt;/li&gt;
&lt;li&gt;shared weights&lt;/li&gt;
&lt;li&gt;use of Multi-layer&lt;/li&gt;&lt;/ul&gt;

&lt;p&gt;위와 같은 특징 때문에, CNN은 spatial feature를 계속해서 layer마다 계속해서 추출해 나가면서 고차원적인 특징을 표현할 수 있습니다. 위와 같은 특징은 마찬가지로 graph 영역에도 적용할 수 있습니다.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;https://imgur.com/qa04Jf2.png&quot; /&gt;&lt;figcaption align=&quot;center&quot;&gt;그림 6. GNN $\approx$ CNN&lt;/figcaption&gt;&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Local Connectivity&lt;/b&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&amp;lt;그림 3.&amp;gt; 을 보면, CNN과 GNN의 유사한 점을 확인할 수 있습니다. 먼저, graph도 한 노드와 이웃노드 간의 관계를 local connectivity라 볼 수 있기 때문에, 한 노드의 특징을 뽑기 위해서 local connection에 있는 이웃노드들의 정보만 받아서 특징을 추출할 수 있습니다. 즉, CNN의 filter의 역할과 유사합니다.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Shared Weights&lt;/b&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;또한 이렇게 graph 노드의 특징을 추출하는 weight은 다른 노드의 특징을 추출하는데도 동일한 가중치를 사용할 수 있어(shared weight), computational cost를 줄일 수 있습니다.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Use of Multi-layer&lt;/b&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;CNN에서 multi layer 구조로 여러 레이어를 쌓게 되면 초반에는 low-level feature위주로 뽑고, 네트워크가 깊어질수록 high level feature를 뽑습니다. &lt;span style=&quot;color:red&quot;&gt;graph같은 경우에 multi-layer구조로 쌓게되면 초반 layer는 단순히 이웃노드 간의 관계에 대해서만 특징을 추출하지만, 네트워크가 깊어질수록 나와 간접적으로 연결된 노드의 영향력까지 고려된 특징을 추출할 수 있게 됩니다.&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;그렇다면, 위와 같은 특성을 가지려면 GNN은 어떻게 인풋 그래프에 대하여 연산을 해야하는지 알아보도록 하겠습니다.&lt;/p&gt;

&lt;h1&gt;Original Graph Neural Network&lt;/h1&gt;

&lt;p&gt;graph neural network는 &lt;a href=&quot;https://www.infona.pl/resource/bwmeta1.element.ieee-art-000004700287&quot;&gt;Scarselli et al.의 The Graph Neural Network Model&lt;/a&gt;에서 처음 등장했습니다. GNN의 목적은 결국 이웃노드들 간의 정보를 이용해서 해당 노드를 잘 표현할 수 있는 특징 벡터를 잘 찾아내는 것입니다. 이렇게 찾아낸 특징 벡터를 통해 task를 수행할 수 있습니다(graph classification, node classification 등).&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;&lt;img width=&quot;400&quot; src=&quot;https://imgur.com/eDqPQFW.png&quot; /&gt;&lt;figcaption align=&quot;center&quot;&gt;그림 7. GNN&lt;/figcaption&gt;&lt;/p&gt;

&lt;p&gt;GNN의 동작은 따라서 크게 두가지로 생각할 수 있습니다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;propagation step - 이웃노드들의 정보를 받아서 현재 자신 노드의 상태를 업데이트 함&lt;/li&gt;
  &lt;li&gt;output step - task 수행을 위해 노드 벡터에서 task output를 출력함&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;이를 수식으로 표현하면 아래와 같습니다.&lt;/p&gt;

\[x_n = f_w(l_n, l_{co[n]}, x_{ne[n]}, l_{ne[n]})\]

\[o_n = g_w(x_n, l_n)\]

&lt;p&gt;이때, $l_n, l_{co[n]}, x_{ne[n]}, l_{ne[n]}$ 은 각각 n 노드의 라벨, n노드와 연결된 엣지들의 라벨, 이웃노드들의 states, 이웃노드들의 라벨입니다. 또한 $f_w$ 와 $o_w$ 는 각각 propagation function(논문에선 transition function 이라 표현함)와 output function입니다.&lt;/p&gt;

&lt;p&gt;propagation function(transition function)은 이웃 노드들의 정보와 노드와 연결된 엣지정보들을 토대로 현재 자신의 노드를 표현합니다. 즉, d-차원의 공간에 이러한 인풋들을 받아서 맵핑하는 과정이라 생각할 수 있습니다. output function은 task 수행을 위해 학습을 통해 얻은 node feature을 입력으로 하여 output을 얻습니다. 예를 들어, node label classification 이라면 node label이 아웃풋이 될 것입니다.&lt;/p&gt;

&lt;h3&gt;Learning algorithm : Banach fixed point theorem&lt;/h3&gt;

&lt;p&gt;그렇다면 어떻게 학습이 이뤄질까요 ? 위에서 Motivation : GNN $\approx CNN$ 에서 Multi-layer를 GNN에 사용하면 얻는 이점은 layer가 깊어질수록 직접적으로 연결된 이웃 노드 이외에 멀리 있는 노드들의 영향력을 고려하여 현재 노드의 feature를 구성할 수 있다고 하였습니다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;이렇게 멀리있는 노드에서부터 현재 노드까지 정보가 전달되는 과정을 message passing이라고 합니다. message passing이란 개념은 GNN이 등장하고 난 이후에, Gilmer et al.의 “Neural message passing for quantumchemistry” 에서 등장하였습니다. 해당 논문은 여러 종류의 GNN 구조를 일반화하는 프레임워크를 message passing 이라는 것으로 제안한 논문입니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;하지만, 초기 GNN은 multi-layer 구조가 아니기 때문에 불가능합니다. 따라서, Banach fixed point theorem에 따라, iterative method로 고정된 node feature를 찾습니다.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;&lt;img width=&quot;400&quot; src=&quot;https://imgur.com/UIfPnoL.png&quot; /&gt;&lt;figcaption align=&quot;center&quot;&gt;그림 8. Network obtained by unfolding the encoding network&lt;/figcaption&gt;&lt;/p&gt;

&lt;p&gt;$x_n$ 와 $o_n$ 이 어떤 수렴된 값을 가지려면, Banach fixed point theorem에 의하면 propagation function이 contraction map이어야 합니다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;$F_w$ is a &lt;em&gt;contraction map&lt;/em&gt; with respect to the state, i.e., there exists $\mu$ , $0 \leq \mu \le 1$ , such that $|F_w(x, l) - F_w(y, l)| \leq \mu |x-y|$ holds for any x, y where $| \cdot |$ denotes a vectorial norm.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;b&gt;Contraction Map에 대한 개인적인 생각&lt;/b&gt;&lt;br /&gt;
사실 contraction map의 수학적인 이해가 완벽하게 되진 않았습니다. 그러나, 제가 생각하는 contraction map은 다음과 같습니다. 선형대수학에서 선형변환을 진행하면, m차원의 벡터가 n차원의 공간으로 맵핑이 됩니다. 이 때, 서로 다른 두 m차원의 벡터가 n차원의 공간으로 맵핑이 되었을 때, 두 벡터 사이의 거리가 줄어드는 방향이라면 이 맵핑 function은 contraction map입니다.&lt;/p&gt;

&lt;p&gt;그렇다면 fixed point가 되려면, 즉 수렴된 node feature들은 contraction map에 의해 정의된 공간 안에서 존재하는 것이고, 어떻게 보면 node feature를 서치하는 범위가 작다라고 생각할 수 있습니다.&lt;/p&gt;

&lt;p&gt;이러한 문제 때문에 추후 다양한 버전의 GNN은 이러한 제한된 가정을 두지 않고 우리가 딥러닝 네트워크 학습시 사용하는 방식으로 node feature 값을 찾습니다. 즉, node feature의 search space가 훨씬 넓어지는 것입니다.&lt;/p&gt;

&lt;p&gt;다시 돌아와서, 그렇다면 iterative method식으로 수식을 전개하면 아래와 같이 전개할 수 있습니다.&lt;/p&gt;

\[x_n(t+1) = f_w(l_n, l_{co[n]}, x_{ne[n]}(t), l_{ne[n]})\]

\[o_n(t) = g_w(x_n(t), l_n), \quad n \in N\]

&lt;p&gt;fixed 된 $x_n, o_n$ 을 얻으면 아래와 같은 loss를 계산할 수 있고, gradient 계산을 통해 weight을 업데이트합니다. 여기서 weight은 $F_w$ 의 파라미터 입니다. neural network 라면 network의 가중치가 됩니다.&lt;/p&gt;

&lt;h1&gt;Variants of GNNs&lt;/h1&gt;

&lt;p&gt;Scarselli의 GNN 이후로 여러 변형된 GNN이 많이 등장하였습니다. 초기 GNN은 학습 방식의 단점에 의해 수렴이 잘 되지 않는다는 문제가 있습니다. 이러한 문제를 해결하기 위해 초기 GNN 이후에 다양한 GNN이 등장하였습니다. 대표적으로 Graph Convolutional Network와 Gated Graph Neural Network 등이 있습니다.&lt;/p&gt;

&lt;p&gt;다음 포스팅부터는 GNN이 더욱 더 유명해진 계기가 된 Graph Convolutional Network에 대해 다루도록 하겠습니다. 읽어주셔서 감사합니다.&lt;/p&gt;

&lt;hr /&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;https://arxiv.org/abs/1812.08434&quot;&gt;Zhou, Jie, et al. “Graph neural networks: A review of methods and applications.” arXiv preprint arXiv:1812.08434 (2018).&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;What is graph?, &lt;a href=&quot;https://ratsgo.github.io/data%20structure&amp;amp;algorithm/2017/11/18/graph/&quot;&gt;https://ratsgo.github.io/data%20structure&amp;amp;algorithm/2017/11/18/graph/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.infona.pl/resource/bwmeta1.element.ieee-art-000004700287&quot;&gt;Scarselli, F., et al. “The Graph Neural Network Model.” IEEE Transactions on Neural Networks 1.20 (2009): 61-80.&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</content><author><name>Seonhwa Lee</name></author><category term="Deep Learning" /><category term="graph-neural-network" /><summary type="html">이번 포스팅을 시작으로, Graph Neural Network(GNN)에 대해 본격적으로 다루도록 하겠습니다. 이번 포스팅은 Graph Neural Network가 나온 배경 및 기본적인 구조와 개념에 대해 다루도록 하겠습니다. 우리가 흔히 많이 보는 데이터의 종류로는 이미지, 정형 데이터, 텍스트가 있습니다. 이미지는 2-D grid 형식인 격자 형식을 가지며, 정형 테이터는 테이블 형태를 띕니다. 또한 텍스트는 1-D sequence로 생각할 수 있습니다. 즉, 이들 데이터는 ‘격자’의 모양으로 표현할 수 있으며 이는 Euclidean space 상에 있는 것을 뜻합니다. 그림 1. Euclidean space vs. Non-Euclidean space 그림 2. 3D mesh 이미지 그러나, social network 데이터, molecular 데이터, 3D mesh 이미지 데이터(그림 2.)는 ‘비’ Eculidean space 데이터입니다. 그렇다면 기존 CNN과 RNN계열의 모델과 다르게 이런 형태의 데이터를 처리할 수 있는 새로운 모델이 필요합니다. 그것이 바로 Graph Neural Network 입니다. What is graph? GNN을 본격적으로 시작하기 전에 그래프에 대해서 알아보도록 하겠습니다. 그래프란 $G = (N, E)$ 로 구성된 일종의 자료 구조입니다. V는 노드들의 집합이고, E는 노드 사이를 연결하는 엣지들의 집합입니다. 노드에는 일반적으로 데이터의 정보가 담겨있고, 엣지는 데이터 간의 관계 정보가 포함되어 있습니다. 또한, 아래와 같은 그래프 형태를 ‘undirected graph’ 라고도 합니다. 그림 3. graph directed graph 그림 4. directed graph 방향 그래프란 엣지가 방향성을 가지는 그래프입니다. 아래 그림에서 $V_2$ 에서 $V_1$ 으로 향하는 엣지 $e_1$ 이 있다면, $V_2$ 를 predecessor, $V_1$ 을 sucessor 라고 부릅니다. 그리고 $e_1$ 을 $V_2$ 의 outgoing edge, $V_1$ 의 incoming edge 라고 합니다. 그렇다면, 이러한 그래프를 네트워크의 인풋으로 넣기 위해선 행렬 형태로 표현해야 합니다. 따라서 그래프를 표현하기 위한 방법으로는 adjacency matrix, degree matrix, laplacian matrix가 있습니다. 그림 5. degree vs. adjacency vs. laplacian Adjacency matrix adjacency 행렬은 그래프 노드의 개수가 N개라면, NxN 정사각 행렬입니다. i노드와 j노드가 연결되어 있으면 $A_{ij} = 1$ 아니면 $A_{ij} = 0$ 의 성분을 가집니다. Degree matrix Degree 행렬은 그래프 노드의 개수가 N개라면 NxN 크기를 가지는 대각행렬입니다. 각 꼭짓점의 차수에 대한 정보를 포함하고 있는 행렬로, 꼭짓점의 차수란 꼭짓점와 연결된 엣지의 갯수를 말합니다. \[D_{i,j} = \begin{cases} deg(v_i) \quad if \,\, i=j \\ 0 \quad otherwise \end{cases}\] Laplacian matrix adjacency 행렬은 노드 자신에 대한 정보가 없습니다. 그에 반해 laplacian 행렬은 노드와 연결된 이웃노드와 자기 자신에 대한 정보가 모두 포함된 행렬입니다. laplacian 행렬은 degree 행렬에서 adjacency 행렬을 빼준 것입니다. \[L = D - A\] \[L_{i,j} = \begin{cases} deg(v_i) \quad if \,\, i=j \\ -1 \quad if \,\, i \neq j \\ 0 \quad otherwise \end{cases}\] Motivation : GNN $\approx$ CNN 다시 GNN으로 돌아오겠습니다. GNN의 아이디어는 Convolutional Neural Network(CNN)에서 시작되었습니다. CNN은 아래와 같은 특징을 가지고 있습니다. local connectivity shared weights use of Multi-layer 위와 같은 특징 때문에, CNN은 spatial feature를 계속해서 layer마다 계속해서 추출해 나가면서 고차원적인 특징을 표현할 수 있습니다. 위와 같은 특징은 마찬가지로 graph 영역에도 적용할 수 있습니다. 그림 6. GNN $\approx$ CNN Local Connectivity &amp;lt;그림 3.&amp;gt; 을 보면, CNN과 GNN의 유사한 점을 확인할 수 있습니다. 먼저, graph도 한 노드와 이웃노드 간의 관계를 local connectivity라 볼 수 있기 때문에, 한 노드의 특징을 뽑기 위해서 local connection에 있는 이웃노드들의 정보만 받아서 특징을 추출할 수 있습니다. 즉, CNN의 filter의 역할과 유사합니다. Shared Weights 또한 이렇게 graph 노드의 특징을 추출하는 weight은 다른 노드의 특징을 추출하는데도 동일한 가중치를 사용할 수 있어(shared weight), computational cost를 줄일 수 있습니다. Use of Multi-layer CNN에서 multi layer 구조로 여러 레이어를 쌓게 되면 초반에는 low-level feature위주로 뽑고, 네트워크가 깊어질수록 high level feature를 뽑습니다. graph같은 경우에 multi-layer구조로 쌓게되면 초반 layer는 단순히 이웃노드 간의 관계에 대해서만 특징을 추출하지만, 네트워크가 깊어질수록 나와 간접적으로 연결된 노드의 영향력까지 고려된 특징을 추출할 수 있게 됩니다. 그렇다면, 위와 같은 특성을 가지려면 GNN은 어떻게 인풋 그래프에 대하여 연산을 해야하는지 알아보도록 하겠습니다. Original Graph Neural Network graph neural network는 Scarselli et al.의 The Graph Neural Network Model에서 처음 등장했습니다. GNN의 목적은 결국 이웃노드들 간의 정보를 이용해서 해당 노드를 잘 표현할 수 있는 특징 벡터를 잘 찾아내는 것입니다. 이렇게 찾아낸 특징 벡터를 통해 task를 수행할 수 있습니다(graph classification, node classification 등). 그림 7. GNN GNN의 동작은 따라서 크게 두가지로 생각할 수 있습니다. propagation step - 이웃노드들의 정보를 받아서 현재 자신 노드의 상태를 업데이트 함 output step - task 수행을 위해 노드 벡터에서 task output를 출력함 이를 수식으로 표현하면 아래와 같습니다. \[x_n = f_w(l_n, l_{co[n]}, x_{ne[n]}, l_{ne[n]})\] \[o_n = g_w(x_n, l_n)\] 이때, $l_n, l_{co[n]}, x_{ne[n]}, l_{ne[n]}$ 은 각각 n 노드의 라벨, n노드와 연결된 엣지들의 라벨, 이웃노드들의 states, 이웃노드들의 라벨입니다. 또한 $f_w$ 와 $o_w$ 는 각각 propagation function(논문에선 transition function 이라 표현함)와 output function입니다. propagation function(transition function)은 이웃 노드들의 정보와 노드와 연결된 엣지정보들을 토대로 현재 자신의 노드를 표현합니다. 즉, d-차원의 공간에 이러한 인풋들을 받아서 맵핑하는 과정이라 생각할 수 있습니다. output function은 task 수행을 위해 학습을 통해 얻은 node feature을 입력으로 하여 output을 얻습니다. 예를 들어, node label classification 이라면 node label이 아웃풋이 될 것입니다. Learning algorithm : Banach fixed point theorem 그렇다면 어떻게 학습이 이뤄질까요 ? 위에서 Motivation : GNN $\approx CNN$ 에서 Multi-layer를 GNN에 사용하면 얻는 이점은 layer가 깊어질수록 직접적으로 연결된 이웃 노드 이외에 멀리 있는 노드들의 영향력을 고려하여 현재 노드의 feature를 구성할 수 있다고 하였습니다. 이렇게 멀리있는 노드에서부터 현재 노드까지 정보가 전달되는 과정을 message passing이라고 합니다. message passing이란 개념은 GNN이 등장하고 난 이후에, Gilmer et al.의 “Neural message passing for quantumchemistry” 에서 등장하였습니다. 해당 논문은 여러 종류의 GNN 구조를 일반화하는 프레임워크를 message passing 이라는 것으로 제안한 논문입니다. 하지만, 초기 GNN은 multi-layer 구조가 아니기 때문에 불가능합니다. 따라서, Banach fixed point theorem에 따라, iterative method로 고정된 node feature를 찾습니다. 그림 8. Network obtained by unfolding the encoding network $x_n$ 와 $o_n$ 이 어떤 수렴된 값을 가지려면, Banach fixed point theorem에 의하면 propagation function이 contraction map이어야 합니다. $F_w$ is a contraction map with respect to the state, i.e., there exists $\mu$ , $0 \leq \mu \le 1$ , such that $|F_w(x, l) - F_w(y, l)| \leq \mu |x-y|$ holds for any x, y where $| \cdot |$ denotes a vectorial norm. Contraction Map에 대한 개인적인 생각 사실 contraction map의 수학적인 이해가 완벽하게 되진 않았습니다. 그러나, 제가 생각하는 contraction map은 다음과 같습니다. 선형대수학에서 선형변환을 진행하면, m차원의 벡터가 n차원의 공간으로 맵핑이 됩니다. 이 때, 서로 다른 두 m차원의 벡터가 n차원의 공간으로 맵핑이 되었을 때, 두 벡터 사이의 거리가 줄어드는 방향이라면 이 맵핑 function은 contraction map입니다. 그렇다면 fixed point가 되려면, 즉 수렴된 node feature들은 contraction map에 의해 정의된 공간 안에서 존재하는 것이고, 어떻게 보면 node feature를 서치하는 범위가 작다라고 생각할 수 있습니다. 이러한 문제 때문에 추후 다양한 버전의 GNN은 이러한 제한된 가정을 두지 않고 우리가 딥러닝 네트워크 학습시 사용하는 방식으로 node feature 값을 찾습니다. 즉, node feature의 search space가 훨씬 넓어지는 것입니다. 다시 돌아와서, 그렇다면 iterative method식으로 수식을 전개하면 아래와 같이 전개할 수 있습니다. \[x_n(t+1) = f_w(l_n, l_{co[n]}, x_{ne[n]}(t), l_{ne[n]})\] \[o_n(t) = g_w(x_n(t), l_n), \quad n \in N\] fixed 된 $x_n, o_n$ 을 얻으면 아래와 같은 loss를 계산할 수 있고, gradient 계산을 통해 weight을 업데이트합니다. 여기서 weight은 $F_w$ 의 파라미터 입니다. neural network 라면 network의 가중치가 됩니다. Variants of GNNs Scarselli의 GNN 이후로 여러 변형된 GNN이 많이 등장하였습니다. 초기 GNN은 학습 방식의 단점에 의해 수렴이 잘 되지 않는다는 문제가 있습니다. 이러한 문제를 해결하기 위해 초기 GNN 이후에 다양한 GNN이 등장하였습니다. 대표적으로 Graph Convolutional Network와 Gated Graph Neural Network 등이 있습니다. 다음 포스팅부터는 GNN이 더욱 더 유명해진 계기가 된 Graph Convolutional Network에 대해 다루도록 하겠습니다. 읽어주셔서 감사합니다. Zhou, Jie, et al. “Graph neural networks: A review of methods and applications.” arXiv preprint arXiv:1812.08434 (2018). What is graph?, https://ratsgo.github.io/data%20structure&amp;amp;algorithm/2017/11/18/graph/ Scarselli, F., et al. “The Graph Neural Network Model.” IEEE Transactions on Neural Networks 1.20 (2009): 61-80.</summary></entry><entry><title type="html">TADA, Trend Alignment with Dual-Attention Multi-Task Recurrent Neural Networks for Sales Prediction 논문 리뷰</title><link href="http://localhost:4000/deep%20learning/2021/01/18/tada/" rel="alternate" type="text/html" title="TADA, Trend Alignment with Dual-Attention Multi-Task Recurrent Neural Networks for Sales Prediction 논문 리뷰" /><published>2021-01-18T00:00:00+09:00</published><updated>2021-01-18T00:00:00+09:00</updated><id>http://localhost:4000/deep%20learning/2021/01/18/tada</id><content type="html" xml:base="http://localhost:4000/deep%20learning/2021/01/18/tada/">&lt;hr /&gt;

&lt;p&gt;다변량 시계열 예측 모델에 관한 논문으로, 다변량 시계열 데이터를 가지고 encoder-decoder RNN 모델 기반으로 dual-attention과 multi-task RNN으로 구성된 모델입니다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2&gt;Problem&lt;/h2&gt;
&lt;p&gt;다변량 시계열 예측을 위한 여러 통계 기반 모델링이 있으나, 판매량에 영향을 주는 변수들 간의 관계를 파악하기 어렵고, 이 변수들로 부터 의미있는 정보(contextual information)을 추출하는 건 더욱 어렵습니다. 예를 들어, 겨울의복은 날씨에 영향에 두드러지게 받지만, 일반적인 셔츠는 사계절내내 잘 입는 옷이기 때문에 겨울의복보단 계절의 영향을 덜 받습니다. 또한 소비자의 주관적인 선호도(브랜드 선호도, 상품 선호도 등)에 따라 상품 판매는 크게 또한 달라지게 됩니다. 따라서, 본 논문에서 주목하는 다변량 시계열 예측에서의 문제는 아래와 같이 크게 세가지입니다.&lt;/p&gt;

&lt;ol&gt;&lt;li&gt;how to fully capture the dynamic dependencies among multiple influential factors?&lt;br /&gt;
판매에 영향을 주는 여러 변수들 간의 관계는 시간에 따라 변할 가능성이 높습니다. 그렇다면 매 스텝마다 변수들 간의 관계를 어떻게 포착할 수 있을까요 ?&lt;/li&gt;&lt;li&gt;how can we possibly glean wisdoms form the past to compensate for the unpredictability of influential factors?&lt;br /&gt;이 변수들이 미래에 어떻게 변할지는 아무도 모릅니다. 그렇다면 과거 이 변수들의 정보만을 가지고 어떻게 미래를 눈여겨 볼 수 있는 정보를 추출할지는 생각해 봐야 합니다.&lt;/li&gt;
&lt;li&gt;how to align the upcoming trend with historical sales trends?&lt;br /&gt;현실 시계에서의 판매 트랜드는 전혀 규칙적이지 않습니다. 그렇다면 과거 판매 트렌드를 어떻게 하면 현실 트렌드와 연관지을 수 있을까요 ?&lt;/li&gt;&lt;/ol&gt;

&lt;h2&gt;TADA : Trend Alignment with Dual-Attention Multi-Task RNN&lt;/h2&gt;

&lt;h3&gt;Problem Formulation&lt;/h3&gt;

&lt;p&gt;본 논문에서 풀고자 하는 다변량 시계열 예측 문제는 아래와 같이 수학적으로 정의됩니다.&lt;/p&gt;

\[\{\hat{y_t\}}^{T+\triangle}_{t=T+1} = F({\{\mathbf x_t\}}^{T}_{t=1}, {\{y_t\}}^{T}_{t=1})\]

&lt;p&gt;$\mathbf x_t$ 는 influential factors로 판매량 이외의 변수(ex. 날씨, 브랜드, 상품인덱스 등)이고, $y_t$ 는 판매량 입니다.&lt;/p&gt;

&lt;h3&gt;TADA 모델 개요&lt;/h3&gt;
&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;https://imgur.com/w09ZSHF.png&quot; /&gt;&lt;figcaption align=&quot;center&quot;&gt;그림 1. 모델 개요&lt;/figcaption&gt;&lt;/p&gt;

&lt;p&gt;위의 그림은 본 논문의 모델 개요입니다. 크게 아래와 같이 구성되어 있습니다.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Multi-task based Encoder Structures&lt;/li&gt;
  &lt;li&gt;Dual-Attention based Decoder Structures
    &lt;ul&gt;
      &lt;li&gt;Attention got weighted decoder input mapping&lt;/li&gt;
      &lt;li&gt;attention for trend alignment&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;Multi-task based Encoder Structures&lt;/h4&gt;
&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;https://imgur.com/leH0yfV.png&quot; /&gt;&lt;figcaption align=&quot;center&quot;&gt;그림 2. Multi-task based Encoder&lt;/figcaption&gt;&lt;/p&gt;

&lt;p&gt;influential factor의 semantic한 특징을 잘 추출한다면 분명 예측에 도움이 될 것입니다. 그러나 매 타임 스텝마다 어떻게 하면 판매량 예측에 도움될 semantic한 특징을 추출할 수 있을까요 ? 본 논문에서는 influential factor를 크게 intrinsic한 속성과 objective한 속성으로 나누어 LSTM을 이용한 인코딩을 각각 따로하였습니다. 이를 통해 각각 두 개의 LSTM(intrinsic LSTM, external LSTM)을 통해 각기 다른 semantic한 특징을 추출할 수 있습니다. 따라서, 위의 문제 정의는 아래와 같이 다시 정의될 수 있습니다.&lt;/p&gt;

\[\{\hat{y_t\}}^{T+\triangle}_{t=T+1} = F({\{\mathbf x_t^{int}\}}^{T}_{t=1}, {\{\mathbf x_t^{ext}\}}^{T}_{t=1}, {\{y_t\}}^{T}_{t=1})\]

&lt;p&gt;intrinsic한 속성이란 브랜드, 카테고리, 가격등 상품과 관련된 것이고, objective한 속성은 날씨, 휴일유무, 할인등과 관련된 속성입니다. 아래 표는 논문에서 실험한 데이터의 intrinsic/objective 속성입니다.&lt;/p&gt;

&lt;p&gt;하지만 우리가 구하고 싶은 건 두 가지의 다른 semantic한 feature를 적절하게 결합하여 의미있는 &lt;strong&gt;contextual vector&lt;/strong&gt;를 만드는 것입니다. 따라서 또다른 LSTM 네트워크인 Synergic LSTM을 구축하여 joint representation을 학습합니다. 이때, Synergic LSTM에 입력으로 들어가는 건 각 타임스텝에 해당되는 $h_t^{int}$ 와 $h_t^{ext}$ 뿐만 아니라 판매량 $y_t$ 도 같이 joint space가 구축되도록 학습됩니다.&lt;/p&gt;

&lt;p&gt;먼저, 두 타입스텝 t에서의 두 개의 hidden state을 $h_t^{int}$ 와 $h_t^{ext}$ 이용하여 Synergic LSTM의 인풋인 $\mathbf X_t^{syn}$ 을 아래와 같이 계산합니다.&lt;/p&gt;

\[\mathbf X_t^{syn} = \mathbf W_{syn}[\mathbf h_t^{int};\mathbf h_t^{ext};y_t]\]

&lt;p&gt;그런 다음, intrinsic LSTM/external LSTM과 동일하게 각 타임스텝마다 두 정보가 결합되어 인코딩된 hidden stated인 $\mathbf h^{con}_t$ 를 계산합니다.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;https://imgur.com/ijwajF4.png&quot; /&gt;&lt;figcaption align=&quot;center&quot;&gt;그림 3. Multi-task based Encoder(2)&lt;/figcaption&gt;&lt;/p&gt;

&lt;h4&gt;Dual-Attention based Decoder Structures&lt;/h4&gt;
&lt;p&gt;Multi-task Encoder를 통해 과거 판매량 시계열 데이터를 인코딩하면 contextual vectors인 ${\mathbf h_t^{con}}^T_{t=1}$ 이 계산되어 나옵니다. $h_t^{con}$ 은 타임스텝 t까지의 시계열 데이터에 대한 contextual 정보를 품고 있습니다.&lt;/p&gt;

&lt;p&gt;LSTM decoder도 encoder와 유사하게 예측에 필요한 contextual vector $\mathbf d_t^{con}$ 을 생성합니다. 따라서, $T &amp;lt; t \leq T + \Delta$ 에 대해 decoder 수학식은 아래와 같습니다.&lt;/p&gt;

\[\mathbf d_t^{con} = LSTM^{dec}(\mathbf x_t^{dec}, \mathbf d^{con}_{t-1})\]

&lt;p&gt;위 식에서 $\mathbf x_t^{dec}$ 는 attention weighted input입니다. 그러면 contextual vector가 어떻게 만들어지는지 보기 전에 attention weighted input 계산 과정을 살펴봅시다.&lt;/p&gt;

&lt;h5&gt;Attention for Weighted Decoder Input Mapping&lt;/h5&gt;

&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;https://imgur.com/NvCkYMs.png&quot; /&gt;&lt;figcaption align=&quot;center&quot;&gt;그림 4. Attention for Weighted Decoder Input&lt;/figcaption&gt;&lt;/p&gt;

&lt;p&gt;Decoder에 입력될 Input은 encoder contextual vector들에서 각 디코터 타임 스텝에 필요한 정보를 적절하게 취하도록 하기 위해 attention 메카니즘을 통해 생성합니다.&lt;/p&gt;

\[\mathbf x_t^{dec} = \mathbf W_{dec}\left[\sum_{t'=1}^T \alpha_{tt'}^{int}\mathbf h_{t'}^{int};\sum_{t'=1}^T \alpha_{tt'}^{ext}\mathbf h_{t'}^{ext}\right] + \mathbf b_{dec}\]

&lt;p&gt;$\alpha_{tt’}^{int}$ 와 $\alpha_{tt’}^{ext}$ 는 어텐션 가중치를 의미합니다. 어텐션 가중치는 아래 과정을 통해 계산됩니다.&lt;/p&gt;

\[e^{int}_{tt'} = \mathbf v^{\mathrm T}_{int}tanh(\mathbf M_{int}\mathbf d_{t-1}^{con} + \mathbf H_{int}\mathbf h_{t'}^{int})\]

\[e^{ext}_{tt'} = \mathbf v^{\mathrm T}_{ext}tanh(\mathbf M_{int}\mathbf d_{t-1}^{con} + \mathbf H_{ext}\mathbf h_{t'}^{ext})\]

\[\alpha_{tt'}^{int} = \frac{exp(e_{tt'}^{int})}{\sum_{s=1}^{T}exp(e_{ts}^{int})}\]

\[\alpha_{tt'}^{ext} = \frac{exp(e_{tt'}^{ext})}{\sum_{s=1}^{T}exp(e_{ts}^{ext})}\]

&lt;p&gt;이때, $\sum_{t’=1}^{T}\alpha_{tt’}^{int} = \sum_{t’=1}^{T}\alpha_{tt’}^{ext} = 1$ 이 여야 합니다.&lt;/p&gt;

&lt;h5&gt;Attention for Trend Alignment&lt;/h5&gt;

&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;https://imgur.com/riUczJ9.png&quot; /&gt;&lt;figcaption align=&quot;center&quot;&gt;그림 5. Attention for Trend Alignment&lt;/figcaption&gt;&lt;/p&gt;

&lt;p&gt;미래를 예측하기 위해선 과거의 trend 패턴을 안다면 좀 더 수월할 수 있습니다. 따라서, 미래에 예상되는 패턴과 유사한 패턴을 과거에서 찾는 작업을 attention을 통해 진행하는 과정을 본 논문에서 제안하였습니다. 그러나, 
일반적으로 attention 메카니즘은 현 타임스텝에서 아웃풋을 출력하기 위해 이전 hidden state들중에서 가장 align되는 정보를 선택합니다. 과거 정보들 중에서 &lt;strong&gt;미래의 트렌드와 유사한 트렌드 정보&lt;/strong&gt;를 선택적으로 이용하고 싶다면 전통적인 attention 메카니즘을 그대로 사용하기는 어렵습니다. 왜냐하면, 일반적인 데이터에선 trend외에 노이즈도 많이 포함하고 있기 때문입니다. 즉, 전체 데이터에 trend + noise라서 이전 모든 과거들에서 유사한 trend 패턴만을 집중하는 건 힘듭니다. 따라서 논문 저자는 아래와 같은 방법을 고안하였습니다.&lt;/p&gt;

&lt;p&gt;먼저, ${\mathbf h_t^{con}}_{t=1}^T$ 를 $\triangle$ 타임 스텝 크기에 해당되는  contextual vector를 이어붙여서 $\triangle$ -step trend vector를 생성합니다.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;https://imgur.com/yUmHRP0.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;$\mathbf p_i$ 는 과거 시계열 데이터에서 $\triangle$ 간격에 해당되는 구간의 트렌드를 나타냅니다. $i$ 가 1씩 증가하므로, 마치 슬라이딩 윈도우 1씩 움직이면서 트렌드를 포착하는 것과 유사합니다.&lt;/p&gt;

&lt;p&gt;마찬가지 방식으로 decoder hidden state들을 이어 붙여 미래에 예상될 트렌드 정보를 생성합니다.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;https://imgur.com/I9C1wnQ.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;따라서, 그림5 처럼 과거에 생성된 트렌드 벡터과 미래 트렌드 벡터를 각각 내적하여 가장 큰 값에 해당되는 인덱스 i를 반환합니다. 내적값이 가장 크다는 것은 가장 유사함을 의미합니다.&lt;/p&gt;

\[e_i^{trd} = \mathbf p_i^{\mathrm T} \tilde{\mathbf p}\]

\[i' = argmax(e_i^{trd} , e_{i+1}^{trd},\dots, e_{T+\triangle -1}^{trd})\]

&lt;p&gt;그 다음 $\mathbf p_{i’}$ 내의 각 ${\mathbf d_t^{con}}$ 와 $\mathbf h_t^{con}$ 을 아래와 같은 계산과정을 거쳐서 $\tilde {\mathbf d}^{con}$ 을 생성합니다.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;https://imgur.com/haL8Udd.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;$\tilde {\mathbf d}^{con}$ 은 타임스텝 t에서의 과거 유사한 트렌드 정보에 집중하여 생성된 aligned contextual vector 입니다.&lt;/p&gt;

&lt;h4&gt;Sales Prediction and Model Learning&lt;/h4&gt;

&lt;p&gt;위에서 생성된 aligned contextual vector ${\widetilde {\mathbf d_t}^{con}}$ 를 가지고 판매량을 예측합니다.&lt;/p&gt;

\[\hat y_t = \mathbf v_y^{\mathrm T} \mathbf {\widetilde d}^{con} + b_y\]

&lt;p&gt;$\hat y_t , \,\,(T+1 \leq t \leq T+\Delta)$ 는 타임스텝 T에서의 예측된 판매량입니다.&lt;/p&gt;

&lt;p&gt;본 논문에서 학습은 L2 regularization과 함께 Mean Squared Error를 minimize하였습니다.&lt;/p&gt;

&lt;h2&gt;Experiment and result.&lt;/h2&gt;

&lt;p&gt;전체적인 결과에 관한 건 논문을 참고 바랍니다. trend alignment 부분에 대한 결과를 살펴보면 과거 유사하다고 찾은 trend와 예측된 trend는 아래 그래프와 같이 나왔습니다.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;https://imgur.com/F5w1W2o.png&quot; /&gt;&lt;/p&gt;
&lt;p&gt;보면 어느정도 과거 매치된 트렌드와 유사한 트렌드를 따르는 것을 확인할 수 있었습니다.&lt;/p&gt;

&lt;h2&gt;Lessons Learned&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;결과를 보면 어느정도 lag가 발생하는 것으로 보입니다.&lt;/li&gt;
  &lt;li&gt;trend에 대한 파악을 먼저하고 판매량 데이터 입력을 나중에 하면 어떨까?&lt;/li&gt;
  &lt;li&gt;dual-stage attention에서의 input attention 모듈과 multi-tasked encoder를 결합하는 건 어떨까 ??&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;이상으로 본 논문 리뷰를 마치겠습니다.&lt;/p&gt;

&lt;hr /&gt;
&lt;ol&gt;
  &lt;li&gt;Chen, Tong, et al. “Tada: trend alignment with dual-attention multi-task recurrent neural networks for sales prediction.” 2018 IEEE International Conference on Data Mining (ICDM). IEEE, 2018.&lt;/li&gt;
&lt;/ol&gt;</content><author><name>Seonhwa Lee</name></author><category term="Deep Learning" /><category term="time-series-analysis" /><summary type="html">다변량 시계열 예측 모델에 관한 논문으로, 다변량 시계열 데이터를 가지고 encoder-decoder RNN 모델 기반으로 dual-attention과 multi-task RNN으로 구성된 모델입니다. Problem 다변량 시계열 예측을 위한 여러 통계 기반 모델링이 있으나, 판매량에 영향을 주는 변수들 간의 관계를 파악하기 어렵고, 이 변수들로 부터 의미있는 정보(contextual information)을 추출하는 건 더욱 어렵습니다. 예를 들어, 겨울의복은 날씨에 영향에 두드러지게 받지만, 일반적인 셔츠는 사계절내내 잘 입는 옷이기 때문에 겨울의복보단 계절의 영향을 덜 받습니다. 또한 소비자의 주관적인 선호도(브랜드 선호도, 상품 선호도 등)에 따라 상품 판매는 크게 또한 달라지게 됩니다. 따라서, 본 논문에서 주목하는 다변량 시계열 예측에서의 문제는 아래와 같이 크게 세가지입니다. how to fully capture the dynamic dependencies among multiple influential factors? 판매에 영향을 주는 여러 변수들 간의 관계는 시간에 따라 변할 가능성이 높습니다. 그렇다면 매 스텝마다 변수들 간의 관계를 어떻게 포착할 수 있을까요 ?how can we possibly glean wisdoms form the past to compensate for the unpredictability of influential factors?이 변수들이 미래에 어떻게 변할지는 아무도 모릅니다. 그렇다면 과거 이 변수들의 정보만을 가지고 어떻게 미래를 눈여겨 볼 수 있는 정보를 추출할지는 생각해 봐야 합니다. how to align the upcoming trend with historical sales trends?현실 시계에서의 판매 트랜드는 전혀 규칙적이지 않습니다. 그렇다면 과거 판매 트렌드를 어떻게 하면 현실 트렌드와 연관지을 수 있을까요 ? TADA : Trend Alignment with Dual-Attention Multi-Task RNN Problem Formulation 본 논문에서 풀고자 하는 다변량 시계열 예측 문제는 아래와 같이 수학적으로 정의됩니다. \[\{\hat{y_t\}}^{T+\triangle}_{t=T+1} = F({\{\mathbf x_t\}}^{T}_{t=1}, {\{y_t\}}^{T}_{t=1})\] $\mathbf x_t$ 는 influential factors로 판매량 이외의 변수(ex. 날씨, 브랜드, 상품인덱스 등)이고, $y_t$ 는 판매량 입니다. TADA 모델 개요 그림 1. 모델 개요 위의 그림은 본 논문의 모델 개요입니다. 크게 아래와 같이 구성되어 있습니다. Multi-task based Encoder Structures Dual-Attention based Decoder Structures Attention got weighted decoder input mapping attention for trend alignment Multi-task based Encoder Structures 그림 2. Multi-task based Encoder influential factor의 semantic한 특징을 잘 추출한다면 분명 예측에 도움이 될 것입니다. 그러나 매 타임 스텝마다 어떻게 하면 판매량 예측에 도움될 semantic한 특징을 추출할 수 있을까요 ? 본 논문에서는 influential factor를 크게 intrinsic한 속성과 objective한 속성으로 나누어 LSTM을 이용한 인코딩을 각각 따로하였습니다. 이를 통해 각각 두 개의 LSTM(intrinsic LSTM, external LSTM)을 통해 각기 다른 semantic한 특징을 추출할 수 있습니다. 따라서, 위의 문제 정의는 아래와 같이 다시 정의될 수 있습니다. \[\{\hat{y_t\}}^{T+\triangle}_{t=T+1} = F({\{\mathbf x_t^{int}\}}^{T}_{t=1}, {\{\mathbf x_t^{ext}\}}^{T}_{t=1}, {\{y_t\}}^{T}_{t=1})\] intrinsic한 속성이란 브랜드, 카테고리, 가격등 상품과 관련된 것이고, objective한 속성은 날씨, 휴일유무, 할인등과 관련된 속성입니다. 아래 표는 논문에서 실험한 데이터의 intrinsic/objective 속성입니다. 하지만 우리가 구하고 싶은 건 두 가지의 다른 semantic한 feature를 적절하게 결합하여 의미있는 contextual vector를 만드는 것입니다. 따라서 또다른 LSTM 네트워크인 Synergic LSTM을 구축하여 joint representation을 학습합니다. 이때, Synergic LSTM에 입력으로 들어가는 건 각 타임스텝에 해당되는 $h_t^{int}$ 와 $h_t^{ext}$ 뿐만 아니라 판매량 $y_t$ 도 같이 joint space가 구축되도록 학습됩니다. 먼저, 두 타입스텝 t에서의 두 개의 hidden state을 $h_t^{int}$ 와 $h_t^{ext}$ 이용하여 Synergic LSTM의 인풋인 $\mathbf X_t^{syn}$ 을 아래와 같이 계산합니다. \[\mathbf X_t^{syn} = \mathbf W_{syn}[\mathbf h_t^{int};\mathbf h_t^{ext};y_t]\] 그런 다음, intrinsic LSTM/external LSTM과 동일하게 각 타임스텝마다 두 정보가 결합되어 인코딩된 hidden stated인 $\mathbf h^{con}_t$ 를 계산합니다. 그림 3. Multi-task based Encoder(2) Dual-Attention based Decoder Structures Multi-task Encoder를 통해 과거 판매량 시계열 데이터를 인코딩하면 contextual vectors인 ${\mathbf h_t^{con}}^T_{t=1}$ 이 계산되어 나옵니다. $h_t^{con}$ 은 타임스텝 t까지의 시계열 데이터에 대한 contextual 정보를 품고 있습니다. LSTM decoder도 encoder와 유사하게 예측에 필요한 contextual vector $\mathbf d_t^{con}$ 을 생성합니다. 따라서, $T &amp;lt; t \leq T + \Delta$ 에 대해 decoder 수학식은 아래와 같습니다. \[\mathbf d_t^{con} = LSTM^{dec}(\mathbf x_t^{dec}, \mathbf d^{con}_{t-1})\] 위 식에서 $\mathbf x_t^{dec}$ 는 attention weighted input입니다. 그러면 contextual vector가 어떻게 만들어지는지 보기 전에 attention weighted input 계산 과정을 살펴봅시다. Attention for Weighted Decoder Input Mapping 그림 4. Attention for Weighted Decoder Input Decoder에 입력될 Input은 encoder contextual vector들에서 각 디코터 타임 스텝에 필요한 정보를 적절하게 취하도록 하기 위해 attention 메카니즘을 통해 생성합니다. \[\mathbf x_t^{dec} = \mathbf W_{dec}\left[\sum_{t'=1}^T \alpha_{tt'}^{int}\mathbf h_{t'}^{int};\sum_{t'=1}^T \alpha_{tt'}^{ext}\mathbf h_{t'}^{ext}\right] + \mathbf b_{dec}\] $\alpha_{tt’}^{int}$ 와 $\alpha_{tt’}^{ext}$ 는 어텐션 가중치를 의미합니다. 어텐션 가중치는 아래 과정을 통해 계산됩니다. \[e^{int}_{tt'} = \mathbf v^{\mathrm T}_{int}tanh(\mathbf M_{int}\mathbf d_{t-1}^{con} + \mathbf H_{int}\mathbf h_{t'}^{int})\] \[e^{ext}_{tt'} = \mathbf v^{\mathrm T}_{ext}tanh(\mathbf M_{int}\mathbf d_{t-1}^{con} + \mathbf H_{ext}\mathbf h_{t'}^{ext})\] \[\alpha_{tt'}^{int} = \frac{exp(e_{tt'}^{int})}{\sum_{s=1}^{T}exp(e_{ts}^{int})}\] \[\alpha_{tt'}^{ext} = \frac{exp(e_{tt'}^{ext})}{\sum_{s=1}^{T}exp(e_{ts}^{ext})}\] 이때, $\sum_{t’=1}^{T}\alpha_{tt’}^{int} = \sum_{t’=1}^{T}\alpha_{tt’}^{ext} = 1$ 이 여야 합니다. Attention for Trend Alignment 그림 5. Attention for Trend Alignment 미래를 예측하기 위해선 과거의 trend 패턴을 안다면 좀 더 수월할 수 있습니다. 따라서, 미래에 예상되는 패턴과 유사한 패턴을 과거에서 찾는 작업을 attention을 통해 진행하는 과정을 본 논문에서 제안하였습니다. 그러나, 일반적으로 attention 메카니즘은 현 타임스텝에서 아웃풋을 출력하기 위해 이전 hidden state들중에서 가장 align되는 정보를 선택합니다. 과거 정보들 중에서 미래의 트렌드와 유사한 트렌드 정보를 선택적으로 이용하고 싶다면 전통적인 attention 메카니즘을 그대로 사용하기는 어렵습니다. 왜냐하면, 일반적인 데이터에선 trend외에 노이즈도 많이 포함하고 있기 때문입니다. 즉, 전체 데이터에 trend + noise라서 이전 모든 과거들에서 유사한 trend 패턴만을 집중하는 건 힘듭니다. 따라서 논문 저자는 아래와 같은 방법을 고안하였습니다. 먼저, ${\mathbf h_t^{con}}_{t=1}^T$ 를 $\triangle$ 타임 스텝 크기에 해당되는 contextual vector를 이어붙여서 $\triangle$ -step trend vector를 생성합니다. $\mathbf p_i$ 는 과거 시계열 데이터에서 $\triangle$ 간격에 해당되는 구간의 트렌드를 나타냅니다. $i$ 가 1씩 증가하므로, 마치 슬라이딩 윈도우 1씩 움직이면서 트렌드를 포착하는 것과 유사합니다. 마찬가지 방식으로 decoder hidden state들을 이어 붙여 미래에 예상될 트렌드 정보를 생성합니다. 따라서, 그림5 처럼 과거에 생성된 트렌드 벡터과 미래 트렌드 벡터를 각각 내적하여 가장 큰 값에 해당되는 인덱스 i를 반환합니다. 내적값이 가장 크다는 것은 가장 유사함을 의미합니다. \[e_i^{trd} = \mathbf p_i^{\mathrm T} \tilde{\mathbf p}\] \[i' = argmax(e_i^{trd} , e_{i+1}^{trd},\dots, e_{T+\triangle -1}^{trd})\] 그 다음 $\mathbf p_{i’}$ 내의 각 ${\mathbf d_t^{con}}$ 와 $\mathbf h_t^{con}$ 을 아래와 같은 계산과정을 거쳐서 $\tilde {\mathbf d}^{con}$ 을 생성합니다. $\tilde {\mathbf d}^{con}$ 은 타임스텝 t에서의 과거 유사한 트렌드 정보에 집중하여 생성된 aligned contextual vector 입니다. Sales Prediction and Model Learning 위에서 생성된 aligned contextual vector ${\widetilde {\mathbf d_t}^{con}}$ 를 가지고 판매량을 예측합니다. \[\hat y_t = \mathbf v_y^{\mathrm T} \mathbf {\widetilde d}^{con} + b_y\] $\hat y_t , \,\,(T+1 \leq t \leq T+\Delta)$ 는 타임스텝 T에서의 예측된 판매량입니다. 본 논문에서 학습은 L2 regularization과 함께 Mean Squared Error를 minimize하였습니다. Experiment and result. 전체적인 결과에 관한 건 논문을 참고 바랍니다. trend alignment 부분에 대한 결과를 살펴보면 과거 유사하다고 찾은 trend와 예측된 trend는 아래 그래프와 같이 나왔습니다. 보면 어느정도 과거 매치된 트렌드와 유사한 트렌드를 따르는 것을 확인할 수 있었습니다. Lessons Learned 결과를 보면 어느정도 lag가 발생하는 것으로 보입니다. trend에 대한 파악을 먼저하고 판매량 데이터 입력을 나중에 하면 어떨까? dual-stage attention에서의 input attention 모듈과 multi-tasked encoder를 결합하는 건 어떨까 ?? 이상으로 본 논문 리뷰를 마치겠습니다. Chen, Tong, et al. “Tada: trend alignment with dual-attention multi-task recurrent neural networks for sales prediction.” 2018 IEEE International Conference on Data Mining (ICDM). IEEE, 2018.</summary></entry><entry><title type="html">A Dual-Stage Attention-Based Recurrent Neural Network for Time-Series Prediction 논문 리뷰</title><link href="http://localhost:4000/deep%20learning/2021/01/18/dual-stage-attention/" rel="alternate" type="text/html" title="A Dual-Stage Attention-Based Recurrent Neural Network for Time-Series Prediction 논문 리뷰" /><published>2021-01-18T00:00:00+09:00</published><updated>2021-01-18T00:00:00+09:00</updated><id>http://localhost:4000/deep%20learning/2021/01/18/dual-stage-attention</id><content type="html" xml:base="http://localhost:4000/deep%20learning/2021/01/18/dual-stage-attention/">&lt;p&gt;A Dual-Stage Attention-Based Recurrent Neural Network는 다변량 시계열 예측 모델입니다(Multi-Variate Time Series Prediction). Bahdanau et al.의 &lt;a href=&quot;https://arxiv.org/abs/1409.0473&quot;&gt;Attention network 기반 시퀀스 모델&lt;/a&gt; 을 베이스로, 인코더 뿐만 아니라 디코더에도 Attention netowork를 이용해 예측을 위한 다변량 시계열 변수 간 상대적인 중요도와 타임 스텝 간 상대적인 중요도를 모두 고려한 모델입니다.&lt;/p&gt;

&lt;h2&gt;Problem&lt;/h2&gt;</content><author><name>Seonhwa Lee</name></author><category term="Deep Learning" /><category term="time-series-analysis" /><summary type="html">A Dual-Stage Attention-Based Recurrent Neural Network는 다변량 시계열 예측 모델입니다(Multi-Variate Time Series Prediction). Bahdanau et al.의 Attention network 기반 시퀀스 모델 을 베이스로, 인코더 뿐만 아니라 디코더에도 Attention netowork를 이용해 예측을 위한 다변량 시계열 변수 간 상대적인 중요도와 타임 스텝 간 상대적인 중요도를 모두 고려한 모델입니다. Problem</summary></entry><entry><title type="html">RDD, Resilient Distributed Dataset에 대하여[3] - RDD액션, RDD 데이터 불러오기와 저장하기, 공유변수</title><link href="http://localhost:4000/spark%20programming/2021/01/07/rdd(3)/" rel="alternate" type="text/html" title="RDD, Resilient Distributed Dataset에 대하여[3] - RDD액션, RDD 데이터 불러오기와 저장하기, 공유변수" /><published>2021-01-07T00:00:00+09:00</published><updated>2021-01-07T00:00:00+09:00</updated><id>http://localhost:4000/spark%20programming/2021/01/07/rdd(3)</id><content type="html" xml:base="http://localhost:4000/spark%20programming/2021/01/07/rdd(3)/">&lt;p&gt;이번 포스팅은 지난 포스팅 &amp;lt;RDD, Resilient Distributed DataSet에 대하여[2] - RDD기본액션, RDD트랜스포메이션&amp;gt; 에 이어서 진행하도록 하겠습니다. 교재는 빅데이터 분석을 위한 스파크2 프로그래밍을 참고하였습니다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2&gt;2.1.6 RDD 액션&lt;/h2&gt;
&lt;p&gt;RDD트랜스포메이션 연산은 느긋한 평가(lazy evaluation) 또는 지연 계산 방식을 따릅니다. 이는 계산에 필요한 정보를 누적하다가 계산이 필요한 시점이 돼서야 계산을 수행하는 방식을 뜻합니다. 여기서 계산이 필요한 시점은 RDD 액션 메서드가 호출된 시점입니다. RDD 액션 메서드가 호출이 되어야 비로소 RDD 트랜스포메이션 연산이 수행되게 됩니다.&lt;/p&gt;

&lt;h3&gt;1. 출력 연산&lt;/h3&gt;
&lt;h4&gt;1.1. first&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;RDD 요소 중 ,첫번째 요소를 돌려줌&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&quot;language-Python&quot;&gt;&amp;gt;&amp;gt;&amp;gt; rdd = sc.parallelize(range(50))
&amp;gt;&amp;gt;&amp;gt; result = rdd.first()
&amp;gt;&amp;gt;&amp;gt; print(result)
0
&lt;/code&gt;&lt;/pre&gt;

&lt;h4&gt;1.2. take&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;RDD 요소중, n번째까지 요소를 돌려줌&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&quot;language-Python&quot;&gt;&amp;gt;&amp;gt;&amp;gt; rdd = sc.parallelize(range(50))
&amp;gt;&amp;gt;&amp;gt; result = rdd.take(5)
&amp;gt;&amp;gt;&amp;gt; print(result)
[0, 1, 2, 3, 4]
&lt;/code&gt;&lt;/pre&gt;

&lt;h4&gt;1.3. takeSample&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;지정된 크기의 sample을 추출해서 리스트, 배열 타입등으로 반환함&lt;/li&gt;
  &lt;li&gt;sample 메서드와의 차이점
    &lt;ul&gt;
      &lt;li&gt;sample 메서드는 RDD 트랜스포메이션 메서드이고, 크기를 지정할 수 없음.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;takeSample(withReplacement, num, seed=None)&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&quot;language-Python&quot;&gt;&amp;gt;&amp;gt;&amp;gt; rdd = sc.parallelize(range(100))
&amp;gt;&amp;gt;&amp;gt; result = rdd.takeSample(False, 3)
&amp;gt;&amp;gt;&amp;gt; result
[55, 23, 45]
&lt;/code&gt;&lt;/pre&gt;

&lt;h4&gt;1.5. countByValue&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;RDD의 요소들이 나타낸 횟수를 맵 형태로 돌려주는 메서드&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&quot;language-Python&quot;&gt;&amp;gt;&amp;gt;&amp;gt; rdd = sc.parallelize([1,1,3,2,1,2,2,1,1,4,5,3,2,3])
&amp;gt;&amp;gt;&amp;gt; result = rdd.countByValue()
&amp;gt;&amp;gt;&amp;gt; print(result)
defaultdict(&amp;lt;class 'int'&amp;gt;, {1: 5, 3: 3, 2: 4, 4: 1, 5: 1})
&lt;/code&gt;&lt;/pre&gt;

&lt;h4&gt;1.6. reduce&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;reduce 메서드 인자는 함수가 들어감.&lt;/li&gt;
  &lt;li&gt;그 함수는 교환법칙과 결합법칙이 성립하는 함수여야 함.&lt;/li&gt;
  &lt;li&gt;따라서, 메서드 인자로 받은 함수를 이용해서 하나의 요소로 합치는 메서드임.&lt;/li&gt;
  &lt;li&gt;def reduce(f: (T,T)=&amp;gt;T):T
    &lt;ul&gt;
      &lt;li&gt;동일한 타입 2개를 입력으로 받아, 같은 타입으로 반환해주는 메서드임&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;실제 구현은 파티션단위로 나눠져서 처리됨. 분산 프로그램이기 때문임.&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&quot;language-Python&quot;&gt;&amp;gt;&amp;gt;&amp;gt; from operator import add
&amp;gt;&amp;gt;&amp;gt; add(1,2)
3
&amp;gt;&amp;gt;&amp;gt; sc.parallelize([1,2,3,4,5]).reduce(add)
15
&lt;/code&gt;&lt;/pre&gt;

&lt;h4&gt;1.7. fold&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;reduce와 동일하나, 초기값을 설정할 수 있음&lt;/li&gt;
  &lt;li&gt;def fold(zeroValue: T)(op: (T,T)=&amp;gt;T):T&lt;/li&gt;
  &lt;li&gt;그런데 유의할 점은 파티션단위로 나뉘어서 처리하기 때문에, 파티션단위로 처리할 때마다 초깃값을 이용하여 연산이 수행됨. 따라서, 더하기 연산을 할 땐 항등원인 0을, 곱셈 연산을 할 땐 항등원인 1을 초깃값으로 설정하는 것이 좋음&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&quot;language-Python&quot;&gt;&amp;gt;&amp;gt;&amp;gt; rdd = sc.parallelize(range(1,11), 3)
&amp;gt;&amp;gt;&amp;gt; rdd.fold(1, add)
59 #값이 55가 아니라 59가 나오는 것을 확인할 수 있음. 
&lt;/code&gt;&lt;/pre&gt;

&lt;h5&gt;reduce와 fold차이&lt;/h5&gt;

&lt;pre&gt;&lt;code class=&quot;language-Python&quot;&gt;#product.py
class Product:
    def __init__(self, price):
        self.price = price
        self.count = 1
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-Python&quot;&gt;def addPriceandCount(p1, p2):
    p1.price += p2.price
    p1.count += 1
    return p1 #return을 p1인 이유 --&amp;gt; 입력값과 출력값의 타입이 동일해야 함.

if __name__ =='__main__':
    conf = SparkConf()
    conf.set(&quot;spark.driver.host&quot;, &quot;127.0.0.1&quot;)
    sc = SparkContext(master=&quot;local[*]&quot;, appName=&quot;RDDOpSample&quot;, conf=conf)

    rdd = sc.parallelize([Product(300), Product(200), Product(100)], 10)

    #reduce
    result = rdd.reduce(addPriceandCount)
    print(result.price, result.count)

    #fold
    result = rdd.fold(Product(0), addPriceandCount)
    print(result.price, result.count)
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;fold의 count합을 보면 11인 것을 알 수 있음. 그 이유는 위에서 파티션 개수를 10으로 지정하였고, 파티션 단위로 연산을 초기값을 이용하여 연산을 수행하기 때문임&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;1.8. aggregate&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;입력와 출력의 타입이 다른 경우 사용 가능&lt;/li&gt;
  &lt;li&gt;def aggregate&lt;a href=&quot;zeroValue: U&quot;&gt;U&lt;/a&gt;(seqOp:(U,T)=&amp;gt;U, combOp:(U,U)=&amp;gt;U):U
    &lt;ul&gt;
      &lt;li&gt;크게 세가지 인자를 받음. 첫번째는 초깃값으로 fold와 동일&lt;/li&gt;
      &lt;li&gt;aggregate은 병합을 크게 2단계로 구성되는데, 1단계는 seqOp에 의해, 2단계는 combOp에 의해 진행됨&lt;/li&gt;
      &lt;li&gt;seqOp는 초깃값과 동일한 타입(U)과 RDD요소 타입(T)가 입력되어 병합 결과 초깃값과 동일한 타입인 U가 반환됨&lt;/li&gt;
      &lt;li&gt;combOp는 최종병합에서 사용됨&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&quot;language-Python&quot;&gt;#rdd에 속한 요소들의 평균을 aggregate을 이용하여 구하는 예제
#record.py
class Record:

    def __init__(self, amount, number=1):
        self.amount = amount
        self.number = number

    def addAmt(self, amount):
        return Record(self.amount + amount, self.number + 1)

    def __add__(self, other):
        amount = self.amount + other.amount
        number = self.number + other.number
        return Record(amount, number)

    def __str__(self):
        return &quot;avg:&quot; + str(self.amount / self.number)

    def __repr__(self):
        return 'Record(%r, %r)' % (self.amount, self.number)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-Python&quot;&gt;def seqop(r,v):
    return r.addAmt(v)

if __name__ =='__main__':
    conf = SparkConf()
    conf.set(&quot;spark.driver.host&quot;, &quot;127.0.0.1&quot;)
    sc = SparkContext(master=&quot;local[*]&quot;, appName=&quot;RDDOpSample&quot;, conf=conf)

    rdd = sc.parallelize([100,80,75,90,95], 3)

    #aggregate
    result = rdd.aggregate(Record(0,0), seqop, lambda r1, r2:r1+r2)
    print(result) # avg:88.0
&lt;/code&gt;&lt;/pre&gt;

&lt;h4&gt;1.9. sum&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;모든 요소의 합을 구해주며, Double, Long등 숫자타입인 경우에만 사용가능&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&quot;language-Python&quot;&gt;&amp;gt;&amp;gt;&amp;gt; rdd = sc.parallelize(range(1,11))
&amp;gt;&amp;gt;&amp;gt; rdd.sum()
55
&lt;/code&gt;&lt;/pre&gt;

&lt;h4&gt;1.10. foreach, foreachPartition&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;foreach는 RDD의 개별요소에 전달받은 함수를 적용하는 메서드이고, foreachPartition은 파티션 단위로 적용됨&lt;/li&gt;
  &lt;li&gt;이때 인자로 받는 함수는 한개의 입력값을 가지는 함수임&lt;/li&gt;
  &lt;li&gt;이 메서드를 사용할 때 유의할 점은 &lt;strong&gt;드라이버 프로그램(메인 함수를 포함하고 있는 프로그램)이 작동하고 있는 서버위가 아니라 클러스터의 각 개별 서버에서 실행된다는 것&lt;/strong&gt;임&lt;/li&gt;
  &lt;li&gt;따라서 foreach() 인자로 print함수를 전달한다는 것은 각 서버의 콘솔에 출력하라는 의미가 됨.&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&quot;language-Python&quot;&gt;def sideEffect(values):
    print(&quot;partition side effect&quot;)
    for v in values:
        print(&quot;value side effect : %s&quot; %v)

if __name__ =='__main__':
    conf = SparkConf()
    conf.set(&quot;spark.driver.host&quot;, &quot;127.0.0.1&quot;)
    sc = SparkContext(master=&quot;local[*]&quot;, appName=&quot;RDDOpSample&quot;, conf=conf)

    rdd = sc.parallelize(range(1,11),3)
    result = rdd.foreach(lambda v:print(&quot;value side effect: %s&quot; %v))
    result2 = rdd.foreachPartition(sideEffect)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-Python&quot;&gt;###
value side effect: 2
value side effect: 3
value side effect: 4
value side effect: 5
value side effect: 6
value side effect: 7
value side effect: 8
value side effect: 9
value side effect: 10
partition side effect
value side effect : 7
value side effect : 8
value side effect : 9
value side effect : 10
partition side effect
value side effect : 4
value side effect : 5
value side effect : 6
partition side effect
value side effect : 1
value side effect : 2
value side effect : 3
###
&lt;/code&gt;&lt;/pre&gt;

&lt;h4&gt;1.11. toDebugString&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;디버깅을 위한 메서드. RDD파티션 개수나 의존성 정보 등 세부 정보 알고 싶을 때 사용&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&quot;language-Python&quot;&gt;&amp;gt;&amp;gt;&amp;gt; rdd = sc.parallelize(range(1,100), 10).persist().map(lambda v:(v,1)).coalesce(2)
&amp;gt;&amp;gt;&amp;gt; rdd.toDebugString()
b'(2) CoalescedRDD[65] at coalesce at NativeMethodAccessorImpl.java:0 []\n |  PythonRDD[64] at RDD at PythonRDD.scala:53 []\n |  PythonRDD[63] at RDD at PythonRDD.scala:53 []\n |  ParallelCollectionRDD[62] at parallelize at PythonRDD.scala:195 []'
&lt;/code&gt;&lt;/pre&gt;

&lt;h4&gt;1.12. cache, persist, unpersist&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;rdd액션 연산이 수행될때마다 RDD 생성 히스토리를 이용해 복구하는 단계를 수행하지만 너무나 번거로움&lt;/li&gt;
  &lt;li&gt;따라서 반복적으로 사용되는 RDD인 경우 메모리에 저장해서 사용함&lt;/li&gt;
  &lt;li&gt;cache와 persist는 rdd정보를 메모리 또는 디스크에 저장해서 다음 액션을 수행 시 다시 rdd를 생성하는 단계를 거치지 않음&lt;/li&gt;
  &lt;li&gt;unpersist는 저장된 메모리가 더이상 필요없을 시 취소할 때 사용&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;RDD 데이터 불러오기와 저장하기&lt;/h2&gt;
&lt;p&gt;스파크는 하둡 API기반이라서 다양한 데이터 포맷과 파일을 지원합니다.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;파일 포맷 : 텍스트파일, JSON, 하둡의 시퀀스파일, csv&lt;/li&gt;
  &lt;li&gt;파일 시스템 : 로컬 파일 시스템, 하둡파일시스템(HDFS), AWS의 S3, 오픈스택의 Swift등
    &lt;ul&gt;
      &lt;li&gt;파일시스템이란 ? 컴퓨터에서 파일이나 자료를 쉽게 발견할 수 있도록 유지 관리하는 방법임. 즉, 저장매체에는 많은 파일이 있으므로, 이러한 파일을 관리하는 방법을 말함. 파일을 빠르게 읽기, 쓰기, 삭제 등 기본적인 기능을 원활히 수행하기 위한 목적임&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;1. 텍스트 파일&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&quot;language-Python&quot;&gt;rdd = sc.textFile(&quot;file:////Users/ralasun/Desktop/ralasun.github.io/_posts/2020-07-11-introRL(1).md&quot;)
&amp;gt;&amp;gt;&amp;gt; rdd.collect()
['---', 'layout : post', 'title: Reinforcement Learning 소개[1]', 'category: Reinforcement Learning', 'tags: cs234 reinforcement-learning david-silver sutton', '---', '', '이번 포스팅은 강화학습이 기존에 알려진 여러 방법론들과의 비교를 통한 강화학습 특성과 구성요소를 다룹니다. ...```
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;“file:///”처럼 ///를 세개 작성해야 함. HDFS와 구별하기 위해서임&lt;/li&gt;
  &lt;li&gt;또한 클러스터내 각 서버에서 동일한 경로를 통해 지정한 파일에 접근이 가능해야 함&lt;/li&gt;
  &lt;li&gt;sc.textFile(path, n)에서, n을 통해 파티션 개수 정할 수 있음&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&quot;language-Python&quot;&gt;#save
rdd.saveAsTextFile(&quot;&amp;lt;path_to_save&amp;gt;/sub1&quot;)

#save(gzip)
rdd.saveAsTextFile(&quot;&amp;lt;path_to_save&amp;gt;/sub1&quot;, codec)
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;위와 같이 rdd를 text파일로도 저장이 가능함. 두번째는 압축을 사용하는 방법임&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;2. 오브젝트 파일&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;오브젝트 직렬화 방법으로 RDD를 저장함. python의 경우, pickle형태로 저장함&lt;/li&gt;
  &lt;li&gt;텍스트파일도 가능함&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&quot;language-Python&quot;&gt;&amp;gt;&amp;gt;&amp;gt; rdd = sc.parallelize(range(1,1000),3)
&amp;gt;&amp;gt;&amp;gt; rdd.saveAsPickleFile(&quot;/Users/ralasun/Desktop/pythonpickle.pkl&quot;)
&amp;gt;&amp;gt;&amp;gt; rdd2 = sc.pickleFile(&quot;/Users/ralasun/Desktop/pythonpickle.pkl&quot;)       
&amp;gt;&amp;gt;&amp;gt; rdd2.take(2)
[667, 668]
&lt;/code&gt;&lt;/pre&gt;

&lt;h4&gt;3. 시퀀스 파일&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;시퀀스파일이란, 키와 값으로 구성된 데이터를 저장하는 이진 파일 포맷으로, 하둡에서 자주 사용됨&lt;/li&gt;
  &lt;li&gt;오브젝트 파일과의 차이점은 오브젝트 파일은 RDD에 포함된 각 데이터가 serializable 인터페이스를 구현하고 있어야 하는 것처럼 시퀀스 파일로 만들고 싶은 RDD가 하둡의 writable 인터페이스를 구현하고 있어야 함.&lt;/li&gt;
  &lt;li&gt;saveAsNewAPIHadoopFile(path, outputFormatClass, keyClass=None, valueClass=None, keyConverter=None, valueConverter=None, conf=None)
    &lt;ul&gt;
      &lt;li&gt;sequence파일로 저장하기 위해선 outputFormatClass에 문자열의 형태로 하둡내 시퀀스포맷의 풀네임을 작성해야 함. keyclass와 valueclass도 마찬가지임. 이렇게 하는 이유는 하둡의 writable 인터페이스를 구현해야 할 객체가 필요하기 때문임.&lt;/li&gt;
      &lt;li&gt;따라서 내부에서는 keyclass와 valueclass 인자에 전달한 포맷으로 rdd를 변환한 뒤 sequencefile포맷으로 저장하는 작업을 거치는 것임&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&quot;language-Python&quot;&gt; path = &quot;/Users/ralasun/Desktop/ppkl&quot;
&amp;gt;&amp;gt;&amp;gt; outputFormatClass = &quot;org.apache.hadoop.mapreduce.lib.output.SequenceFileOutputFormat&quot;
&amp;gt;&amp;gt;&amp;gt; inputformatClass = &quot;org.apache.hadoop.mapreduce.lib.input.SequenceFileInputFormat&quot;
&amp;gt;&amp;gt;&amp;gt; keyClass = &quot;org.apache.hadoop.io.Text&quot;
&amp;gt;&amp;gt;&amp;gt; valueClass = &quot;org.apache.hadoop.io.IntWritable&quot;
&amp;gt;&amp;gt;&amp;gt; rdd = sc.parallelize([&quot;a&quot;,&quot;b&quot;,&quot;c&quot;,&quot;b&quot;,&quot;c&quot;])
&amp;gt;&amp;gt;&amp;gt; rdd2 = rdd.map(lambda x:(x,1))
&amp;gt;&amp;gt;&amp;gt; rdd2.collect()
[('a', 1), ('b', 1), ('c', 1), ('b', 1), ('c', 1)]
&amp;gt;&amp;gt;&amp;gt; rdd2.saveAsNewAPIHadoopFile(path, outputFormatClass, keyClass, valueClass)
rdd3 = sc.newAPIHadoopFile(path, inputformatClass, keyClass, valueClass)
&amp;gt;&amp;gt;&amp;gt; for k, v in rdd3.collect():
...     print(k,v)
... 
a 1
b 1
b 1
c 1
c 1
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;클러스터 환경에서의 공유 변수&lt;/h2&gt;

&lt;p&gt;클러스터 환경에서 하나의 잡을 수행하기 위해 다수의 서버가 여러 개의 프로세스를 실행합니다. 따라서, 여러 프로세스가 공유할 수 있는 자원을 관리(읽기/쓰기 자원)할 수 있도록 스파크는 지원하는데, 브로드캐스트 변수와 어큐뮬레이터라 합니다.&lt;/p&gt;

&lt;h5&gt;브로드캐스트 변수(Broadcast Variables)&lt;/h5&gt;
&lt;ul&gt;
  &lt;li&gt;스파크 잡이 실행되는 동안 클러스터 내의 모든 서버에서 공유할 수 있는 읽기전용 자원을 설정할 수 있는 변수임&lt;/li&gt;
  &lt;li&gt;예를 들어, 온라인 쇼핑몰에서 사용자 ID와 구매 정보가 담긴 10TB짜리 로그를 분석할 때, 우리가 찾고자 하는 사용자 ID목록이 담긴 세트 컬렉션 타입의 데이터를 공유 변수로 설정해 각 서버에서 로그를 처리하면서 현재 처리하려는 로그가 우리가 찾고자 하는 로그가 맞는지 확인하는 용도로 사용 가능함&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&quot;language-Python&quot;&gt;&amp;gt;&amp;gt;&amp;gt; bu = sc.broadcast([&quot;u1&quot;,&quot;u2&quot;])
#1. sparkcontext의 broadcast인자를 이용해서 broadcast변수 생성

&amp;gt;&amp;gt;&amp;gt; rdd = sc.parallelize([&quot;u1&quot;,&quot;u2&quot;,&quot;u3&quot;,&quot;u4&quot;,&quot;u5&quot;,&quot;u6&quot;],3)
&amp;gt;&amp;gt;&amp;gt; result = rdd.filter(lambda v: v in bu.value)
#2. broadcast변수 요소 접근시 value매서드를 이용

&amp;gt;&amp;gt;&amp;gt; result.collect()
['u1', 'u2']
&lt;/code&gt;&lt;/pre&gt;

&lt;h5&gt;어큐뮬레이터(Accumulators)&lt;/h5&gt;
&lt;ul&gt;
  &lt;li&gt;어큐뮬레이터는 쓰기 동작을 위한 것임&lt;/li&gt;
  &lt;li&gt;예를 들어, 온라인 쇼핑몰에서 사용자 접속 로그파일을 각 서버에서 취합해서 분석하는 경우임&lt;/li&gt;
  &lt;li&gt;또한 다수의 서버로 구성된 클러스터 환경에서 오류가 발생 했을 시, 어느 프로세스에서 오류가 난건지 확인이 필요함. 그러기 위해선 에러 정보를 한곳에 모아서 볼 수 있는 방법이 필요함.&lt;/li&gt;
  &lt;li&gt;어큐뮬레이터는 이렇게 클러스터내의 모든 서버가 공유하는 쓰기 공간을 제공해서, 각 서버에서 발생하는 이벤트나 정보를 모아두는 용도로 사용함.&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&quot;language-Python&quot;&gt;#accumulator 기본 예제
def accumulate(v, acc):
    if(len(v.split(&quot;:&quot;)) !=2):
        acc.add(1)

if __name__ =='__main__':
    conf = SparkConf()
    conf.set(&quot;spark.driver.host&quot;, &quot;127.0.0.1&quot;)
    sc = SparkContext(master=&quot;local[*]&quot;, appName=&quot;RDDOpSample&quot;, conf=conf)

    acc1 = sc.accumulator(0)
    data = [&quot;U1:Addr1&quot;, &quot;U2:Addr2&quot;, &quot;U3&quot;, &quot;U4:Addr4&quot;, &quot;U5:Addr5&quot;,&quot;U6:Addr6&quot;, &quot;U7&quot;]
    rdd = sc.parallelize(data)
    rdd.foreach(lambda v : accumulate(v, acc1))
    print(acc1.value)
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;파이썬의 경우 어큐뮬레이터의 이름 지정 불가능함&lt;/li&gt;
  &lt;li&gt;기본 제공하는 어큐뮬레이터는 sparkcontext의 accumulator 메서드를 이용하는데, 초깃값으로 정수, 실수, 복소수 타입중 하나여야 함. 따라서, 사용자 정의 데이터 타입에 대한 어큐뮬레이터는 아래와 같이 사용해야 함.&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&quot;language-Python&quot;&gt;from pyspark import AccumulatorParam
from record import Record
from builtins import isinstance

class RecordAccumulatorParam(AccumulatorParam):

    def zero(self, initialValue):
        return Record(0)

    def addInPlace(self, v1, v2):
        if(isinstance(v2, Record)):
            return v1+v2
        else:
            return v1.addAmt(v2)

def accumulate(v, acc):
    if(len(v.split(&quot;:&quot;))!=2):
        acc.add(1)

if __name__ =='__main__':
    conf = SparkConf()
    conf.set(&quot;spark.driver.host&quot;, &quot;127.0.0.1&quot;)
    sc = SparkContext(master=&quot;local[*]&quot;, appName=&quot;RDDOpSample&quot;, conf=conf)

    acc = sc.accumulator(Record(0), RecordAccumulatorParam())
    data = [&quot;U1:Addr1&quot;, &quot;U2:Addr2&quot;, &quot;U3&quot;, &quot;U4:Addr4&quot;, &quot;U5:Addr5&quot;,&quot;U6:Addr6&quot;, &quot;U7&quot;]
    rdd = sc.parallelize(data)
    rdd.foreach(lambda v: accumulate(v, acc))
    print(acc.value.amount) #&amp;gt;&amp;gt; 2
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-Python&quot;&gt;#AccumulatorParam에 대한 pyspark Document

class pyspark.AccumulatorParam
# Helper object that defines how to accumulate values of a given type.

	addInPlace(value1, value2)
	# Add two values of the accumulator’s data type, returning a new value; for efficiency, can also update value1 in place and return it.

	zero(value)
	# Provide a “zero value” for the type, compatible in dimensions with the provided value (e.g., a zero vector)
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Recordclass타입에 대한 accumulator를 작성한 것임.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;어큐뮬레이터 사용시 주의할 점 두 가지&lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;ol&gt;
          &lt;li&gt;어큐뮬레이터를 증가시키는 동작은 클러스터 내 모든 서버에서 가능하나, 어큐뮬레이터 내 데이터를 읽는 동작은 드라이버 프로그램 내에서만 가능
            &lt;ul&gt;
              &lt;li&gt;transformation 또는 action 연산 내부에서는 어큐뮬레이터를 증가시킬 수 있으나, 그 값을 참조해서 사용은 불가능하다는 것을 뜻함.&lt;/li&gt;
              &lt;li&gt;어큐뮬레이터는 액션 메서드 내에서만 수행하는 것이 좋음. 트렌스포메이션은 여러번 수행될 수 있기 때문에 집계가 잘못될 수 있음&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ol&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;이상으로 본 포스팅을 마치겠습니다.&lt;/p&gt;</content><author><name>Seonhwa Lee</name></author><category term="Spark Programming" /><category term="data-engineering" /><summary type="html">이번 포스팅은 지난 포스팅 &amp;lt;RDD, Resilient Distributed DataSet에 대하여[2] - RDD기본액션, RDD트랜스포메이션&amp;gt; 에 이어서 진행하도록 하겠습니다. 교재는 빅데이터 분석을 위한 스파크2 프로그래밍을 참고하였습니다. 2.1.6 RDD 액션 RDD트랜스포메이션 연산은 느긋한 평가(lazy evaluation) 또는 지연 계산 방식을 따릅니다. 이는 계산에 필요한 정보를 누적하다가 계산이 필요한 시점이 돼서야 계산을 수행하는 방식을 뜻합니다. 여기서 계산이 필요한 시점은 RDD 액션 메서드가 호출된 시점입니다. RDD 액션 메서드가 호출이 되어야 비로소 RDD 트랜스포메이션 연산이 수행되게 됩니다. 1. 출력 연산 1.1. first RDD 요소 중 ,첫번째 요소를 돌려줌 &amp;gt;&amp;gt;&amp;gt; rdd = sc.parallelize(range(50)) &amp;gt;&amp;gt;&amp;gt; result = rdd.first() &amp;gt;&amp;gt;&amp;gt; print(result) 0 1.2. take RDD 요소중, n번째까지 요소를 돌려줌 &amp;gt;&amp;gt;&amp;gt; rdd = sc.parallelize(range(50)) &amp;gt;&amp;gt;&amp;gt; result = rdd.take(5) &amp;gt;&amp;gt;&amp;gt; print(result) [0, 1, 2, 3, 4] 1.3. takeSample 지정된 크기의 sample을 추출해서 리스트, 배열 타입등으로 반환함 sample 메서드와의 차이점 sample 메서드는 RDD 트랜스포메이션 메서드이고, 크기를 지정할 수 없음. takeSample(withReplacement, num, seed=None) &amp;gt;&amp;gt;&amp;gt; rdd = sc.parallelize(range(100)) &amp;gt;&amp;gt;&amp;gt; result = rdd.takeSample(False, 3) &amp;gt;&amp;gt;&amp;gt; result [55, 23, 45] 1.5. countByValue RDD의 요소들이 나타낸 횟수를 맵 형태로 돌려주는 메서드 &amp;gt;&amp;gt;&amp;gt; rdd = sc.parallelize([1,1,3,2,1,2,2,1,1,4,5,3,2,3]) &amp;gt;&amp;gt;&amp;gt; result = rdd.countByValue() &amp;gt;&amp;gt;&amp;gt; print(result) defaultdict(&amp;lt;class 'int'&amp;gt;, {1: 5, 3: 3, 2: 4, 4: 1, 5: 1}) 1.6. reduce reduce 메서드 인자는 함수가 들어감. 그 함수는 교환법칙과 결합법칙이 성립하는 함수여야 함. 따라서, 메서드 인자로 받은 함수를 이용해서 하나의 요소로 합치는 메서드임. def reduce(f: (T,T)=&amp;gt;T):T 동일한 타입 2개를 입력으로 받아, 같은 타입으로 반환해주는 메서드임 실제 구현은 파티션단위로 나눠져서 처리됨. 분산 프로그램이기 때문임. &amp;gt;&amp;gt;&amp;gt; from operator import add &amp;gt;&amp;gt;&amp;gt; add(1,2) 3 &amp;gt;&amp;gt;&amp;gt; sc.parallelize([1,2,3,4,5]).reduce(add) 15 1.7. fold reduce와 동일하나, 초기값을 설정할 수 있음 def fold(zeroValue: T)(op: (T,T)=&amp;gt;T):T 그런데 유의할 점은 파티션단위로 나뉘어서 처리하기 때문에, 파티션단위로 처리할 때마다 초깃값을 이용하여 연산이 수행됨. 따라서, 더하기 연산을 할 땐 항등원인 0을, 곱셈 연산을 할 땐 항등원인 1을 초깃값으로 설정하는 것이 좋음 &amp;gt;&amp;gt;&amp;gt; rdd = sc.parallelize(range(1,11), 3) &amp;gt;&amp;gt;&amp;gt; rdd.fold(1, add) 59 #값이 55가 아니라 59가 나오는 것을 확인할 수 있음. reduce와 fold차이 #product.py class Product: def __init__(self, price): self.price = price self.count = 1 def addPriceandCount(p1, p2): p1.price += p2.price p1.count += 1 return p1 #return을 p1인 이유 --&amp;gt; 입력값과 출력값의 타입이 동일해야 함. if __name__ =='__main__': conf = SparkConf() conf.set(&quot;spark.driver.host&quot;, &quot;127.0.0.1&quot;) sc = SparkContext(master=&quot;local[*]&quot;, appName=&quot;RDDOpSample&quot;, conf=conf) rdd = sc.parallelize([Product(300), Product(200), Product(100)], 10) #reduce result = rdd.reduce(addPriceandCount) print(result.price, result.count) #fold result = rdd.fold(Product(0), addPriceandCount) print(result.price, result.count) fold의 count합을 보면 11인 것을 알 수 있음. 그 이유는 위에서 파티션 개수를 10으로 지정하였고, 파티션 단위로 연산을 초기값을 이용하여 연산을 수행하기 때문임 1.8. aggregate 입력와 출력의 타입이 다른 경우 사용 가능 def aggregateU(seqOp:(U,T)=&amp;gt;U, combOp:(U,U)=&amp;gt;U):U 크게 세가지 인자를 받음. 첫번째는 초깃값으로 fold와 동일 aggregate은 병합을 크게 2단계로 구성되는데, 1단계는 seqOp에 의해, 2단계는 combOp에 의해 진행됨 seqOp는 초깃값과 동일한 타입(U)과 RDD요소 타입(T)가 입력되어 병합 결과 초깃값과 동일한 타입인 U가 반환됨 combOp는 최종병합에서 사용됨 #rdd에 속한 요소들의 평균을 aggregate을 이용하여 구하는 예제 #record.py class Record: def __init__(self, amount, number=1): self.amount = amount self.number = number def addAmt(self, amount): return Record(self.amount + amount, self.number + 1) def __add__(self, other): amount = self.amount + other.amount number = self.number + other.number return Record(amount, number) def __str__(self): return &quot;avg:&quot; + str(self.amount / self.number) def __repr__(self): return 'Record(%r, %r)' % (self.amount, self.number) def seqop(r,v): return r.addAmt(v) if __name__ =='__main__': conf = SparkConf() conf.set(&quot;spark.driver.host&quot;, &quot;127.0.0.1&quot;) sc = SparkContext(master=&quot;local[*]&quot;, appName=&quot;RDDOpSample&quot;, conf=conf) rdd = sc.parallelize([100,80,75,90,95], 3) #aggregate result = rdd.aggregate(Record(0,0), seqop, lambda r1, r2:r1+r2) print(result) # avg:88.0 1.9. sum 모든 요소의 합을 구해주며, Double, Long등 숫자타입인 경우에만 사용가능 &amp;gt;&amp;gt;&amp;gt; rdd = sc.parallelize(range(1,11)) &amp;gt;&amp;gt;&amp;gt; rdd.sum() 55 1.10. foreach, foreachPartition foreach는 RDD의 개별요소에 전달받은 함수를 적용하는 메서드이고, foreachPartition은 파티션 단위로 적용됨 이때 인자로 받는 함수는 한개의 입력값을 가지는 함수임 이 메서드를 사용할 때 유의할 점은 드라이버 프로그램(메인 함수를 포함하고 있는 프로그램)이 작동하고 있는 서버위가 아니라 클러스터의 각 개별 서버에서 실행된다는 것임 따라서 foreach() 인자로 print함수를 전달한다는 것은 각 서버의 콘솔에 출력하라는 의미가 됨. def sideEffect(values): print(&quot;partition side effect&quot;) for v in values: print(&quot;value side effect : %s&quot; %v) if __name__ =='__main__': conf = SparkConf() conf.set(&quot;spark.driver.host&quot;, &quot;127.0.0.1&quot;) sc = SparkContext(master=&quot;local[*]&quot;, appName=&quot;RDDOpSample&quot;, conf=conf) rdd = sc.parallelize(range(1,11),3) result = rdd.foreach(lambda v:print(&quot;value side effect: %s&quot; %v)) result2 = rdd.foreachPartition(sideEffect) ### value side effect: 2 value side effect: 3 value side effect: 4 value side effect: 5 value side effect: 6 value side effect: 7 value side effect: 8 value side effect: 9 value side effect: 10 partition side effect value side effect : 7 value side effect : 8 value side effect : 9 value side effect : 10 partition side effect value side effect : 4 value side effect : 5 value side effect : 6 partition side effect value side effect : 1 value side effect : 2 value side effect : 3 ### 1.11. toDebugString 디버깅을 위한 메서드. RDD파티션 개수나 의존성 정보 등 세부 정보 알고 싶을 때 사용 &amp;gt;&amp;gt;&amp;gt; rdd = sc.parallelize(range(1,100), 10).persist().map(lambda v:(v,1)).coalesce(2) &amp;gt;&amp;gt;&amp;gt; rdd.toDebugString() b'(2) CoalescedRDD[65] at coalesce at NativeMethodAccessorImpl.java:0 []\n | PythonRDD[64] at RDD at PythonRDD.scala:53 []\n | PythonRDD[63] at RDD at PythonRDD.scala:53 []\n | ParallelCollectionRDD[62] at parallelize at PythonRDD.scala:195 []' 1.12. cache, persist, unpersist rdd액션 연산이 수행될때마다 RDD 생성 히스토리를 이용해 복구하는 단계를 수행하지만 너무나 번거로움 따라서 반복적으로 사용되는 RDD인 경우 메모리에 저장해서 사용함 cache와 persist는 rdd정보를 메모리 또는 디스크에 저장해서 다음 액션을 수행 시 다시 rdd를 생성하는 단계를 거치지 않음 unpersist는 저장된 메모리가 더이상 필요없을 시 취소할 때 사용 RDD 데이터 불러오기와 저장하기 스파크는 하둡 API기반이라서 다양한 데이터 포맷과 파일을 지원합니다. 파일 포맷 : 텍스트파일, JSON, 하둡의 시퀀스파일, csv 파일 시스템 : 로컬 파일 시스템, 하둡파일시스템(HDFS), AWS의 S3, 오픈스택의 Swift등 파일시스템이란 ? 컴퓨터에서 파일이나 자료를 쉽게 발견할 수 있도록 유지 관리하는 방법임. 즉, 저장매체에는 많은 파일이 있으므로, 이러한 파일을 관리하는 방법을 말함. 파일을 빠르게 읽기, 쓰기, 삭제 등 기본적인 기능을 원활히 수행하기 위한 목적임 1. 텍스트 파일 rdd = sc.textFile(&quot;file:////Users/ralasun/Desktop/ralasun.github.io/_posts/2020-07-11-introRL(1).md&quot;) &amp;gt;&amp;gt;&amp;gt; rdd.collect() ['---', 'layout : post', 'title: Reinforcement Learning 소개[1]', 'category: Reinforcement Learning', 'tags: cs234 reinforcement-learning david-silver sutton', '---', '', '이번 포스팅은 강화학습이 기존에 알려진 여러 방법론들과의 비교를 통한 강화학습 특성과 구성요소를 다룹니다. ...``` “file:///”처럼 ///를 세개 작성해야 함. HDFS와 구별하기 위해서임 또한 클러스터내 각 서버에서 동일한 경로를 통해 지정한 파일에 접근이 가능해야 함 sc.textFile(path, n)에서, n을 통해 파티션 개수 정할 수 있음 #save rdd.saveAsTextFile(&quot;&amp;lt;path_to_save&amp;gt;/sub1&quot;) #save(gzip) rdd.saveAsTextFile(&quot;&amp;lt;path_to_save&amp;gt;/sub1&quot;, codec) 위와 같이 rdd를 text파일로도 저장이 가능함. 두번째는 압축을 사용하는 방법임 2. 오브젝트 파일 오브젝트 직렬화 방법으로 RDD를 저장함. python의 경우, pickle형태로 저장함 텍스트파일도 가능함 &amp;gt;&amp;gt;&amp;gt; rdd = sc.parallelize(range(1,1000),3) &amp;gt;&amp;gt;&amp;gt; rdd.saveAsPickleFile(&quot;/Users/ralasun/Desktop/pythonpickle.pkl&quot;) &amp;gt;&amp;gt;&amp;gt; rdd2 = sc.pickleFile(&quot;/Users/ralasun/Desktop/pythonpickle.pkl&quot;) &amp;gt;&amp;gt;&amp;gt; rdd2.take(2) [667, 668] 3. 시퀀스 파일 시퀀스파일이란, 키와 값으로 구성된 데이터를 저장하는 이진 파일 포맷으로, 하둡에서 자주 사용됨 오브젝트 파일과의 차이점은 오브젝트 파일은 RDD에 포함된 각 데이터가 serializable 인터페이스를 구현하고 있어야 하는 것처럼 시퀀스 파일로 만들고 싶은 RDD가 하둡의 writable 인터페이스를 구현하고 있어야 함. saveAsNewAPIHadoopFile(path, outputFormatClass, keyClass=None, valueClass=None, keyConverter=None, valueConverter=None, conf=None) sequence파일로 저장하기 위해선 outputFormatClass에 문자열의 형태로 하둡내 시퀀스포맷의 풀네임을 작성해야 함. keyclass와 valueclass도 마찬가지임. 이렇게 하는 이유는 하둡의 writable 인터페이스를 구현해야 할 객체가 필요하기 때문임. 따라서 내부에서는 keyclass와 valueclass 인자에 전달한 포맷으로 rdd를 변환한 뒤 sequencefile포맷으로 저장하는 작업을 거치는 것임 path = &quot;/Users/ralasun/Desktop/ppkl&quot; &amp;gt;&amp;gt;&amp;gt; outputFormatClass = &quot;org.apache.hadoop.mapreduce.lib.output.SequenceFileOutputFormat&quot; &amp;gt;&amp;gt;&amp;gt; inputformatClass = &quot;org.apache.hadoop.mapreduce.lib.input.SequenceFileInputFormat&quot; &amp;gt;&amp;gt;&amp;gt; keyClass = &quot;org.apache.hadoop.io.Text&quot; &amp;gt;&amp;gt;&amp;gt; valueClass = &quot;org.apache.hadoop.io.IntWritable&quot; &amp;gt;&amp;gt;&amp;gt; rdd = sc.parallelize([&quot;a&quot;,&quot;b&quot;,&quot;c&quot;,&quot;b&quot;,&quot;c&quot;]) &amp;gt;&amp;gt;&amp;gt; rdd2 = rdd.map(lambda x:(x,1)) &amp;gt;&amp;gt;&amp;gt; rdd2.collect() [('a', 1), ('b', 1), ('c', 1), ('b', 1), ('c', 1)] &amp;gt;&amp;gt;&amp;gt; rdd2.saveAsNewAPIHadoopFile(path, outputFormatClass, keyClass, valueClass) rdd3 = sc.newAPIHadoopFile(path, inputformatClass, keyClass, valueClass) &amp;gt;&amp;gt;&amp;gt; for k, v in rdd3.collect(): ... print(k,v) ... a 1 b 1 b 1 c 1 c 1 클러스터 환경에서의 공유 변수 클러스터 환경에서 하나의 잡을 수행하기 위해 다수의 서버가 여러 개의 프로세스를 실행합니다. 따라서, 여러 프로세스가 공유할 수 있는 자원을 관리(읽기/쓰기 자원)할 수 있도록 스파크는 지원하는데, 브로드캐스트 변수와 어큐뮬레이터라 합니다. 브로드캐스트 변수(Broadcast Variables) 스파크 잡이 실행되는 동안 클러스터 내의 모든 서버에서 공유할 수 있는 읽기전용 자원을 설정할 수 있는 변수임 예를 들어, 온라인 쇼핑몰에서 사용자 ID와 구매 정보가 담긴 10TB짜리 로그를 분석할 때, 우리가 찾고자 하는 사용자 ID목록이 담긴 세트 컬렉션 타입의 데이터를 공유 변수로 설정해 각 서버에서 로그를 처리하면서 현재 처리하려는 로그가 우리가 찾고자 하는 로그가 맞는지 확인하는 용도로 사용 가능함 &amp;gt;&amp;gt;&amp;gt; bu = sc.broadcast([&quot;u1&quot;,&quot;u2&quot;]) #1. sparkcontext의 broadcast인자를 이용해서 broadcast변수 생성 &amp;gt;&amp;gt;&amp;gt; rdd = sc.parallelize([&quot;u1&quot;,&quot;u2&quot;,&quot;u3&quot;,&quot;u4&quot;,&quot;u5&quot;,&quot;u6&quot;],3) &amp;gt;&amp;gt;&amp;gt; result = rdd.filter(lambda v: v in bu.value) #2. broadcast변수 요소 접근시 value매서드를 이용 &amp;gt;&amp;gt;&amp;gt; result.collect() ['u1', 'u2'] 어큐뮬레이터(Accumulators) 어큐뮬레이터는 쓰기 동작을 위한 것임 예를 들어, 온라인 쇼핑몰에서 사용자 접속 로그파일을 각 서버에서 취합해서 분석하는 경우임 또한 다수의 서버로 구성된 클러스터 환경에서 오류가 발생 했을 시, 어느 프로세스에서 오류가 난건지 확인이 필요함. 그러기 위해선 에러 정보를 한곳에 모아서 볼 수 있는 방법이 필요함. 어큐뮬레이터는 이렇게 클러스터내의 모든 서버가 공유하는 쓰기 공간을 제공해서, 각 서버에서 발생하는 이벤트나 정보를 모아두는 용도로 사용함. #accumulator 기본 예제 def accumulate(v, acc): if(len(v.split(&quot;:&quot;)) !=2): acc.add(1) if __name__ =='__main__': conf = SparkConf() conf.set(&quot;spark.driver.host&quot;, &quot;127.0.0.1&quot;) sc = SparkContext(master=&quot;local[*]&quot;, appName=&quot;RDDOpSample&quot;, conf=conf) acc1 = sc.accumulator(0) data = [&quot;U1:Addr1&quot;, &quot;U2:Addr2&quot;, &quot;U3&quot;, &quot;U4:Addr4&quot;, &quot;U5:Addr5&quot;,&quot;U6:Addr6&quot;, &quot;U7&quot;] rdd = sc.parallelize(data) rdd.foreach(lambda v : accumulate(v, acc1)) print(acc1.value) 파이썬의 경우 어큐뮬레이터의 이름 지정 불가능함 기본 제공하는 어큐뮬레이터는 sparkcontext의 accumulator 메서드를 이용하는데, 초깃값으로 정수, 실수, 복소수 타입중 하나여야 함. 따라서, 사용자 정의 데이터 타입에 대한 어큐뮬레이터는 아래와 같이 사용해야 함. from pyspark import AccumulatorParam from record import Record from builtins import isinstance class RecordAccumulatorParam(AccumulatorParam): def zero(self, initialValue): return Record(0) def addInPlace(self, v1, v2): if(isinstance(v2, Record)): return v1+v2 else: return v1.addAmt(v2) def accumulate(v, acc): if(len(v.split(&quot;:&quot;))!=2): acc.add(1) if __name__ =='__main__': conf = SparkConf() conf.set(&quot;spark.driver.host&quot;, &quot;127.0.0.1&quot;) sc = SparkContext(master=&quot;local[*]&quot;, appName=&quot;RDDOpSample&quot;, conf=conf) acc = sc.accumulator(Record(0), RecordAccumulatorParam()) data = [&quot;U1:Addr1&quot;, &quot;U2:Addr2&quot;, &quot;U3&quot;, &quot;U4:Addr4&quot;, &quot;U5:Addr5&quot;,&quot;U6:Addr6&quot;, &quot;U7&quot;] rdd = sc.parallelize(data) rdd.foreach(lambda v: accumulate(v, acc)) print(acc.value.amount) #&amp;gt;&amp;gt; 2 #AccumulatorParam에 대한 pyspark Document class pyspark.AccumulatorParam # Helper object that defines how to accumulate values of a given type. addInPlace(value1, value2) # Add two values of the accumulator’s data type, returning a new value; for efficiency, can also update value1 in place and return it. zero(value) # Provide a “zero value” for the type, compatible in dimensions with the provided value (e.g., a zero vector) Recordclass타입에 대한 accumulator를 작성한 것임. 어큐뮬레이터 사용시 주의할 점 두 가지 어큐뮬레이터를 증가시키는 동작은 클러스터 내 모든 서버에서 가능하나, 어큐뮬레이터 내 데이터를 읽는 동작은 드라이버 프로그램 내에서만 가능 transformation 또는 action 연산 내부에서는 어큐뮬레이터를 증가시킬 수 있으나, 그 값을 참조해서 사용은 불가능하다는 것을 뜻함. 어큐뮬레이터는 액션 메서드 내에서만 수행하는 것이 좋음. 트렌스포메이션은 여러번 수행될 수 있기 때문에 집계가 잘못될 수 있음 이상으로 본 포스팅을 마치겠습니다.</summary></entry><entry><title type="html">RDD, Resilient Distributed Dataset에 대하여[2] - RDD기본액션, RDD트랜스포메이션</title><link href="http://localhost:4000/spark%20programming/2020/12/07/rdd(2)/" rel="alternate" type="text/html" title="RDD, Resilient Distributed Dataset에 대하여[2] - RDD기본액션, RDD트랜스포메이션" /><published>2020-12-07T00:00:00+09:00</published><updated>2020-12-07T00:00:00+09:00</updated><id>http://localhost:4000/spark%20programming/2020/12/07/rdd(2)</id><content type="html" xml:base="http://localhost:4000/spark%20programming/2020/12/07/rdd(2)/">&lt;p&gt;이번 포스팅은 지난 포스팅 &amp;lt;RDD, Resilient Distributed DataSet에 대하여[1]&amp;gt; 에 이어서 진행하도록 하겠습니다. 교재는 빅데이터 분석을 위한 스파크2 프로그래밍을 참고하였습니다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h1&gt;2. RDD&lt;/h1&gt;

&lt;h2&gt;2.1.1 들어가기에 앞서&lt;/h2&gt;
&lt;p&gt;지난 포스팅 &lt;a href=&quot;https://ralasun.github.io/spark%20programming/2020/11/20/rdd/&quot;&gt;2-1. RDD Resilient Distributed Dataset에 대하여&lt;/a&gt; 에서 다뤘습니다.&lt;/p&gt;

&lt;h2&gt;2.1.2. 스파크컨텍스트 생성&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;스파크 컨텍스트는 스파크 애플리케이션과 클러스터의 연결을 관리하는 객체임&lt;/li&gt;
  &lt;li&gt;따라서, 스파크 애플리케이션을 사용하려면 무조건 스파크 컨텍스트를 생성하고 이용해야 함&lt;/li&gt;
  &lt;li&gt;RDD 생성도 스파크컨텍스트를 이용해 생성 가능함&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&quot;language-Scala&quot;&gt;val conf = new SparkConf().setMaster(“local[*]”).setAppName(“RDDCreateSample”)
val sc = new SparkContext(conf)
&lt;/code&gt;&lt;/pre&gt;
&lt;figcaption align=&quot;center&quot;&gt;[예] scala - sparkcontext 생성&lt;/figcaption&gt;
&lt;p&gt; &lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-Python&quot;&gt; sc = SparkContext(master=“local[*], appName=“RDDCreateTest”, conf=conf)
&lt;/code&gt;&lt;/pre&gt;
&lt;figcaption align=&quot;center&quot;&gt;[예] python - spark context 생성&lt;/figcaption&gt;
&lt;p&gt; &lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;스파크 동작에 필요한 여러 설정 정보 지정 가능함&lt;/li&gt;
  &lt;li&gt;SparkConf(), conf=conf 부분에서 config을 통과시켜서 지정 가능함&lt;/li&gt;
  &lt;li&gt;지정해야 하는 정보 중에, master 정보와 appName 정보는 필수 지정 정보임
    &lt;ul&gt;
      &lt;li&gt;master 정보란 ? 스파크가 동작할 클러스터의 마스터 서버를 의미하는 것. 로컬모드에서 local, local[3], local[*]와 같이 사용. [*]는 쓰레드 개수를 의미하며, *는 사용 가능한 모든 쓰레드를 이용하겠다는 이야기임&lt;/li&gt;
      &lt;li&gt;appName은 애플리케이션 이름으로, 구분하기 위한 목적임. 스파크 UI화면에 사용됨&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;2.1.3. RDD생성&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;RDD를 생성하는 방법은 크게 2가지임&lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;&lt;li&gt; 드라이버 프로그램의 컬렉션 객체 이용&lt;/li&gt;
&lt;ul&gt;&lt;li&gt;
자바 or 파이썬 ? 리스트 이용, 스칼라 ? 시퀀스타입 이용&lt;/li&gt;
&lt;li&gt;드라이버 프로그램?&lt;br /&gt;
	- 최초로 메인 함수를 실행해 RDD등을 생성하고 각종 연산을 호출하는 프로그램&lt;br /&gt;
	- 드라이버 내의 메인 함수는 스파크 애플리케이션과 스파크 컨텍스트 객체를 생성함&lt;br /&gt;
	- 스파크 컨텍스트를 통해 RDD의 연산 정보를 DAG스케쥴러에 전달하면 스케쥴러는 이 정보를 가지고 실행 계획을 수립한 후 이를 클러스터 매니저에게 전달함&lt;br /&gt;&lt;/li&gt;

&lt;pre lang=&quot;Scala&quot;&gt;&lt;code&gt;
val rdd1 = sc.parallelize(List(&quot;a&quot;,&quot;b&quot;,&quot;c&quot;,&quot;d&quot;,&quot;e&quot;))&lt;/code&gt;&lt;/pre&gt;
&lt;figcaption align=&quot;center&quot;&gt;[예] scala - rdd 생성&lt;/figcaption&gt; 

&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;https://imgur.com/MxtJV7I.png&quot; /&gt;&lt;figcaption align=&quot;center&quot;&gt;[예] python - 드라이버의 컬렉션 객체를 이용한 RDD 생성&lt;/figcaption&gt;&lt;/p&gt;

&lt;li&gt;
문자열을 포함한 컬렉션 객체 생성 example) python : ['a','b','c','d']&lt;/li&gt;
&lt;li&gt;parallelize() 메서드를 이용해 RDD 생성&lt;br /&gt; - RDD의 파티션 수를 지정하고 싶을 때,  parallelize() 메서드의 두 번째 매개변수로 파티션 개수 지정 가능&lt;/li&gt;

&lt;pre lang=&quot;scala&quot;&gt;&lt;code&gt;
val rdd1 = sc.parallelize(1 to 1000, 10)
&lt;/code&gt;&lt;/pre&gt;&lt;/ul&gt;

&lt;li&gt;외부 데이터를 읽어서 새로운 RDD를 생성&lt;/li&gt; 
&lt;ul&gt;
&lt;li&gt;기본적으로 하둡의 다루는 모든 입출력 유형 가능&lt;/li&gt;
&lt;li&gt;내부적으로 하둡의 입출력을 사용하기 때문임&lt;/li&gt;&lt;/ul&gt;

&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;https://imgur.com/eByLARc.png&quot; /&gt;&lt;figcaption align=&quot;center&quot;&gt;[예] python - 외부데이터를 이용한 RDD 생성&lt;/figcaption&gt;&lt;/p&gt;&lt;/ol&gt;

&lt;h2&gt;2.1.4 RDD 기본 액션&lt;/h2&gt;
&lt;p&gt;기본 액션 연산의 종류에 대해 알아보도록 하겠습니다.&lt;/p&gt;

&lt;h3&gt;1. collect&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;collect은 RDD의 모든 원소를 모아서 배열로 리턴&lt;/li&gt;
  &lt;li&gt;&lt;b&gt;반환 타입이 RDD가 아닌 배열&lt;/b&gt;이므로 액션 연산&lt;/li&gt;
  &lt;li&gt;RDD에 있는 모든 요소들이 서버의 메모리에 수집됨. 즉, 대용량 데이터를 다룰 땐 조심하고, 주로 작은 용량의 데이터 디버깅용으로 사용함&lt;/li&gt;
&lt;/ul&gt;

&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;https://imgur.com/a1uu1V0.png&quot; /&gt;&lt;figcaption align=&quot;center&quot;&gt;[예] python - collect 연산&lt;/figcaption&gt;&lt;/p&gt;

&lt;h3&gt;2. count&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;RDD 구성하는 전체 요소 개수 반환&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;2.1.5 RDD 트랜스포메이션&lt;/h2&gt;
&lt;p&gt;기존 RDD를 이용해 새로운 RDD를 생성하는 연산입니다.&lt;/p&gt;

&lt;h3&gt;1. Map 연산&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;RDD에 속하는 &lt;b&gt;모든 요소에 적용&lt;/b&gt;하여 새로운 RDD 생성하는 연산&lt;/li&gt;
  &lt;li&gt;RDD의 몇몇 연산은 특정 데이터 타입에만 적용 가능함&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;1.1. map&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;b&gt;하나의 인자를 받는 함수 자체&lt;/b&gt;가 map의 인자로 들어감&lt;/li&gt;
  &lt;li&gt;이 함수를 이용해 rdd의 모든 요소에 적용한 뒤 새로운 RDD 리턴&lt;/li&gt;
  &lt;li&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;https://imgur.com/1nFR0IH.png&quot; /&gt;&lt;figcaption align=&quot;center&quot;&gt;[예] python - map 연산&lt;/figcaption&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;map()에 전달되는 함수의 입력 데이터 타입과 출력 데이터 타입이 일치할 필요 없음. 문자열을 입력받아 정수로 반환하는 함수 사용 가능&lt;/li&gt;
&lt;/ul&gt;

&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;https://imgur.com/lHGsvGD.png&quot; /&gt;&lt;figcaption align=&quot;center&quot;&gt;[예] python - map 연산, 입력/출력 일치하지 않는 경우&lt;/figcaption&gt;&lt;/p&gt;

&lt;h4&gt;1.2. flatMap&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;map()과 마찬가지로, 하나의 인자를 받는 함수가 flatMap의 인자로 들어감&lt;/li&gt;
  &lt;li&gt;map()과 차이점은 각 함수의 인자가 반환하는 값의 타입이 다름&lt;/li&gt;
  &lt;li&gt;flatMap()에 사용하는 함수 f는 반환값으로 리스트나 시퀀스 같은 여러 개의 값을 담은 (이터레이션이 가능한) 일종의 컬렉션과 유사한 타입의 값을 반환해야 함
    &lt;ul&gt;
      &lt;li&gt;map[U](f:(T) -&amp;gt; U):RDD[U]&lt;/li&gt;
      &lt;li&gt;flatMap&lt;a href=&quot;f:(T) -&amp;gt; TraversableOnce\[U\]\&quot;&gt;U&lt;/a&gt;:RDD[U])
        &lt;ul&gt;
          &lt;li&gt;TraversableOnce는 이터레이터 타입을 의미&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h5&gt;map()과 flatMap() 차이점 예시&lt;/h5&gt;
&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;https://imgur.com/hQ7sfCG.png&quot; /&gt;&lt;figcaption align=&quot;center&quot;&gt;[예] python - map 연산 vs. flatMap 연산&lt;/figcaption&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;map연산은 문자열의 배열로 구성된 RDD를 생성함&lt;/li&gt;
  &lt;li&gt;각 요소의 문자열(T)이 단어가 포함된 배열(U)이기 때문임&lt;/li&gt;
  &lt;li&gt;반면, flatMap 연산은 문자열로 구성된 RDD를 생성함&lt;/li&gt;
  &lt;li&gt;TraversableOnce(U)이기 때문에 문자열의 배열 내의 요소가 모두 끄집어져 나오는 작업을 하게 됨&lt;/li&gt;
  &lt;li&gt;flatMap()은 하나의 입력값(“apple, orange”)에 대해 출력 값이 여러개인 경우([“apple”, “orange”]) 유용하게 사용할 수 있음&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;1.3. mapPartitions&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;map과 flatMap은 하나의 인자만을 받는 함수가 인자로 들어가지만, mapPartitions은 여러 인자를 받는 함수가 인자로 들어갈 수 있음 ex) 이터레이터를 인자로 받는 함수&lt;/li&gt;
  &lt;li&gt;mapartitions은 인자로 받은 함수가 파티션 단위로 적용하여 새로운 RDD를 생성함. 반면에, map과 flatMap은 인자로 받은 함수가 요소 한개 단위로 적용됨&lt;/li&gt;
&lt;/ul&gt;

&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;https://imgur.com/bAIoEqG.png&quot; /&gt;&lt;figcaption align=&quot;center&quot;&gt;[예] python - mapPartitions&lt;/figcaption&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;sc.parallelize(range(1,11),3)으로 파티션 3개로 나뉨&lt;/li&gt;
  &lt;li&gt;DB 연결!!! 가 세번 출력된 걸 보니 파티션 단위로 처리한 것을 확인할 수 있음&lt;/li&gt;
  &lt;li&gt;increase함수는 각 파티션 내의 요소에 대한 이터레이터를 전달받아 함수 내부에서 파티션의 개별 요소에 대한 작업을 처리하고 그 결과를 다시 이터레이터 타입으로 반환&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;1.4. mapPartitionsWithIndex&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;mapPartions와 동일하고 다른 점은 인자로 전달되는 함수를 호출할 때 파티션에 속한 요소의 정보뿐만 아니라 해당 파티션의 인덱스 정보도 함께 전달해 준다는 것임&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&quot;language-Python&quot;&gt;def IncreaseWithIndex(idx, numbers):
	for i in numbers:
		if(idx == 1):
			yield i+1
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;mapPartitionswithIndex에 인자로 들어갈 함수는 위와 같이 인덱스 정보도 같이 들어감&lt;/li&gt;
&lt;/ul&gt;

&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;https://imgur.com/wO8pOFo.png&quot; /&gt;&lt;figcaption align=&quot;center&quot;&gt;[예] python - mapPartitionsWithIndex&lt;/figcaption&gt;&lt;/p&gt;

&lt;h4&gt;1.5. mapValues&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;RDD의 모든 요소들이 키와 값의 쌍을 이루고 있는 경우에만 사용 가능한 메서드이며, 인자로 전달받은 함수를 “값”에 해당하는 요소에만 적용하고 그 결과로 구성된 새로운 RDD를 생성&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&quot;language-Python&quot;&gt;rdd1 = sc.parallelize([&quot;a&quot;,&quot;b&quot;,&quot;c&quot;]).map(lambda v:(v,1)) //(키,값)으로 구성된 rdd생성
rdd2 = rdd1.mapValues(lambda i:i+1)
print(rdd2.collect())
&lt;/code&gt;&lt;/pre&gt;

&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;https://imgur.com/aFNZfuf.png&quot; /&gt;&lt;figcaption align=&quot;center&quot;&gt;[예] python - mapValues&lt;/figcaption&gt;&lt;/p&gt;

&lt;h4&gt;1.6. flatMapValues&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;MapValues 처럼 키에 해당되는 값에 함수를 적용하나 flatMap() 연산을 적용할 수 있음&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&quot;language-Python&quot;&gt;rdd1 = sc.parallelize([(1, &quot;a,b&quot;),(2, &quot;a,c&quot;),(3, &quot;d,e&quot;)])
rdd2 = rdd1.flatMapValues(lambda v:v.split(','))
rdd2.collect()
&lt;/code&gt;&lt;/pre&gt;

&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;https://imgur.com/5J8kSE1.png&quot; /&gt;&lt;figcaption align=&quot;center&quot;&gt;[예] python - flatMapValues&lt;/figcaption&gt;&lt;/p&gt;

&lt;h3&gt;2. 그룹화 연산&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;특정 조건에 따라 요소를 그룹화하거나 특정 함수 적용&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;2.1. zip&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;두 개의 서로 다른 RDD를 각 요소의 인덱스에 따라 첫번째 RDD의 ‘인덱스’번째를 키로, 두번째 RDD의 ‘인덱스’번째를 값으로 하는 순서쌍을 생성&lt;/li&gt;
  &lt;li&gt;두 개 RDD는 같은 개수의 파티션과 각 파티션 당 요소개수가 동일해야 함&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&quot;language-Python&quot;&gt;rdd1 = sc.parallelize([&quot;a&quot;,&quot;b&quot;,&quot;c&quot;])
rdd2 = sc.parallelize([1,2,3])
rdd3 = rdd1.zip(rdd2)
rdd3.collect()
&amp;gt;&amp;gt;&amp;gt; [('a', 1), ('b', 2), ('c', 3)]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-Python&quot;&gt;rdd1 = sc.parallelize(range(1,10),3)
rdd2 = sc.parallelize(range(11,20),3)
rdd3 = rdd1.zip(rdd2)
rdd3.collect()
&amp;gt;&amp;gt;&amp;gt; [(1, 11), (2, 12), (3, 13), (4, 14), (5, 15), (6, 16), (7, 17), (8, 18), (9, 19)]
&lt;/code&gt;&lt;/pre&gt;

&lt;h4&gt;2.2. zipPartitions&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;zip()과 다르게 파티션의 개수만 동일하면 됨&lt;/li&gt;
  &lt;li&gt;zipPartitions()은 최대 4개 RDD까지 인자로 넣을 수 있음&lt;/li&gt;
  &lt;li&gt;파이썬 사용불가!!&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;2.3. groupBy&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;RDD의 요소를 &lt;b&gt;일정한 기준&lt;/b&gt;에 따라 그룹을 나누고, 각 그룹으로 구성된 새로운 RDD를 생성함&lt;/li&gt;
  &lt;li&gt;각 그룹은 키와 각 키에 속한 요소의 시퀀스(iterator)로 구성됨&lt;/li&gt;
  &lt;li&gt;인자로 전달하는 함수가 각 그룹의 키를 결정하는 역할을 담당함&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&quot;language-Python&quot;&gt;&amp;gt;&amp;gt;&amp;gt; rdd1 = sc.parallelize(range(1,11))
&amp;gt;&amp;gt;&amp;gt; rdd2 = rdd1.groupBy(lambda v: &quot;even&quot; if v%2==0 else &quot;odd&quot;) 
/// groupBy에 인자로 전달된 함수에 의해 키(even/odd) 결정

print(rdd2.collect())
&amp;gt;&amp;gt;&amp;gt; [('even', &amp;lt;pyspark.resultiterable.ResultIterable object at 0x7fbc3f090e80&amp;gt;), ('odd', &amp;lt;pyspark.resultiterable.ResultIterable object at 0x7fbc3f090470&amp;gt;)]
/// 각 키에 해당하는 값은 iterator임을 확인할 수 있음

&amp;gt;&amp;gt;&amp;gt; for x in rdd2.collect():
...     print(x[0], list(x[1]))
... 
even [2, 4, 6, 8, 10]
odd [1, 3, 5, 7, 9]
&lt;/code&gt;&lt;/pre&gt;

&lt;h4&gt;2.3. groupByKey&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;이미 키와 값의 쌍으로 구성된 RDD에만 적용 가능함&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&quot;language-Python&quot;&gt;&amp;gt;&amp;gt;&amp;gt; rdd1 = sc.parallelize([&quot;a&quot;,&quot;b&quot;,&quot;c&quot;,&quot;b&quot;,&quot;c&quot;]).map(lambda v:(v,1))
&amp;gt;&amp;gt;&amp;gt; rdd1.collect()
[('a', 1), ('b', 1), ('c', 1), ('b', 1), ('c', 1)]
/// (키,값) 쌍으로 구성된 RDD 생성

&amp;gt;&amp;gt;&amp;gt; rdd2 = rdd1.groupByKey()
&amp;gt;&amp;gt;&amp;gt; rdd2.collect()
[('b', &amp;lt;pyspark.resultiterable.ResultIterable object at 0x7fbc3f0ab6a0&amp;gt;), ('c', &amp;lt;pyspark.resultiterable.ResultIterable object at 0x7fbc3f0ab6d8&amp;gt;), ('a', &amp;lt;pyspark.resultiterable.ResultIterable object at 0x7fbc3f0ab0b8&amp;gt;)]
/// 키에 따라 그룹화함. 그 결과 키에 해당하는 시퀀스 생성

&amp;gt;&amp;gt;&amp;gt; for x in rdd2.collect():
...     print(x[0], list(x[1]))
... 
b [1, 1]
c [1, 1]
a [1]
&lt;/code&gt;&lt;/pre&gt;

&lt;h4&gt;2.4. cogroup&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;이미 키와 값의 쌍으로 구성된 RDD에만 적용 가능함&lt;/li&gt;
  &lt;li&gt;여러 개의 RDD를 인자로 받음(최대 3개)&lt;/li&gt;
  &lt;li&gt;여러 RDD에서 동일한 키에 해당하는 요소들로 구성된 시퀀스를 만든 후, (키, 시퀀스)의 튜플을 구성. 그 튜플들로 구성된 새로운 RDD를 생성함&lt;/li&gt;
  &lt;li&gt;Tuple(키, Tuple(rdd1요소들의 집합, rdd2요소들의 집합, …))&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&quot;language-Python&quot;&gt;&amp;gt;&amp;gt;&amp;gt; rdd1 = sc.parallelize([(&quot;k1&quot;,&quot;v1&quot;),(&quot;k2&quot;,&quot;v2&quot;),(&quot;k1&quot;,&quot;v3&quot;)])
&amp;gt;&amp;gt;&amp;gt; rdd2 = sc.parallelize([(&quot;k1&quot;,&quot;v4&quot;)])
&amp;gt;&amp;gt;&amp;gt; rdd1.collect()
[('k1', 'v1'), ('k2', 'v2'), ('k1', 'v3')]
&amp;gt;&amp;gt;&amp;gt; rdd2.collect()
[('k1', 'v4')]
/// (키, 값)쌍으로 구성된 RDD 2개 생성

&amp;gt;&amp;gt;&amp;gt; rdd3 = rdd1.cogroup(rdd2)
&amp;gt;&amp;gt;&amp;gt; rdd3.collect()
[('k1', (&amp;lt;pyspark.resultiterable.ResultIterable object at 0x7fbc3f0b2fd0&amp;gt;, &amp;lt;pyspark.resultiterable.ResultIterable object at 0x7fbc3f00a828&amp;gt;)), ('k2', (&amp;lt;pyspark.resultiterable.ResultIterable object at 0x7fbc3f00ac18&amp;gt;, &amp;lt;pyspark.resultiterable.ResultIterable object at 0x7fbc3f00a5f8&amp;gt;))]
///k1 키에 대해 rdd1의 v1과 v3요소를 묶고, rdd2의 v4요소를 묶어서 튜플로 구성

&amp;gt;&amp;gt;&amp;gt; for x in rdd3.collect():
...     print(x[0], list(x[1][0]), list(x[1][1]))
... 
k1 ['v1', 'v3'] ['v4']
k2 ['v2'] []
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;3. 집합 연산&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;RDD에 포함된 요소를 하나의 집합으로 간주하여 집합 연산을 수행(합/교집합)&lt;/li&gt;
  &lt;li&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;3.1. distinct&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;RDD의 원소에서 중복을 제외한 요소로만 새로운 RDD 구성&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&quot;language-Python&quot;&gt;&amp;gt;&amp;gt;&amp;gt; rdd = sc.parallelize([1,2,3,1,2,3,1,2,3])
&amp;gt;&amp;gt;&amp;gt; rdd2 = rdd.distinct()
&amp;gt;&amp;gt;&amp;gt; rdd2.collect()
[1, 2, 3]
&lt;/code&gt;&lt;/pre&gt;

&lt;h4&gt;3.1. cartesian&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;두 RDD요소의 카테시안곱을 구하고 그 결과를 요소로 하는 새로운 RDD구성&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&quot;language-Python&quot;&gt;&amp;gt;&amp;gt;&amp;gt; rdd1 = sc.parallelize([1,2,3])
&amp;gt;&amp;gt;&amp;gt; rdd2 = sc.parallelize(['a','b','c'])
&amp;gt;&amp;gt;&amp;gt; rdd3 = rdd1.cartesian(rdd2)
&amp;gt;&amp;gt;&amp;gt; rdd3.collect()
[(1, 'a'), (1, 'b'), (1, 'c'), (2, 'a'), (2, 'b'), (2, 'c'), (3, 'a'), (3, 'b'), (3, 'c')]
&lt;/code&gt;&lt;/pre&gt;

&lt;h4&gt;3.2. subtract&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;rdd1.subtract(rdd2) : (rdd1의 요소집합 - rdd2의 요소집합)의 차집합&lt;/li&gt;
  &lt;li&gt;rdd2.subtract(rdd1) : (rdd2의 요소집합 - rdd1의 요소집합)의 차집합&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&quot;language-Python&quot;&gt;&amp;gt;&amp;gt;&amp;gt; rdd1 = sc.parallelize([&quot;a&quot;, &quot;b&quot;,&quot;c&quot;,&quot;d&quot;,&quot;e&quot;])
&amp;gt;&amp;gt;&amp;gt; rdd2 = sc.parallelize([&quot;d&quot;,&quot;e&quot;])
&amp;gt;&amp;gt;&amp;gt; rdd3 = rdd1.subtract(rdd2)
&amp;gt;&amp;gt;&amp;gt; rdd3.collect()
['a', 'b', 'c']  
&lt;/code&gt;&lt;/pre&gt;

&lt;h4&gt;3.2. union&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;두 RDD요소의 합집합&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&quot;language-Python&quot;&gt;&amp;gt;&amp;gt;&amp;gt; rdd1 = sc.parallelize([&quot;a&quot;, &quot;b&quot;,&quot;c&quot;,&quot;d&quot;,&quot;e&quot;])
&amp;gt;&amp;gt;&amp;gt; rdd2 = sc.parallelize([&quot;d&quot;,&quot;e&quot;])
&amp;gt;&amp;gt;&amp;gt; rdd3 = rdd1.union(rdd2)
&amp;gt;&amp;gt;&amp;gt; rdd3.collect()
['a', 'b', 'c', 'd', 'e', 'd', 'e']
&lt;/code&gt;&lt;/pre&gt;

&lt;h4&gt;3.3. intersection&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;두 RDD요소의 교집합으로 중복되지 않은 요소로 구성&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&quot;language-Python&quot;&gt;&amp;gt;&amp;gt;&amp;gt; rdd1 = sc.parallelize([&quot;a&quot;,&quot;a&quot;,&quot;b&quot;,&quot;c&quot;])
&amp;gt;&amp;gt;&amp;gt; rdd2 = sc.parallelize([&quot;a&quot;,&quot;a&quot;,&quot;c&quot;,&quot;c&quot;])
&amp;gt;&amp;gt;&amp;gt; rdd3 = rdd1.intersection(rdd2)
&amp;gt;&amp;gt;&amp;gt; rdd3.collect()
['a', 'c']
&lt;/code&gt;&lt;/pre&gt;

&lt;h4&gt;3.4. join&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;RDD의 구성요소가 키와 값의 쌍으로 구성된 경우에 사용할 수 있는 메서드&lt;/li&gt;
  &lt;li&gt;공통된 키에 대해서만 join수행&lt;/li&gt;
  &lt;li&gt;join 수행 결과 Tuple(키, Tuple(첫번째 RDD요소, 두번쨰 RDD요소))&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&quot;language-Python&quot;&gt;&amp;gt;&amp;gt;&amp;gt; rdd1 = sc.parallelize([&quot;a&quot;, &quot;b&quot;,&quot;c&quot;,&quot;d&quot;,&quot;e&quot;]).map(lambda v : (v,1))
&amp;gt;&amp;gt;&amp;gt; rdd1.collect()
[('a', 1), ('b', 1), ('c', 1), ('d', 1), ('e', 1)]
&amp;gt;&amp;gt;&amp;gt; rdd2 = sc.parallelize([&quot;b&quot;,&quot;c&quot;]).map(lambda v:(v,2))
&amp;gt;&amp;gt;&amp;gt; rdd2.collect()
[('b', 2), ('c', 2)]
&amp;gt;&amp;gt;&amp;gt; rdd3 = rdd1.join(rdd2)
&amp;gt;&amp;gt;&amp;gt; rdd3.collect()
[('b', (1, 2)), ('c', (1, 2))]
&lt;/code&gt;&lt;/pre&gt;

&lt;h4&gt;3.5. leftOuterJoin, rightOuterJoin&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;키와 값의 쌍으로 구성된 RDD에 사용가능&lt;/li&gt;
  &lt;li&gt;leftjoin, rightjoin을 수행&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&quot;language-Python&quot;&gt;&amp;gt;&amp;gt;&amp;gt; rdd1 = sc.parallelize([&quot;a&quot;, &quot;b&quot;,&quot;c&quot;,&quot;d&quot;,&quot;e&quot;]).map(lambda v : (v,1))
&amp;gt;&amp;gt;&amp;gt; rdd2 = sc.parallelize([&quot;b&quot;,&quot;c&quot;]).map(lambda v:(v,2))
&amp;gt;&amp;gt;&amp;gt; rdd3 = rdd1.leftOuterJoin(rdd2)
&amp;gt;&amp;gt;&amp;gt; rdd3.collect()
[('a', (1, None)), ('e', (1, None)), ('b', (1, 2)), ('c', (1, 2)), ('d', (1, None))]
///rdd2에는 a,d,e 키가 없기 때문에 해당 키에 대한 튜플 요소는 (rdd1의 요소, None)으로 구성됨

&amp;gt;&amp;gt;&amp;gt; rdd4 = rdd1.rightOuterJoin(rdd2)
&amp;gt;&amp;gt;&amp;gt; rdd4.collect()
[('b', (1, 2)), ('c', (1, 2))]
&lt;/code&gt;&lt;/pre&gt;

&lt;h4&gt;3.6. subtractByKey&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;키와 값의 쌍으로 구성된 RDD에 사용가능&lt;/li&gt;
  &lt;li&gt;rdd1의 요소 중에서 rdd2와 겹치지 않는 키로 구성된 새로운 RDD 생성&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&quot;language-Python&quot;&gt;&amp;gt;&amp;gt;&amp;gt; rdd1 = sc.parallelize([&quot;a&quot;,&quot;b&quot;]).map(lambda v:(v,1))
&amp;gt;&amp;gt;&amp;gt; rdd2 = sc.parallelize([&quot;b&quot;]).map(lambda v:(v,1))
&amp;gt;&amp;gt;&amp;gt; rdd3 = rdd1.subtractByKey(rdd2)
&amp;gt;&amp;gt;&amp;gt; rdd3.collect()
[('a', 1)]
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;4. 집계와 관련된 연산들&lt;/h3&gt;

&lt;h4&gt;4.1 reduceByKey&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;키와 값의 쌍으로 구성된 RDD에서 사용 가능&lt;/li&gt;
  &lt;li&gt;RDD 내의 동일한 키를 하나로 병합해 (키,값) 쌍으로 구성된 새로운 RDD 생성&lt;/li&gt;
  &lt;li&gt;함수를 인자로 받음.&lt;/li&gt;
  &lt;li&gt;왜냐하면, 파티션 별로 연산을 수행했을 때, 항상 같은 순서로 연산이 수행되는 것을 보장 못하므로, 함수가 수행하는 연산은 교환법칙과 결합법칙이 성립해야 함&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&quot;language-Python&quot;&gt;&amp;gt;&amp;gt;&amp;gt; rdd = sc.parallelize(['a','b','b']).map(lambda v:(v,1))
&amp;gt;&amp;gt;&amp;gt; rdd.collect()
[('a', 1), ('b', 1), ('b', 1)]
&amp;gt;&amp;gt;&amp;gt; rdd2 = rdd.reduceByKey(lambda v1, v2:(v1+v2))
&amp;gt;&amp;gt;&amp;gt; rdd2.collect()
[('b', 2), ('a', 1)]
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;&lt;b&gt;(키,값)쌍으로 하는 RDD를 인자로 받는 트랜스포메이션 메서드&lt;/b&gt;&lt;br /&gt;
- 데이터 처리 과정에서 사용할 파티셔너와 파티션 개수를 지정할 수 있는 옵션이 있음
- 자체적으로 작성한 파티셔너나 파티션 개수를 통해 병렬 처리 수준 변경 가능
&lt;/blockquote&gt;

&lt;h4&gt;4.2 foldByKey&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;키와 값으로 구성된 RDD에 사용 가능&lt;/li&gt;
  &lt;li&gt;reduceByKey()와 유사하지만, 병합 연산의 초기값을 인자로 전달할 수 있음&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&quot;language-Python&quot;&gt;rdd = sc.parallelize([&quot;a&quot;,&quot;b&quot;,&quot;b&quot;]).map(lambda v:(v,1))
&amp;gt;&amp;gt;&amp;gt; rdd2 = rdd.foldByKey(0, lambda v1,v2:v1+v2)
&amp;gt;&amp;gt;&amp;gt; rdd2.collect()
[('b', 2), ('a', 1)]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;My view) 개인적으로, foldByKey와 reduceByKey의 차이가 잘 이해가 되지 않아, 초기값과 문자열 병합으로 pyspark를 실행해 보았습니다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-Python&quot;&gt;&amp;gt;&amp;gt;&amp;gt; rdd = sc.parallelize([&quot;a&quot;,&quot;b&quot;,&quot;b&quot;]).map(lambda v:(v,1))

///초기값을 1로 준 경우
&amp;gt;&amp;gt;&amp;gt; rdd2 = rdd.foldByKey(1, lambda v1,v2:v1+v2)

///초기값을 0으로 준 경우와 다른 결과임
&amp;gt;&amp;gt;&amp;gt; rdd2.collect()
[('b', 4), ('a', 2)]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-Python&quot;&gt;&amp;gt;&amp;gt;&amp;gt; rdd = sc.parallelize([&quot;a&quot;,&quot;b&quot;,&quot;b&quot;]).map(lambda v:(v,'c'))

///초기값을 t로 준 경우
&amp;gt;&amp;gt;&amp;gt; rdd2 = rdd.foldByKey('t', lambda v1,v2:v1+v2)
&amp;gt;&amp;gt;&amp;gt; rdd2.collect()
[('b', 'tctc'), ('a', 'tc')]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;위의 두 연산를 보니, foldByKey는 초기값 처리를 아래와 같이 진행하는 것 같습니다. 예를 들어, 초기 rdd가 [(‘a’, 1), (‘b’, 1), (‘b’, 1)] 라 한다면, foldByKey는 키 ‘a’와 ‘b’에 대해 각각 초기값을 가지고 병합연산을 수행합니다. 이 때 먼저, 초기값을 가지고 병합 연산을 수행합니다. 키 ‘a’인 경우, 초기값 1라면, v1=1, v2=1(키 ‘a’에 대응되는 값)이 병합연산을 수행해 (‘a’,2)가 됩니다. 그 다음 reducebykey와 같은 연산을 수행하나, 키 ‘a’는 초기 rdd에 하나밖에 없기 때문에, v1=2, v2=None이 되어 최종 foldByKey연산 결과는 키 ‘a’에 대해서 2값을 가지게 됩니다.&lt;/p&gt;

&lt;p&gt;‘b’키 같은 경우도 마찬가지입니다. 먼저 초기값을 가지고 연산을 수행합니다. v1=1(초기값), v2=1(b에 대응되는 값)가 병합연산을 수행해 v1=2가 됩니다. ‘b’키는 두개가 있으므로, 나머지 ‘b’키에 대해 v1=1, v2=1가 병합연산을 거쳐 v2=2가 됩니다. 그다음 두개의 ‘b’키에 대해 다시 병합연산이 수행되어 v1=2, v2=2가 되어 최종적으로 ‘b’키에 대해 4의 값이 생성됩니다.&lt;/p&gt;

&lt;h4&gt;4.3 combineByKey&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;키와 값인 RDD에 사용 가능&lt;/li&gt;
  &lt;li&gt;foldByKey와 reduceByKey와 유사함. 차이점은 병합연산 수행 결과 값의 타입이 바뀔 수 있음&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&quot;language-Scala&quot;&gt;def reduceByKey(func:(V,V)=&amp;gt;V):RDD[K,V]
def foldByKey(zeroValue: V)(func:(V,V)=&amp;gt;V):RDD[K,V]
def combineByKey[C](createCombiner:(V)=&amp;gt;C, mergeValue:(C,V)=&amp;gt;V, mergeCombiners:(C,C)=&amp;gt;C):RDD[K,C]
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;combineByKey는 reduceByKey와 foldByKey와 다르게 타입이 C로 바뀌어 있음&lt;/li&gt;
  &lt;li&gt;위의 combineByKey를 보면 메서드가 총 createCombiner, mergeValue, mergeCombiners 세 개임을 알 수 있음&lt;/li&gt;
  &lt;li&gt;아래는 combineByKey에서 자주 등장하는 평균구하기 예시임&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&quot;language-Python&quot;&gt;#record.py 에 따로 저장해야 함. 
#아니면, _pickle.PicklingError: Can't pickle &amp;lt;class '__main__.Record'&amp;gt;: attribute lookup Record on __main__ failed 에러 발생.

class Record:

    def __init__(self, amount, number=1):
        self.amount = amount
        self.number = number
        
    def addAmt(self, amount):
        return Record(self.amount + amount, self.number + 1)
    
    def __add__(self, other):
        amount = self.amount + other.amount
        number = self.number + other.number 
        return Record(amount, number)
        
    def __str__(self):
        return &quot;avg:&quot; + str(self.amount / self.number)

    def __repr__(self):
        return 'Record(%r, %r)' % (self.amount, self.number)
&lt;/code&gt;&lt;/pre&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#createCombiner, mergeValue, mergeCombiners 정의
def createCombiner(v):
    return Record(v)

def mergeValue(c, v):
    return c.addAmt(v)

def mergeCombiners(c1, c2):
    return c1 + c2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;pre&gt;&lt;code class=&quot;language-Python&quot;&gt;#combineByKey 실행
rdd = sc.parallelize([(&quot;Math&quot;, 100), (&quot;Eng&quot;, 80), (&quot;Math&quot;, 50), (&quot;Eng&quot;, 70), (&quot;Eng&quot;, 90)])
rdd2 = rdd.combineByKey(lambda v:createCombiner(v), lambda c,v:mergeValue(c,v), lambda c1,c2:mergeCombiners(c1,c2))
print('Math', rdd2.collectAsMap()['Math'], 'Eng', rdd2.collectAsMap()['Eng'])
&amp;gt;&amp;gt;&amp;gt; Math avg:75.0 Eng avg:80.0
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;createCombiner()
    &lt;ul&gt;
      &lt;li&gt;값을 병합하기 위한 컴바이너. 컴바이너는 병합을 수행하고 컴바이너 타입으로 내부에 저장함. 위의 예로는 createCombiner()는 Record클래스 타입으로 저장됨. 즉, rdd의 각 키에 해당되는 값이 record클래스 타입으로 변환되어 저장됨.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;mergeValue()
    &lt;ul&gt;
      &lt;li&gt;키에 대한 컴바이너가 존재한다면, 컴바이너를 이용해 값을 병합함.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;My View) 위의 예 같은 경우, rdd요소 순서대로 combineByKey가 작동한다면 먼저 (“Math”, 100)에 대해 Combiner가 생성되어, math 키에 대한 Record(100)이 생성됩니다.&lt;/p&gt;

&lt;p&gt;그 다음 (“Eng”, 70)에 대해 작동합니다. “Eng”키는 기존에 없던 키이기 때문에 새로 Combiner인 Record(70)이 생성됩니다.&lt;/p&gt;

&lt;p&gt;그 다음 (“Math”, 50)인데, 기존 Math키에 대한 컴바이너가 존재하기 때문에, 기존 Math 키 컴바이너를 이용하여 병합합니다. 즉, Record(100).addAmt(50)이 발생합니다. 이렇게 Math키와 Eng키에 대해 모든 요소에 대해 병합을 실시하게 됩니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;mergeCombiners()
    &lt;ul&gt;
      &lt;li&gt;createCombiner()와 mergeValue()는 파티션별로 수행됨. 그다음 모든 파티션에 생성된 combiner를 병합하는 과정을 mergeCombiners()를 통해 수행하는 것임. 이를 통해 최종결과가 발생함&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;4.4 aggregateByKey&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;키와 값의 RDD에서 사용 가능&lt;/li&gt;
  &lt;li&gt;초깃값을 설정할 수 있는 점을 제외하면 comebineByKey와 동일&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&quot;language-Scala&quot;&gt;def combineByKey[C](createCombiner:(V)=&amp;gt;C, mergeValue:(C,V)=&amp;gt;V, mergeCombiners:(C,C)=&amp;gt;C):RDD[(K,C)]
def aggregateByKey[U](zeroValue: U)(seqOp:(U,V)=&amp;gt;U, combOp:(U,U)=&amp;gt;U):RDD[(K,U)]
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;aggregateByKey에서 seqOp는 mergeValue역할을, comOp는 mergeCombiner역할을 함.&lt;/li&gt;
  &lt;li&gt;combineByKey에서 createCombiner로 병합을 위한 초깃값을 구하지만 aggregateByKey는 함수를 이용해 초깃값을 설정하는 대신 바로 ‘값’으로 초기값을 설정함&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&quot;language-Python&quot;&gt;rdd = sc.parallelize([(&quot;Math&quot;, 100), (&quot;Eng&quot;, 80), (&quot;Math&quot;, 50), (&quot;Eng&quot;, 70), (&quot;Eng&quot;, 90)])
rdd2 = rdd.aggregateByKey(Record(0,0), lambda c,v:mergeValue(c,v), lambda c1,c2:mergeCombiners(c1,c2))
print('Math :', rdd2.collectAsMap()['Math'], 'Eng :', rdd2.collectAsMap()['Eng'])
&amp;gt;&amp;gt;&amp;gt;Math : avg:75.0 Eng : avg:80.0
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;5. pipe 및 파티션과 관련된 연산&lt;/h3&gt;

&lt;h4&gt;5.1 pipe&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;pipe를 이용하면 데이터를 처리하는 과정에서 외부 프로세스를 활용할 수 있음&lt;/li&gt;
  &lt;li&gt;세 개의 숫자로 구성된 문자열을 리눅스의 cut 유틸리티를 이용해 분리한 뒤첫번째와 세번재 숫자를 뽑아내는 예제&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&quot;language-Python&quot;&gt;&amp;gt;&amp;gt;&amp;gt; rdd = sc.parallelize([&quot;1,2,3&quot;, &quot;4,5,6&quot;, &quot;7,8,9&quot;])
&amp;gt;&amp;gt;&amp;gt; rdd2 = rdd.pipe(&quot;cut -f 1,3 -d ,&quot;)
&amp;gt;&amp;gt;&amp;gt; rdd2.collect()
['1,3', '4,6', '7,9']
&lt;/code&gt;&lt;/pre&gt;

&lt;h4&gt;5.2. coalesce와 repartition&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;현재 RDD에 사용된 파티션 개수를 조정함&lt;/li&gt;
  &lt;li&gt;coalesce는 파티션 개수를 줄이기만 되고, repartition은 늘리는 것과 줄이는 것 둘 다 가능&lt;/li&gt;
  &lt;li&gt;coalesce가 따로 있는 이유는 처리 방식에 따른 성능 차이 때문임
    &lt;ul&gt;
      &lt;li&gt;repartition은 셔플을 기반으로 동작을 수행하는 데 반해, coalesce는 강제로 셔플을 수행하라는 옵션을 지정하지 않는 한 셔플을 사용하지 않음.&lt;/li&gt;
      &lt;li&gt;따라서 필터링 등으로 인해 데이터 개수가 줄어든 경우 coalesce을 사용하는 것이 좋음&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&quot;language-Python&quot;&gt;&amp;gt;&amp;gt;&amp;gt; rdd = sc.parallelize(list(range(1,11)),10)
&amp;gt;&amp;gt;&amp;gt; rdd2 = rdd.coalesce(5)
&amp;gt;&amp;gt;&amp;gt; rdd3 = rdd2.repartition(10)
&amp;gt;&amp;gt;&amp;gt; print(&quot;partition size : %d&quot; 
&amp;gt;&amp;gt;&amp;gt; print(&quot;partition size : %d&quot; %rdd2.getNumPartitions())
partition size : 5
&amp;gt;&amp;gt;&amp;gt; print(&quot;partition size : %d&quot; %rdd3.getNumPartitions())
partition size : 10
&lt;/code&gt;&lt;/pre&gt;

&lt;h4&gt;5.3. repartitionAndSortWithinPartitions&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;키와 값으로 구성된 RDD에서 사용 가능&lt;/li&gt;
  &lt;li&gt;RDD를 구성하는 모든 데이터를 특정 기준에 따라 여러 개의 파티션으로 분리하고 각 파티션 단위로 정렬을 수행한 뒤 새로운 RDD를 생성해 주는 메서드임&lt;/li&gt;
  &lt;li&gt;각 데이터가 어떤 파티션에 속할지 결정하기 위한 파티셔너(org.apache.spark.Partitioner)설정
    &lt;ul&gt;
      &lt;li&gt;키 값을 이용하여 어떤 파티션에 속할지 결정할 뿐만 아니라 키 값을 이용한 정렬도 수행함&lt;/li&gt;
      &lt;li&gt;파티션 재할당을 위해 셔플을 수행하는 단계에서 정렬도 함께 다루게 되어 파티션과 정렬을 각각 따로하는 것에 비해 더 높은 성능을 발휘할 수 있음&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;10개의 무작위 숫자를 위 메서드를 이용해 3개의 파티션으로 분리해 보는 예제&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&quot;language-Python&quot;&gt;&amp;gt;&amp;gt;&amp;gt; data = [random.randrange(1,100) for i in range(0,10)]
&amp;gt;&amp;gt;&amp;gt; rdd1 = sc.parallelize(data).map(lambda v:(v,&quot;-&quot;))
&amp;gt;&amp;gt;&amp;gt; rdd2 = rdd1.repartitionAndSortWithinPartitions(3, lambda x:x)
&amp;gt;&amp;gt;&amp;gt; rdd2.foreachPartition(lambda values:print(list(values)))
[(50, '-')]
[(16, '-'), (52, '-'), (61, '-'), (67, '-')]
[(6, '-'), (12, '-'), (48, '-'), (51, '-'), (87, '-')]
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;pyspark에서 repartitionAndSortWithinPartitions에서 default 파티셔너는 hash 파티셔너로 되어있음&lt;/li&gt;
  &lt;li&gt;foreachPartition은 partition단위로 특정함수를 실행해주는 메서드임. 위의 예제에서는 파티션단위로 파티션에 속해있는 값을 프린트해주는 함수를 실행했음&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;5.4. partitionBy&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;키와 값으로 구성된 RDD에서 사용가능&lt;/li&gt;
  &lt;li&gt;파티션을 변경하고 싶을 때 사용가능&lt;/li&gt;
  &lt;li&gt;기본적으로, hashpartitioner와 rangepartitioner가 있음&lt;/li&gt;
  &lt;li&gt;org.apache.spark.partitioner 클래스를 상속해서 파티셔너를 커스터마이징도 가능&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&quot;language-Python&quot;&gt;&amp;gt;&amp;gt;&amp;gt; rdd1 = sc.parallelize([(&quot;apple&quot;,1),(&quot;mouse&quot;,1),(&quot;monitor&quot;,1)],5)
&amp;gt;&amp;gt;&amp;gt; rdd1.collect()
[('apple', 1), ('mouse', 1), ('monitor', 1)]
&amp;gt;&amp;gt;&amp;gt; rdd2 = rdd1.partitionBy(3)
&amp;gt;&amp;gt;&amp;gt; print(&quot;rdd1: %d, rdd2: %d&quot; %(rdd1.getNumPartitions(), rdd2.getNumPartitions()))
rdd1: 5, rdd2: 3
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;위의 예제에서 partitionby에 의해 파티션 갯수가 변경된 것을 확인할 수 있음&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;6. 필터와 정렬 연산&lt;/h3&gt;
&lt;p&gt;특정 조건을 만족하는 요소만 선택하거나, 각 요소를 정해진 기준에 따라 정렬함&lt;/p&gt;

&lt;h4&gt;6.1. filter&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;RDD의 각각 요소에 조건에 따라 True/False로 가려내는 함수를 적용하여 True에 해당하는 요소만 걸러냄&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&quot;language-Python&quot;&gt;&amp;gt;&amp;gt;&amp;gt; rdd1 = sc.parallelize(range(1,6))
&amp;gt;&amp;gt;&amp;gt; rdd2 = rdd1.filter(lambda i:i&amp;gt;2)
&amp;gt;&amp;gt;&amp;gt; print(rdd2.collect())
[3, 4, 5]
&lt;/code&gt;&lt;/pre&gt;

&lt;h4&gt;6.2. sortByKey&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;키 값을 기준으로 요소를 정렬하는 연산임&lt;/li&gt;
  &lt;li&gt;따라서, 키와 값으로 구성된 RDD에 적용 가능함&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&quot;language-Python&quot;&gt;&amp;gt;&amp;gt;&amp;gt; rdd1 = sc.parallelize([(&quot;q&quot;,1),(&quot;z&quot;,1),(&quot;a&quot;,1)])
&amp;gt;&amp;gt;&amp;gt; result = rdd1.sortByKey()
&amp;gt;&amp;gt;&amp;gt; print(result.collect())
[('a', 1), ('q', 1), ('z', 1)]
&lt;/code&gt;&lt;/pre&gt;

&lt;h4&gt;6.3. keys, values&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;키와 값으로 구성된 RDD에 적용 가능함&lt;/li&gt;
  &lt;li&gt;keys는 RDD의 키 요소로 구성된 RDD를 생성하고, values는 RDD의 value요소로 구성된 RDD를 생성함&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&quot;language-Python&quot;&gt;&amp;gt;&amp;gt;&amp;gt; rdd1 = sc.parallelize([(&quot;q&quot;,1),(&quot;z&quot;,1),(&quot;a&quot;,1)])
&amp;gt;&amp;gt;&amp;gt; rdd2 = rdd1.keys()
&amp;gt;&amp;gt;&amp;gt; rdd3 = rdd1.values()
&amp;gt;&amp;gt;&amp;gt; print(rdd2.collect(), rdd3.collect())
['q', 'z', 'a'] [1, 1, 1]
&lt;/code&gt;&lt;/pre&gt;

&lt;h4&gt;6.4. sample&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;샘플을 추출하는 RDD메서드&lt;/li&gt;
  &lt;li&gt;sample(withReplacement, fraction, seed=None)
    &lt;ul&gt;
      &lt;li&gt;withReplacement : True/False복원추출 결정&lt;/li&gt;
      &lt;li&gt;fraction
        &lt;ul&gt;
          &lt;li&gt;복원추출인 경우, RDD각 요소당 평균 추출횟수를 의미함&lt;/li&gt;
          &lt;li&gt;비복원추출인 경우, RDD각 요소당 샘플될 확률을 의미함&lt;/li&gt;
          &lt;li&gt;fraction이 sample사이즈를 결정하는 것은 아님. 아래 예제를 보면, sample사이즈는 random한 것을 알 수 있음.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&quot;language-Python&quot;&gt;&amp;gt;&amp;gt;&amp;gt; rdd1 = sc.parallelize(range(100))
&amp;gt;&amp;gt;&amp;gt; rdd2 = rdd1.sample(True, 1.5, seed=1234)
&amp;gt;&amp;gt;&amp;gt; rdd3 = rdd1.sample(False, 0.2, seed=1234)
&amp;gt;&amp;gt;&amp;gt; 
&amp;gt;&amp;gt;&amp;gt; rdd2.collect()
[1, 1, 2, 6, 6, 7, 7, 9, 10, 10, 11, 12, 12, 12, 13, 15, 17, 18, 19, 19, 19, 20, 21, 21, 23, 24, 25, 25, 26, 26, 26, 26, 26, 27, 28, 28, 28, 29, 30, 31, 32, 33, 33, 34, 35, 36, 36, 36, 37, 37, 38, 39, 39, 42, 42, 44, 44, 45, 45, 46, 48, 48, 48, 49, 49, 49, 50, 50, 50, 51, 53, 54, 57, 58, 59, 60, 63, 64, 65, 65, 66, 69, 71, 71, 71, 72, 72, 72, 73, 73, 75, 76, 77, 79, 80, 80, 81, 84, 84, 85, 85, 85, 86, 88, 88, 88, 89, 89, 89, 90, 90, 91, 91, 92, 92, 92, 94, 94, 95, 95, 95, 95, 96, 97, 97, 99]
&amp;gt;&amp;gt;&amp;gt; rdd3.collect()
[0, 5, 6, 7, 8, 11, 15, 35, 39, 41, 55, 56, 58, 61, 62, 71, 72, 78, 81, 89, 90, 93, 97, 99]
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;p&gt;이상으로 본 포스팅을 마치겠습니다. 다음 포스팅은 &amp;lt;RDD, Resilient Distributed Dataset에 대하여[3] - RDD액션, RDD데이터 불러오기와 저장하기&amp;gt; 에 대해 진행하도록 하겠습니다.&lt;/p&gt;</content><author><name>Seonhwa Lee</name></author><category term="Spark Programming" /><category term="data-engineering" /><summary type="html">이번 포스팅은 지난 포스팅 &amp;lt;RDD, Resilient Distributed DataSet에 대하여[1]&amp;gt; 에 이어서 진행하도록 하겠습니다. 교재는 빅데이터 분석을 위한 스파크2 프로그래밍을 참고하였습니다. 2. RDD 2.1.1 들어가기에 앞서 지난 포스팅 2-1. RDD Resilient Distributed Dataset에 대하여 에서 다뤘습니다. 2.1.2. 스파크컨텍스트 생성 스파크 컨텍스트는 스파크 애플리케이션과 클러스터의 연결을 관리하는 객체임 따라서, 스파크 애플리케이션을 사용하려면 무조건 스파크 컨텍스트를 생성하고 이용해야 함 RDD 생성도 스파크컨텍스트를 이용해 생성 가능함 val conf = new SparkConf().setMaster(“local[*]”).setAppName(“RDDCreateSample”) val sc = new SparkContext(conf) [예] scala - sparkcontext 생성   sc = SparkContext(master=“local[*], appName=“RDDCreateTest”, conf=conf) [예] python - spark context 생성   스파크 동작에 필요한 여러 설정 정보 지정 가능함 SparkConf(), conf=conf 부분에서 config을 통과시켜서 지정 가능함 지정해야 하는 정보 중에, master 정보와 appName 정보는 필수 지정 정보임 master 정보란 ? 스파크가 동작할 클러스터의 마스터 서버를 의미하는 것. 로컬모드에서 local, local[3], local[*]와 같이 사용. [*]는 쓰레드 개수를 의미하며, *는 사용 가능한 모든 쓰레드를 이용하겠다는 이야기임 appName은 애플리케이션 이름으로, 구분하기 위한 목적임. 스파크 UI화면에 사용됨 2.1.3. RDD생성 RDD를 생성하는 방법은 크게 2가지임 드라이버 프로그램의 컬렉션 객체 이용 자바 or 파이썬 ? 리스트 이용, 스칼라 ? 시퀀스타입 이용 드라이버 프로그램? - 최초로 메인 함수를 실행해 RDD등을 생성하고 각종 연산을 호출하는 프로그램 - 드라이버 내의 메인 함수는 스파크 애플리케이션과 스파크 컨텍스트 객체를 생성함 - 스파크 컨텍스트를 통해 RDD의 연산 정보를 DAG스케쥴러에 전달하면 스케쥴러는 이 정보를 가지고 실행 계획을 수립한 후 이를 클러스터 매니저에게 전달함 val rdd1 = sc.parallelize(List(&quot;a&quot;,&quot;b&quot;,&quot;c&quot;,&quot;d&quot;,&quot;e&quot;)) [예] scala - rdd 생성  [예] python - 드라이버의 컬렉션 객체를 이용한 RDD 생성 문자열을 포함한 컬렉션 객체 생성 example) python : ['a','b','c','d'] parallelize() 메서드를 이용해 RDD 생성 - RDD의 파티션 수를 지정하고 싶을 때, parallelize() 메서드의 두 번째 매개변수로 파티션 개수 지정 가능 val rdd1 = sc.parallelize(1 to 1000, 10) 외부 데이터를 읽어서 새로운 RDD를 생성 기본적으로 하둡의 다루는 모든 입출력 유형 가능 내부적으로 하둡의 입출력을 사용하기 때문임 [예] python - 외부데이터를 이용한 RDD 생성 2.1.4 RDD 기본 액션 기본 액션 연산의 종류에 대해 알아보도록 하겠습니다. 1. collect collect은 RDD의 모든 원소를 모아서 배열로 리턴 반환 타입이 RDD가 아닌 배열이므로 액션 연산 RDD에 있는 모든 요소들이 서버의 메모리에 수집됨. 즉, 대용량 데이터를 다룰 땐 조심하고, 주로 작은 용량의 데이터 디버깅용으로 사용함 [예] python - collect 연산 2. count RDD 구성하는 전체 요소 개수 반환 2.1.5 RDD 트랜스포메이션 기존 RDD를 이용해 새로운 RDD를 생성하는 연산입니다. 1. Map 연산 RDD에 속하는 모든 요소에 적용하여 새로운 RDD 생성하는 연산 RDD의 몇몇 연산은 특정 데이터 타입에만 적용 가능함 1.1. map 하나의 인자를 받는 함수 자체가 map의 인자로 들어감 이 함수를 이용해 rdd의 모든 요소에 적용한 뒤 새로운 RDD 리턴 [예] python - map 연산 map()에 전달되는 함수의 입력 데이터 타입과 출력 데이터 타입이 일치할 필요 없음. 문자열을 입력받아 정수로 반환하는 함수 사용 가능 [예] python - map 연산, 입력/출력 일치하지 않는 경우 1.2. flatMap map()과 마찬가지로, 하나의 인자를 받는 함수가 flatMap의 인자로 들어감 map()과 차이점은 각 함수의 인자가 반환하는 값의 타입이 다름 flatMap()에 사용하는 함수 f는 반환값으로 리스트나 시퀀스 같은 여러 개의 값을 담은 (이터레이션이 가능한) 일종의 컬렉션과 유사한 타입의 값을 반환해야 함 map[U](f:(T) -&amp;gt; U):RDD[U] flatMapU:RDD[U]) TraversableOnce는 이터레이터 타입을 의미 map()과 flatMap() 차이점 예시 [예] python - map 연산 vs. flatMap 연산 map연산은 문자열의 배열로 구성된 RDD를 생성함 각 요소의 문자열(T)이 단어가 포함된 배열(U)이기 때문임 반면, flatMap 연산은 문자열로 구성된 RDD를 생성함 TraversableOnce(U)이기 때문에 문자열의 배열 내의 요소가 모두 끄집어져 나오는 작업을 하게 됨 flatMap()은 하나의 입력값(“apple, orange”)에 대해 출력 값이 여러개인 경우([“apple”, “orange”]) 유용하게 사용할 수 있음 1.3. mapPartitions map과 flatMap은 하나의 인자만을 받는 함수가 인자로 들어가지만, mapPartitions은 여러 인자를 받는 함수가 인자로 들어갈 수 있음 ex) 이터레이터를 인자로 받는 함수 mapartitions은 인자로 받은 함수가 파티션 단위로 적용하여 새로운 RDD를 생성함. 반면에, map과 flatMap은 인자로 받은 함수가 요소 한개 단위로 적용됨 [예] python - mapPartitions sc.parallelize(range(1,11),3)으로 파티션 3개로 나뉨 DB 연결!!! 가 세번 출력된 걸 보니 파티션 단위로 처리한 것을 확인할 수 있음 increase함수는 각 파티션 내의 요소에 대한 이터레이터를 전달받아 함수 내부에서 파티션의 개별 요소에 대한 작업을 처리하고 그 결과를 다시 이터레이터 타입으로 반환 1.4. mapPartitionsWithIndex mapPartions와 동일하고 다른 점은 인자로 전달되는 함수를 호출할 때 파티션에 속한 요소의 정보뿐만 아니라 해당 파티션의 인덱스 정보도 함께 전달해 준다는 것임 def IncreaseWithIndex(idx, numbers): for i in numbers: if(idx == 1): yield i+1 mapPartitionswithIndex에 인자로 들어갈 함수는 위와 같이 인덱스 정보도 같이 들어감 [예] python - mapPartitionsWithIndex 1.5. mapValues RDD의 모든 요소들이 키와 값의 쌍을 이루고 있는 경우에만 사용 가능한 메서드이며, 인자로 전달받은 함수를 “값”에 해당하는 요소에만 적용하고 그 결과로 구성된 새로운 RDD를 생성 rdd1 = sc.parallelize([&quot;a&quot;,&quot;b&quot;,&quot;c&quot;]).map(lambda v:(v,1)) //(키,값)으로 구성된 rdd생성 rdd2 = rdd1.mapValues(lambda i:i+1) print(rdd2.collect()) [예] python - mapValues 1.6. flatMapValues MapValues 처럼 키에 해당되는 값에 함수를 적용하나 flatMap() 연산을 적용할 수 있음 rdd1 = sc.parallelize([(1, &quot;a,b&quot;),(2, &quot;a,c&quot;),(3, &quot;d,e&quot;)]) rdd2 = rdd1.flatMapValues(lambda v:v.split(',')) rdd2.collect() [예] python - flatMapValues 2. 그룹화 연산 특정 조건에 따라 요소를 그룹화하거나 특정 함수 적용 2.1. zip 두 개의 서로 다른 RDD를 각 요소의 인덱스에 따라 첫번째 RDD의 ‘인덱스’번째를 키로, 두번째 RDD의 ‘인덱스’번째를 값으로 하는 순서쌍을 생성 두 개 RDD는 같은 개수의 파티션과 각 파티션 당 요소개수가 동일해야 함 rdd1 = sc.parallelize([&quot;a&quot;,&quot;b&quot;,&quot;c&quot;]) rdd2 = sc.parallelize([1,2,3]) rdd3 = rdd1.zip(rdd2) rdd3.collect() &amp;gt;&amp;gt;&amp;gt; [('a', 1), ('b', 2), ('c', 3)] rdd1 = sc.parallelize(range(1,10),3) rdd2 = sc.parallelize(range(11,20),3) rdd3 = rdd1.zip(rdd2) rdd3.collect() &amp;gt;&amp;gt;&amp;gt; [(1, 11), (2, 12), (3, 13), (4, 14), (5, 15), (6, 16), (7, 17), (8, 18), (9, 19)] 2.2. zipPartitions zip()과 다르게 파티션의 개수만 동일하면 됨 zipPartitions()은 최대 4개 RDD까지 인자로 넣을 수 있음 파이썬 사용불가!! 2.3. groupBy RDD의 요소를 일정한 기준에 따라 그룹을 나누고, 각 그룹으로 구성된 새로운 RDD를 생성함 각 그룹은 키와 각 키에 속한 요소의 시퀀스(iterator)로 구성됨 인자로 전달하는 함수가 각 그룹의 키를 결정하는 역할을 담당함 &amp;gt;&amp;gt;&amp;gt; rdd1 = sc.parallelize(range(1,11)) &amp;gt;&amp;gt;&amp;gt; rdd2 = rdd1.groupBy(lambda v: &quot;even&quot; if v%2==0 else &quot;odd&quot;) /// groupBy에 인자로 전달된 함수에 의해 키(even/odd) 결정 print(rdd2.collect()) &amp;gt;&amp;gt;&amp;gt; [('even', &amp;lt;pyspark.resultiterable.ResultIterable object at 0x7fbc3f090e80&amp;gt;), ('odd', &amp;lt;pyspark.resultiterable.ResultIterable object at 0x7fbc3f090470&amp;gt;)] /// 각 키에 해당하는 값은 iterator임을 확인할 수 있음 &amp;gt;&amp;gt;&amp;gt; for x in rdd2.collect(): ... print(x[0], list(x[1])) ... even [2, 4, 6, 8, 10] odd [1, 3, 5, 7, 9] 2.3. groupByKey 이미 키와 값의 쌍으로 구성된 RDD에만 적용 가능함 &amp;gt;&amp;gt;&amp;gt; rdd1 = sc.parallelize([&quot;a&quot;,&quot;b&quot;,&quot;c&quot;,&quot;b&quot;,&quot;c&quot;]).map(lambda v:(v,1)) &amp;gt;&amp;gt;&amp;gt; rdd1.collect() [('a', 1), ('b', 1), ('c', 1), ('b', 1), ('c', 1)] /// (키,값) 쌍으로 구성된 RDD 생성 &amp;gt;&amp;gt;&amp;gt; rdd2 = rdd1.groupByKey() &amp;gt;&amp;gt;&amp;gt; rdd2.collect() [('b', &amp;lt;pyspark.resultiterable.ResultIterable object at 0x7fbc3f0ab6a0&amp;gt;), ('c', &amp;lt;pyspark.resultiterable.ResultIterable object at 0x7fbc3f0ab6d8&amp;gt;), ('a', &amp;lt;pyspark.resultiterable.ResultIterable object at 0x7fbc3f0ab0b8&amp;gt;)] /// 키에 따라 그룹화함. 그 결과 키에 해당하는 시퀀스 생성 &amp;gt;&amp;gt;&amp;gt; for x in rdd2.collect(): ... print(x[0], list(x[1])) ... b [1, 1] c [1, 1] a [1] 2.4. cogroup 이미 키와 값의 쌍으로 구성된 RDD에만 적용 가능함 여러 개의 RDD를 인자로 받음(최대 3개) 여러 RDD에서 동일한 키에 해당하는 요소들로 구성된 시퀀스를 만든 후, (키, 시퀀스)의 튜플을 구성. 그 튜플들로 구성된 새로운 RDD를 생성함 Tuple(키, Tuple(rdd1요소들의 집합, rdd2요소들의 집합, …)) &amp;gt;&amp;gt;&amp;gt; rdd1 = sc.parallelize([(&quot;k1&quot;,&quot;v1&quot;),(&quot;k2&quot;,&quot;v2&quot;),(&quot;k1&quot;,&quot;v3&quot;)]) &amp;gt;&amp;gt;&amp;gt; rdd2 = sc.parallelize([(&quot;k1&quot;,&quot;v4&quot;)]) &amp;gt;&amp;gt;&amp;gt; rdd1.collect() [('k1', 'v1'), ('k2', 'v2'), ('k1', 'v3')] &amp;gt;&amp;gt;&amp;gt; rdd2.collect() [('k1', 'v4')] /// (키, 값)쌍으로 구성된 RDD 2개 생성 &amp;gt;&amp;gt;&amp;gt; rdd3 = rdd1.cogroup(rdd2) &amp;gt;&amp;gt;&amp;gt; rdd3.collect() [('k1', (&amp;lt;pyspark.resultiterable.ResultIterable object at 0x7fbc3f0b2fd0&amp;gt;, &amp;lt;pyspark.resultiterable.ResultIterable object at 0x7fbc3f00a828&amp;gt;)), ('k2', (&amp;lt;pyspark.resultiterable.ResultIterable object at 0x7fbc3f00ac18&amp;gt;, &amp;lt;pyspark.resultiterable.ResultIterable object at 0x7fbc3f00a5f8&amp;gt;))] ///k1 키에 대해 rdd1의 v1과 v3요소를 묶고, rdd2의 v4요소를 묶어서 튜플로 구성 &amp;gt;&amp;gt;&amp;gt; for x in rdd3.collect(): ... print(x[0], list(x[1][0]), list(x[1][1])) ... k1 ['v1', 'v3'] ['v4'] k2 ['v2'] [] 3. 집합 연산 RDD에 포함된 요소를 하나의 집합으로 간주하여 집합 연산을 수행(합/교집합) 3.1. distinct RDD의 원소에서 중복을 제외한 요소로만 새로운 RDD 구성 &amp;gt;&amp;gt;&amp;gt; rdd = sc.parallelize([1,2,3,1,2,3,1,2,3]) &amp;gt;&amp;gt;&amp;gt; rdd2 = rdd.distinct() &amp;gt;&amp;gt;&amp;gt; rdd2.collect() [1, 2, 3] 3.1. cartesian 두 RDD요소의 카테시안곱을 구하고 그 결과를 요소로 하는 새로운 RDD구성 &amp;gt;&amp;gt;&amp;gt; rdd1 = sc.parallelize([1,2,3]) &amp;gt;&amp;gt;&amp;gt; rdd2 = sc.parallelize(['a','b','c']) &amp;gt;&amp;gt;&amp;gt; rdd3 = rdd1.cartesian(rdd2) &amp;gt;&amp;gt;&amp;gt; rdd3.collect() [(1, 'a'), (1, 'b'), (1, 'c'), (2, 'a'), (2, 'b'), (2, 'c'), (3, 'a'), (3, 'b'), (3, 'c')] 3.2. subtract rdd1.subtract(rdd2) : (rdd1의 요소집합 - rdd2의 요소집합)의 차집합 rdd2.subtract(rdd1) : (rdd2의 요소집합 - rdd1의 요소집합)의 차집합 &amp;gt;&amp;gt;&amp;gt; rdd1 = sc.parallelize([&quot;a&quot;, &quot;b&quot;,&quot;c&quot;,&quot;d&quot;,&quot;e&quot;]) &amp;gt;&amp;gt;&amp;gt; rdd2 = sc.parallelize([&quot;d&quot;,&quot;e&quot;]) &amp;gt;&amp;gt;&amp;gt; rdd3 = rdd1.subtract(rdd2) &amp;gt;&amp;gt;&amp;gt; rdd3.collect() ['a', 'b', 'c'] 3.2. union 두 RDD요소의 합집합 &amp;gt;&amp;gt;&amp;gt; rdd1 = sc.parallelize([&quot;a&quot;, &quot;b&quot;,&quot;c&quot;,&quot;d&quot;,&quot;e&quot;]) &amp;gt;&amp;gt;&amp;gt; rdd2 = sc.parallelize([&quot;d&quot;,&quot;e&quot;]) &amp;gt;&amp;gt;&amp;gt; rdd3 = rdd1.union(rdd2) &amp;gt;&amp;gt;&amp;gt; rdd3.collect() ['a', 'b', 'c', 'd', 'e', 'd', 'e'] 3.3. intersection 두 RDD요소의 교집합으로 중복되지 않은 요소로 구성 &amp;gt;&amp;gt;&amp;gt; rdd1 = sc.parallelize([&quot;a&quot;,&quot;a&quot;,&quot;b&quot;,&quot;c&quot;]) &amp;gt;&amp;gt;&amp;gt; rdd2 = sc.parallelize([&quot;a&quot;,&quot;a&quot;,&quot;c&quot;,&quot;c&quot;]) &amp;gt;&amp;gt;&amp;gt; rdd3 = rdd1.intersection(rdd2) &amp;gt;&amp;gt;&amp;gt; rdd3.collect() ['a', 'c'] 3.4. join RDD의 구성요소가 키와 값의 쌍으로 구성된 경우에 사용할 수 있는 메서드 공통된 키에 대해서만 join수행 join 수행 결과 Tuple(키, Tuple(첫번째 RDD요소, 두번쨰 RDD요소)) &amp;gt;&amp;gt;&amp;gt; rdd1 = sc.parallelize([&quot;a&quot;, &quot;b&quot;,&quot;c&quot;,&quot;d&quot;,&quot;e&quot;]).map(lambda v : (v,1)) &amp;gt;&amp;gt;&amp;gt; rdd1.collect() [('a', 1), ('b', 1), ('c', 1), ('d', 1), ('e', 1)] &amp;gt;&amp;gt;&amp;gt; rdd2 = sc.parallelize([&quot;b&quot;,&quot;c&quot;]).map(lambda v:(v,2)) &amp;gt;&amp;gt;&amp;gt; rdd2.collect() [('b', 2), ('c', 2)] &amp;gt;&amp;gt;&amp;gt; rdd3 = rdd1.join(rdd2) &amp;gt;&amp;gt;&amp;gt; rdd3.collect() [('b', (1, 2)), ('c', (1, 2))] 3.5. leftOuterJoin, rightOuterJoin 키와 값의 쌍으로 구성된 RDD에 사용가능 leftjoin, rightjoin을 수행 &amp;gt;&amp;gt;&amp;gt; rdd1 = sc.parallelize([&quot;a&quot;, &quot;b&quot;,&quot;c&quot;,&quot;d&quot;,&quot;e&quot;]).map(lambda v : (v,1)) &amp;gt;&amp;gt;&amp;gt; rdd2 = sc.parallelize([&quot;b&quot;,&quot;c&quot;]).map(lambda v:(v,2)) &amp;gt;&amp;gt;&amp;gt; rdd3 = rdd1.leftOuterJoin(rdd2) &amp;gt;&amp;gt;&amp;gt; rdd3.collect() [('a', (1, None)), ('e', (1, None)), ('b', (1, 2)), ('c', (1, 2)), ('d', (1, None))] ///rdd2에는 a,d,e 키가 없기 때문에 해당 키에 대한 튜플 요소는 (rdd1의 요소, None)으로 구성됨 &amp;gt;&amp;gt;&amp;gt; rdd4 = rdd1.rightOuterJoin(rdd2) &amp;gt;&amp;gt;&amp;gt; rdd4.collect() [('b', (1, 2)), ('c', (1, 2))] 3.6. subtractByKey 키와 값의 쌍으로 구성된 RDD에 사용가능 rdd1의 요소 중에서 rdd2와 겹치지 않는 키로 구성된 새로운 RDD 생성 &amp;gt;&amp;gt;&amp;gt; rdd1 = sc.parallelize([&quot;a&quot;,&quot;b&quot;]).map(lambda v:(v,1)) &amp;gt;&amp;gt;&amp;gt; rdd2 = sc.parallelize([&quot;b&quot;]).map(lambda v:(v,1)) &amp;gt;&amp;gt;&amp;gt; rdd3 = rdd1.subtractByKey(rdd2) &amp;gt;&amp;gt;&amp;gt; rdd3.collect() [('a', 1)] 4. 집계와 관련된 연산들 4.1 reduceByKey 키와 값의 쌍으로 구성된 RDD에서 사용 가능 RDD 내의 동일한 키를 하나로 병합해 (키,값) 쌍으로 구성된 새로운 RDD 생성 함수를 인자로 받음. 왜냐하면, 파티션 별로 연산을 수행했을 때, 항상 같은 순서로 연산이 수행되는 것을 보장 못하므로, 함수가 수행하는 연산은 교환법칙과 결합법칙이 성립해야 함 &amp;gt;&amp;gt;&amp;gt; rdd = sc.parallelize(['a','b','b']).map(lambda v:(v,1)) &amp;gt;&amp;gt;&amp;gt; rdd.collect() [('a', 1), ('b', 1), ('b', 1)] &amp;gt;&amp;gt;&amp;gt; rdd2 = rdd.reduceByKey(lambda v1, v2:(v1+v2)) &amp;gt;&amp;gt;&amp;gt; rdd2.collect() [('b', 2), ('a', 1)] (키,값)쌍으로 하는 RDD를 인자로 받는 트랜스포메이션 메서드 - 데이터 처리 과정에서 사용할 파티셔너와 파티션 개수를 지정할 수 있는 옵션이 있음 - 자체적으로 작성한 파티셔너나 파티션 개수를 통해 병렬 처리 수준 변경 가능 4.2 foldByKey 키와 값으로 구성된 RDD에 사용 가능 reduceByKey()와 유사하지만, 병합 연산의 초기값을 인자로 전달할 수 있음 rdd = sc.parallelize([&quot;a&quot;,&quot;b&quot;,&quot;b&quot;]).map(lambda v:(v,1)) &amp;gt;&amp;gt;&amp;gt; rdd2 = rdd.foldByKey(0, lambda v1,v2:v1+v2) &amp;gt;&amp;gt;&amp;gt; rdd2.collect() [('b', 2), ('a', 1)] My view) 개인적으로, foldByKey와 reduceByKey의 차이가 잘 이해가 되지 않아, 초기값과 문자열 병합으로 pyspark를 실행해 보았습니다. &amp;gt;&amp;gt;&amp;gt; rdd = sc.parallelize([&quot;a&quot;,&quot;b&quot;,&quot;b&quot;]).map(lambda v:(v,1)) ///초기값을 1로 준 경우 &amp;gt;&amp;gt;&amp;gt; rdd2 = rdd.foldByKey(1, lambda v1,v2:v1+v2) ///초기값을 0으로 준 경우와 다른 결과임 &amp;gt;&amp;gt;&amp;gt; rdd2.collect() [('b', 4), ('a', 2)] &amp;gt;&amp;gt;&amp;gt; rdd = sc.parallelize([&quot;a&quot;,&quot;b&quot;,&quot;b&quot;]).map(lambda v:(v,'c')) ///초기값을 t로 준 경우 &amp;gt;&amp;gt;&amp;gt; rdd2 = rdd.foldByKey('t', lambda v1,v2:v1+v2) &amp;gt;&amp;gt;&amp;gt; rdd2.collect() [('b', 'tctc'), ('a', 'tc')] 위의 두 연산를 보니, foldByKey는 초기값 처리를 아래와 같이 진행하는 것 같습니다. 예를 들어, 초기 rdd가 [(‘a’, 1), (‘b’, 1), (‘b’, 1)] 라 한다면, foldByKey는 키 ‘a’와 ‘b’에 대해 각각 초기값을 가지고 병합연산을 수행합니다. 이 때 먼저, 초기값을 가지고 병합 연산을 수행합니다. 키 ‘a’인 경우, 초기값 1라면, v1=1, v2=1(키 ‘a’에 대응되는 값)이 병합연산을 수행해 (‘a’,2)가 됩니다. 그 다음 reducebykey와 같은 연산을 수행하나, 키 ‘a’는 초기 rdd에 하나밖에 없기 때문에, v1=2, v2=None이 되어 최종 foldByKey연산 결과는 키 ‘a’에 대해서 2값을 가지게 됩니다. ‘b’키 같은 경우도 마찬가지입니다. 먼저 초기값을 가지고 연산을 수행합니다. v1=1(초기값), v2=1(b에 대응되는 값)가 병합연산을 수행해 v1=2가 됩니다. ‘b’키는 두개가 있으므로, 나머지 ‘b’키에 대해 v1=1, v2=1가 병합연산을 거쳐 v2=2가 됩니다. 그다음 두개의 ‘b’키에 대해 다시 병합연산이 수행되어 v1=2, v2=2가 되어 최종적으로 ‘b’키에 대해 4의 값이 생성됩니다. 4.3 combineByKey 키와 값인 RDD에 사용 가능 foldByKey와 reduceByKey와 유사함. 차이점은 병합연산 수행 결과 값의 타입이 바뀔 수 있음 def reduceByKey(func:(V,V)=&amp;gt;V):RDD[K,V] def foldByKey(zeroValue: V)(func:(V,V)=&amp;gt;V):RDD[K,V] def combineByKey[C](createCombiner:(V)=&amp;gt;C, mergeValue:(C,V)=&amp;gt;V, mergeCombiners:(C,C)=&amp;gt;C):RDD[K,C] combineByKey는 reduceByKey와 foldByKey와 다르게 타입이 C로 바뀌어 있음 위의 combineByKey를 보면 메서드가 총 createCombiner, mergeValue, mergeCombiners 세 개임을 알 수 있음 아래는 combineByKey에서 자주 등장하는 평균구하기 예시임 #record.py 에 따로 저장해야 함. #아니면, _pickle.PicklingError: Can't pickle &amp;lt;class '__main__.Record'&amp;gt;: attribute lookup Record on __main__ failed 에러 발생. class Record: def __init__(self, amount, number=1): self.amount = amount self.number = number def addAmt(self, amount): return Record(self.amount + amount, self.number + 1) def __add__(self, other): amount = self.amount + other.amount number = self.number + other.number return Record(amount, number) def __str__(self): return &quot;avg:&quot; + str(self.amount / self.number) def __repr__(self): return 'Record(%r, %r)' % (self.amount, self.number) #createCombiner, mergeValue, mergeCombiners 정의 def createCombiner(v): return Record(v) def mergeValue(c, v): return c.addAmt(v) def mergeCombiners(c1, c2): return c1 + c2 #combineByKey 실행 rdd = sc.parallelize([(&quot;Math&quot;, 100), (&quot;Eng&quot;, 80), (&quot;Math&quot;, 50), (&quot;Eng&quot;, 70), (&quot;Eng&quot;, 90)]) rdd2 = rdd.combineByKey(lambda v:createCombiner(v), lambda c,v:mergeValue(c,v), lambda c1,c2:mergeCombiners(c1,c2)) print('Math', rdd2.collectAsMap()['Math'], 'Eng', rdd2.collectAsMap()['Eng']) &amp;gt;&amp;gt;&amp;gt; Math avg:75.0 Eng avg:80.0 createCombiner() 값을 병합하기 위한 컴바이너. 컴바이너는 병합을 수행하고 컴바이너 타입으로 내부에 저장함. 위의 예로는 createCombiner()는 Record클래스 타입으로 저장됨. 즉, rdd의 각 키에 해당되는 값이 record클래스 타입으로 변환되어 저장됨. mergeValue() 키에 대한 컴바이너가 존재한다면, 컴바이너를 이용해 값을 병합함. My View) 위의 예 같은 경우, rdd요소 순서대로 combineByKey가 작동한다면 먼저 (“Math”, 100)에 대해 Combiner가 생성되어, math 키에 대한 Record(100)이 생성됩니다. 그 다음 (“Eng”, 70)에 대해 작동합니다. “Eng”키는 기존에 없던 키이기 때문에 새로 Combiner인 Record(70)이 생성됩니다. 그 다음 (“Math”, 50)인데, 기존 Math키에 대한 컴바이너가 존재하기 때문에, 기존 Math 키 컴바이너를 이용하여 병합합니다. 즉, Record(100).addAmt(50)이 발생합니다. 이렇게 Math키와 Eng키에 대해 모든 요소에 대해 병합을 실시하게 됩니다. mergeCombiners() createCombiner()와 mergeValue()는 파티션별로 수행됨. 그다음 모든 파티션에 생성된 combiner를 병합하는 과정을 mergeCombiners()를 통해 수행하는 것임. 이를 통해 최종결과가 발생함 4.4 aggregateByKey 키와 값의 RDD에서 사용 가능 초깃값을 설정할 수 있는 점을 제외하면 comebineByKey와 동일 def combineByKey[C](createCombiner:(V)=&amp;gt;C, mergeValue:(C,V)=&amp;gt;V, mergeCombiners:(C,C)=&amp;gt;C):RDD[(K,C)] def aggregateByKey[U](zeroValue: U)(seqOp:(U,V)=&amp;gt;U, combOp:(U,U)=&amp;gt;U):RDD[(K,U)] aggregateByKey에서 seqOp는 mergeValue역할을, comOp는 mergeCombiner역할을 함. combineByKey에서 createCombiner로 병합을 위한 초깃값을 구하지만 aggregateByKey는 함수를 이용해 초깃값을 설정하는 대신 바로 ‘값’으로 초기값을 설정함 rdd = sc.parallelize([(&quot;Math&quot;, 100), (&quot;Eng&quot;, 80), (&quot;Math&quot;, 50), (&quot;Eng&quot;, 70), (&quot;Eng&quot;, 90)]) rdd2 = rdd.aggregateByKey(Record(0,0), lambda c,v:mergeValue(c,v), lambda c1,c2:mergeCombiners(c1,c2)) print('Math :', rdd2.collectAsMap()['Math'], 'Eng :', rdd2.collectAsMap()['Eng']) &amp;gt;&amp;gt;&amp;gt;Math : avg:75.0 Eng : avg:80.0 5. pipe 및 파티션과 관련된 연산 5.1 pipe pipe를 이용하면 데이터를 처리하는 과정에서 외부 프로세스를 활용할 수 있음 세 개의 숫자로 구성된 문자열을 리눅스의 cut 유틸리티를 이용해 분리한 뒤첫번째와 세번재 숫자를 뽑아내는 예제 &amp;gt;&amp;gt;&amp;gt; rdd = sc.parallelize([&quot;1,2,3&quot;, &quot;4,5,6&quot;, &quot;7,8,9&quot;]) &amp;gt;&amp;gt;&amp;gt; rdd2 = rdd.pipe(&quot;cut -f 1,3 -d ,&quot;) &amp;gt;&amp;gt;&amp;gt; rdd2.collect() ['1,3', '4,6', '7,9'] 5.2. coalesce와 repartition 현재 RDD에 사용된 파티션 개수를 조정함 coalesce는 파티션 개수를 줄이기만 되고, repartition은 늘리는 것과 줄이는 것 둘 다 가능 coalesce가 따로 있는 이유는 처리 방식에 따른 성능 차이 때문임 repartition은 셔플을 기반으로 동작을 수행하는 데 반해, coalesce는 강제로 셔플을 수행하라는 옵션을 지정하지 않는 한 셔플을 사용하지 않음. 따라서 필터링 등으로 인해 데이터 개수가 줄어든 경우 coalesce을 사용하는 것이 좋음 &amp;gt;&amp;gt;&amp;gt; rdd = sc.parallelize(list(range(1,11)),10) &amp;gt;&amp;gt;&amp;gt; rdd2 = rdd.coalesce(5) &amp;gt;&amp;gt;&amp;gt; rdd3 = rdd2.repartition(10) &amp;gt;&amp;gt;&amp;gt; print(&quot;partition size : %d&quot; &amp;gt;&amp;gt;&amp;gt; print(&quot;partition size : %d&quot; %rdd2.getNumPartitions()) partition size : 5 &amp;gt;&amp;gt;&amp;gt; print(&quot;partition size : %d&quot; %rdd3.getNumPartitions()) partition size : 10 5.3. repartitionAndSortWithinPartitions 키와 값으로 구성된 RDD에서 사용 가능 RDD를 구성하는 모든 데이터를 특정 기준에 따라 여러 개의 파티션으로 분리하고 각 파티션 단위로 정렬을 수행한 뒤 새로운 RDD를 생성해 주는 메서드임 각 데이터가 어떤 파티션에 속할지 결정하기 위한 파티셔너(org.apache.spark.Partitioner)설정 키 값을 이용하여 어떤 파티션에 속할지 결정할 뿐만 아니라 키 값을 이용한 정렬도 수행함 파티션 재할당을 위해 셔플을 수행하는 단계에서 정렬도 함께 다루게 되어 파티션과 정렬을 각각 따로하는 것에 비해 더 높은 성능을 발휘할 수 있음 10개의 무작위 숫자를 위 메서드를 이용해 3개의 파티션으로 분리해 보는 예제 &amp;gt;&amp;gt;&amp;gt; data = [random.randrange(1,100) for i in range(0,10)] &amp;gt;&amp;gt;&amp;gt; rdd1 = sc.parallelize(data).map(lambda v:(v,&quot;-&quot;)) &amp;gt;&amp;gt;&amp;gt; rdd2 = rdd1.repartitionAndSortWithinPartitions(3, lambda x:x) &amp;gt;&amp;gt;&amp;gt; rdd2.foreachPartition(lambda values:print(list(values))) [(50, '-')] [(16, '-'), (52, '-'), (61, '-'), (67, '-')] [(6, '-'), (12, '-'), (48, '-'), (51, '-'), (87, '-')] pyspark에서 repartitionAndSortWithinPartitions에서 default 파티셔너는 hash 파티셔너로 되어있음 foreachPartition은 partition단위로 특정함수를 실행해주는 메서드임. 위의 예제에서는 파티션단위로 파티션에 속해있는 값을 프린트해주는 함수를 실행했음 5.4. partitionBy 키와 값으로 구성된 RDD에서 사용가능 파티션을 변경하고 싶을 때 사용가능 기본적으로, hashpartitioner와 rangepartitioner가 있음 org.apache.spark.partitioner 클래스를 상속해서 파티셔너를 커스터마이징도 가능 &amp;gt;&amp;gt;&amp;gt; rdd1 = sc.parallelize([(&quot;apple&quot;,1),(&quot;mouse&quot;,1),(&quot;monitor&quot;,1)],5) &amp;gt;&amp;gt;&amp;gt; rdd1.collect() [('apple', 1), ('mouse', 1), ('monitor', 1)] &amp;gt;&amp;gt;&amp;gt; rdd2 = rdd1.partitionBy(3) &amp;gt;&amp;gt;&amp;gt; print(&quot;rdd1: %d, rdd2: %d&quot; %(rdd1.getNumPartitions(), rdd2.getNumPartitions())) rdd1: 5, rdd2: 3 위의 예제에서 partitionby에 의해 파티션 갯수가 변경된 것을 확인할 수 있음 6. 필터와 정렬 연산 특정 조건을 만족하는 요소만 선택하거나, 각 요소를 정해진 기준에 따라 정렬함 6.1. filter RDD의 각각 요소에 조건에 따라 True/False로 가려내는 함수를 적용하여 True에 해당하는 요소만 걸러냄 &amp;gt;&amp;gt;&amp;gt; rdd1 = sc.parallelize(range(1,6)) &amp;gt;&amp;gt;&amp;gt; rdd2 = rdd1.filter(lambda i:i&amp;gt;2) &amp;gt;&amp;gt;&amp;gt; print(rdd2.collect()) [3, 4, 5] 6.2. sortByKey 키 값을 기준으로 요소를 정렬하는 연산임 따라서, 키와 값으로 구성된 RDD에 적용 가능함 &amp;gt;&amp;gt;&amp;gt; rdd1 = sc.parallelize([(&quot;q&quot;,1),(&quot;z&quot;,1),(&quot;a&quot;,1)]) &amp;gt;&amp;gt;&amp;gt; result = rdd1.sortByKey() &amp;gt;&amp;gt;&amp;gt; print(result.collect()) [('a', 1), ('q', 1), ('z', 1)] 6.3. keys, values 키와 값으로 구성된 RDD에 적용 가능함 keys는 RDD의 키 요소로 구성된 RDD를 생성하고, values는 RDD의 value요소로 구성된 RDD를 생성함 &amp;gt;&amp;gt;&amp;gt; rdd1 = sc.parallelize([(&quot;q&quot;,1),(&quot;z&quot;,1),(&quot;a&quot;,1)]) &amp;gt;&amp;gt;&amp;gt; rdd2 = rdd1.keys() &amp;gt;&amp;gt;&amp;gt; rdd3 = rdd1.values() &amp;gt;&amp;gt;&amp;gt; print(rdd2.collect(), rdd3.collect()) ['q', 'z', 'a'] [1, 1, 1] 6.4. sample 샘플을 추출하는 RDD메서드 sample(withReplacement, fraction, seed=None) withReplacement : True/False복원추출 결정 fraction 복원추출인 경우, RDD각 요소당 평균 추출횟수를 의미함 비복원추출인 경우, RDD각 요소당 샘플될 확률을 의미함 fraction이 sample사이즈를 결정하는 것은 아님. 아래 예제를 보면, sample사이즈는 random한 것을 알 수 있음. &amp;gt;&amp;gt;&amp;gt; rdd1 = sc.parallelize(range(100)) &amp;gt;&amp;gt;&amp;gt; rdd2 = rdd1.sample(True, 1.5, seed=1234) &amp;gt;&amp;gt;&amp;gt; rdd3 = rdd1.sample(False, 0.2, seed=1234) &amp;gt;&amp;gt;&amp;gt; &amp;gt;&amp;gt;&amp;gt; rdd2.collect() [1, 1, 2, 6, 6, 7, 7, 9, 10, 10, 11, 12, 12, 12, 13, 15, 17, 18, 19, 19, 19, 20, 21, 21, 23, 24, 25, 25, 26, 26, 26, 26, 26, 27, 28, 28, 28, 29, 30, 31, 32, 33, 33, 34, 35, 36, 36, 36, 37, 37, 38, 39, 39, 42, 42, 44, 44, 45, 45, 46, 48, 48, 48, 49, 49, 49, 50, 50, 50, 51, 53, 54, 57, 58, 59, 60, 63, 64, 65, 65, 66, 69, 71, 71, 71, 72, 72, 72, 73, 73, 75, 76, 77, 79, 80, 80, 81, 84, 84, 85, 85, 85, 86, 88, 88, 88, 89, 89, 89, 90, 90, 91, 91, 92, 92, 92, 94, 94, 95, 95, 95, 95, 96, 97, 97, 99] &amp;gt;&amp;gt;&amp;gt; rdd3.collect() [0, 5, 6, 7, 8, 11, 15, 35, 39, 41, 55, 56, 58, 61, 62, 71, 72, 78, 81, 89, 90, 93, 97, 99] 이상으로 본 포스팅을 마치겠습니다. 다음 포스팅은 &amp;lt;RDD, Resilient Distributed Dataset에 대하여[3] - RDD액션, RDD데이터 불러오기와 저장하기&amp;gt; 에 대해 진행하도록 하겠습니다.</summary></entry><entry><title type="html">dataframe, numpy 등 array에서 double-colon(::) slicing</title><link href="http://localhost:4000/code%20snippet/2020/12/03/double-colon-slicing/" rel="alternate" type="text/html" title="dataframe, numpy 등 array에서 double-colon(::) slicing" /><published>2020-12-03T00:00:00+09:00</published><updated>2020-12-03T00:00:00+09:00</updated><id>http://localhost:4000/code%20snippet/2020/12/03/double-colon-slicing</id><content type="html" xml:base="http://localhost:4000/code%20snippet/2020/12/03/double-colon-slicing/">&lt;hr /&gt;

&lt;p&gt;pandas, numpy 등 자주 헷갈리는 코드 사용을 모아두었습니다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;dfc&quot;&gt;df[::c]&lt;/h1&gt;

&lt;p&gt;시작부터 c 간격마다 있는 row를 슬라이싱해줍니다. 자세히 설명하면, 1번째, (1+c)번째, (1+2c)번째, …, (1+nc)번째 row가 선택됩니다. 아래는 예제입니다.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;pandas&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pd&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;numpy&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;random&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;normal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;random&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;uniform&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;sampledf&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DataFrame&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'A'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'B'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;sampledf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[::&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div&gt;
&lt;style scoped=&quot;&quot;&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
&lt;/style&gt;
&lt;table border=&quot;1&quot; class=&quot;dataframe&quot;&gt;
  &lt;thead&gt;
    &lt;tr style=&quot;text-align: right;&quot;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;A&lt;/th&gt;
      &lt;th&gt;B&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;td&gt;0.312234&lt;/td&gt;
      &lt;td&gt;0.788584&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;td&gt;-0.123720&lt;/td&gt;
      &lt;td&gt;0.445176&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;4&lt;/th&gt;
      &lt;td&gt;0.411344&lt;/td&gt;
      &lt;td&gt;0.617469&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;6&lt;/th&gt;
      &lt;td&gt;-0.434367&lt;/td&gt;
      &lt;td&gt;0.674210&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;8&lt;/th&gt;
      &lt;td&gt;-0.563221&lt;/td&gt;
      &lt;td&gt;0.009331&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;...&lt;/th&gt;
      &lt;td&gt;...&lt;/td&gt;
      &lt;td&gt;...&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;190&lt;/th&gt;
      &lt;td&gt;1.797756&lt;/td&gt;
      &lt;td&gt;0.963394&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;192&lt;/th&gt;
      &lt;td&gt;-0.679177&lt;/td&gt;
      &lt;td&gt;0.033222&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;194&lt;/th&gt;
      &lt;td&gt;0.975527&lt;/td&gt;
      &lt;td&gt;0.041236&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;196&lt;/th&gt;
      &lt;td&gt;-1.354463&lt;/td&gt;
      &lt;td&gt;0.450887&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;198&lt;/th&gt;
      &lt;td&gt;-2.341788&lt;/td&gt;
      &lt;td&gt;0.009804&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;100 rows × 2 columns&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;위에 sampledf[::2]를 보시면 첫번째(index=0), 세번째(index=2), …., 199번째(index=198)이 선택되는 것을 확인하실 수 있습니다. 2의 간격 크기로 행이 선택되는 것입니다.&lt;/p&gt;

&lt;h1&gt;df[::-1]&lt;/h1&gt;

&lt;p&gt;df[::-1] 인 경우는 열의 배치를 뒤집어줍니다. 아래는 예시입니다.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;sampledf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[::&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div&gt;
&lt;style scoped=&quot;&quot;&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
&lt;/style&gt;
&lt;table border=&quot;1&quot; class=&quot;dataframe&quot;&gt;
  &lt;thead&gt;
    &lt;tr style=&quot;text-align: right;&quot;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;A&lt;/th&gt;
      &lt;th&gt;B&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;199&lt;/th&gt;
      &lt;td&gt;2.600890&lt;/td&gt;
      &lt;td&gt;0.775489&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;198&lt;/th&gt;
      &lt;td&gt;-2.341788&lt;/td&gt;
      &lt;td&gt;0.009804&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;197&lt;/th&gt;
      &lt;td&gt;-0.365103&lt;/td&gt;
      &lt;td&gt;0.413758&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;196&lt;/th&gt;
      &lt;td&gt;-1.354463&lt;/td&gt;
      &lt;td&gt;0.450887&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;195&lt;/th&gt;
      &lt;td&gt;0.685687&lt;/td&gt;
      &lt;td&gt;0.933069&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;...&lt;/th&gt;
      &lt;td&gt;...&lt;/td&gt;
      &lt;td&gt;...&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;4&lt;/th&gt;
      &lt;td&gt;0.411344&lt;/td&gt;
      &lt;td&gt;0.617469&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;3&lt;/th&gt;
      &lt;td&gt;1.703587&lt;/td&gt;
      &lt;td&gt;0.718288&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;td&gt;-0.123720&lt;/td&gt;
      &lt;td&gt;0.445176&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;0.208545&lt;/td&gt;
      &lt;td&gt;0.459722&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;td&gt;0.312234&lt;/td&gt;
      &lt;td&gt;0.788584&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;200 rows × 2 columns&lt;/p&gt;
&lt;/div&gt;

&lt;h1&gt;df[::-c]&lt;/h1&gt;

&lt;p&gt;마찬가지로, df[::-c] 이면 뒤에 row부터 2간격마다 row가 선택됩니다. 아래는 예시입니다.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;sampledf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[::&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div&gt;
&lt;style scoped=&quot;&quot;&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
&lt;/style&gt;
&lt;table border=&quot;1&quot; class=&quot;dataframe&quot;&gt;
  &lt;thead&gt;
    &lt;tr style=&quot;text-align: right;&quot;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;A&lt;/th&gt;
      &lt;th&gt;B&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;199&lt;/th&gt;
      &lt;td&gt;2.600890&lt;/td&gt;
      &lt;td&gt;0.775489&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;197&lt;/th&gt;
      &lt;td&gt;-0.365103&lt;/td&gt;
      &lt;td&gt;0.413758&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;195&lt;/th&gt;
      &lt;td&gt;0.685687&lt;/td&gt;
      &lt;td&gt;0.933069&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;193&lt;/th&gt;
      &lt;td&gt;0.267967&lt;/td&gt;
      &lt;td&gt;0.020342&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;191&lt;/th&gt;
      &lt;td&gt;-0.918194&lt;/td&gt;
      &lt;td&gt;0.917082&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;...&lt;/th&gt;
      &lt;td&gt;...&lt;/td&gt;
      &lt;td&gt;...&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;9&lt;/th&gt;
      &lt;td&gt;0.924938&lt;/td&gt;
      &lt;td&gt;0.837344&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;7&lt;/th&gt;
      &lt;td&gt;0.890616&lt;/td&gt;
      &lt;td&gt;0.096270&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;5&lt;/th&gt;
      &lt;td&gt;-0.603043&lt;/td&gt;
      &lt;td&gt;0.697143&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;3&lt;/th&gt;
      &lt;td&gt;1.703587&lt;/td&gt;
      &lt;td&gt;0.718288&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;0.208545&lt;/td&gt;
      &lt;td&gt;0.459722&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;100 rows × 2 columns&lt;/p&gt;
&lt;/div&gt;</content><author><name>Seonhwa Lee</name></author><category term="Code Snippet" /><category term="pandas" /><summary type="html">pandas, numpy 등 자주 헷갈리는 코드 사용을 모아두었습니다. df[::c] 시작부터 c 간격마다 있는 row를 슬라이싱해줍니다. 자세히 설명하면, 1번째, (1+c)번째, (1+2c)번째, …, (1+nc)번째 row가 선택됩니다. 아래는 예제입니다. import pandas as pd import numpy as np a = np.random.normal(size=200) b = np.random.uniform(size=200) sampledf = pd.DataFrame({'A':a,'B':b}) sampledf[::2] A B 0 0.312234 0.788584 2 -0.123720 0.445176 4 0.411344 0.617469 6 -0.434367 0.674210 8 -0.563221 0.009331 ... ... ... 190 1.797756 0.963394 192 -0.679177 0.033222 194 0.975527 0.041236 196 -1.354463 0.450887 198 -2.341788 0.009804 100 rows × 2 columns 위에 sampledf[::2]를 보시면 첫번째(index=0), 세번째(index=2), …., 199번째(index=198)이 선택되는 것을 확인하실 수 있습니다. 2의 간격 크기로 행이 선택되는 것입니다. df[::-1] df[::-1] 인 경우는 열의 배치를 뒤집어줍니다. 아래는 예시입니다. sampledf[::-1] A B 199 2.600890 0.775489 198 -2.341788 0.009804 197 -0.365103 0.413758 196 -1.354463 0.450887 195 0.685687 0.933069 ... ... ... 4 0.411344 0.617469 3 1.703587 0.718288 2 -0.123720 0.445176 1 0.208545 0.459722 0 0.312234 0.788584 200 rows × 2 columns df[::-c] 마찬가지로, df[::-c] 이면 뒤에 row부터 2간격마다 row가 선택됩니다. 아래는 예시입니다. sampledf[::-2] A B 199 2.600890 0.775489 197 -0.365103 0.413758 195 0.685687 0.933069 193 0.267967 0.020342 191 -0.918194 0.917082 ... ... ... 9 0.924938 0.837344 7 0.890616 0.096270 5 -0.603043 0.697143 3 1.703587 0.718288 1 0.208545 0.459722 100 rows × 2 columns</summary></entry></feed>